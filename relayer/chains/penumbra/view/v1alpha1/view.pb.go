// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/view/v1alpha1/view.proto

package viewv1alpha1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	v1alpha110 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/app/v1alpha1"
	v1alpha15 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/asset/v1alpha1"
	v1alpha111 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/chain/v1alpha1"
	v1alpha19 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/dex/v1alpha1"
	v1alpha12 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/fee/v1alpha1"
	v1alpha14 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/ibc/v1alpha1"
	v1alpha112 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/sct/v1alpha1"
	v1alpha113 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/shielded_pool/v1alpha1"
	v1alpha18 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/stake/v1alpha1"
	v1alpha13 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/keys/v1alpha1"
	v1alpha17 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/num/v1alpha1"
	v1alpha1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/transaction/v1alpha1"
	v1alpha11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/txhash/v1alpha1"
	v1alpha16 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/crypto/tct/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthorizeAndBuildRequest struct {
	// The transaction plan to authorize and build.
	TransactionPlan *v1alpha1.TransactionPlan `protobuf:"bytes,1,opt,name=transaction_plan,json=transactionPlan,proto3" json:"transaction_plan,omitempty"`
	// The authorization data to use to authorize the transaction plan.
	AuthorizationData *v1alpha1.AuthorizationData `protobuf:"bytes,2,opt,name=authorization_data,json=authorizationData,proto3" json:"authorization_data,omitempty"`
}

func (m *AuthorizeAndBuildRequest) Reset()         { *m = AuthorizeAndBuildRequest{} }
func (m *AuthorizeAndBuildRequest) String() string { return proto.CompactTextString(m) }
func (*AuthorizeAndBuildRequest) ProtoMessage()    {}
func (*AuthorizeAndBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{0}
}
func (m *AuthorizeAndBuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeAndBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeAndBuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeAndBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeAndBuildRequest.Merge(m, src)
}
func (m *AuthorizeAndBuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeAndBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeAndBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeAndBuildRequest proto.InternalMessageInfo

func (m *AuthorizeAndBuildRequest) GetTransactionPlan() *v1alpha1.TransactionPlan {
	if m != nil {
		return m.TransactionPlan
	}
	return nil
}

func (m *AuthorizeAndBuildRequest) GetAuthorizationData() *v1alpha1.AuthorizationData {
	if m != nil {
		return m.AuthorizationData
	}
	return nil
}

type AuthorizeAndBuildResponse struct {
	// The transaction that was built.
	Transaction *v1alpha1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *AuthorizeAndBuildResponse) Reset()         { *m = AuthorizeAndBuildResponse{} }
func (m *AuthorizeAndBuildResponse) String() string { return proto.CompactTextString(m) }
func (*AuthorizeAndBuildResponse) ProtoMessage()    {}
func (*AuthorizeAndBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{1}
}
func (m *AuthorizeAndBuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeAndBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeAndBuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeAndBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeAndBuildResponse.Merge(m, src)
}
func (m *AuthorizeAndBuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeAndBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeAndBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeAndBuildResponse proto.InternalMessageInfo

func (m *AuthorizeAndBuildResponse) GetTransaction() *v1alpha1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type BroadcastTransactionRequest struct {
	// The transaction to broadcast.
	Transaction *v1alpha1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// If true, wait for the view service to detect the transaction during sync.
	AwaitDetection bool `protobuf:"varint,2,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *BroadcastTransactionRequest) Reset()         { *m = BroadcastTransactionRequest{} }
func (m *BroadcastTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastTransactionRequest) ProtoMessage()    {}
func (*BroadcastTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{2}
}
func (m *BroadcastTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTransactionRequest.Merge(m, src)
}
func (m *BroadcastTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTransactionRequest proto.InternalMessageInfo

func (m *BroadcastTransactionRequest) GetTransaction() *v1alpha1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *BroadcastTransactionRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type BroadcastTransactionResponse struct {
	// The hash of the transaction that was broadcast.
	Id *v1alpha11.TransactionId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The height in which the transaction was detected as included in the chain, if any.
	// Will not be included unless await_detection was true.
	DetectionHeight uint64 `protobuf:"varint,2,opt,name=detection_height,json=detectionHeight,proto3" json:"detection_height,omitempty"`
}

func (m *BroadcastTransactionResponse) Reset()         { *m = BroadcastTransactionResponse{} }
func (m *BroadcastTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastTransactionResponse) ProtoMessage()    {}
func (*BroadcastTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{3}
}
func (m *BroadcastTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTransactionResponse.Merge(m, src)
}
func (m *BroadcastTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTransactionResponse proto.InternalMessageInfo

func (m *BroadcastTransactionResponse) GetId() *v1alpha11.TransactionId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BroadcastTransactionResponse) GetDetectionHeight() uint64 {
	if m != nil {
		return m.DetectionHeight
	}
	return 0
}

type TransactionPlannerRequest struct {
	// The expiry height for the requested TransactionPlan
	ExpiryHeight uint64 `protobuf:"varint,1,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	// The fee for the requested TransactionPlan, if any.
	Fee *v1alpha12.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// The memo for the requested TransactionPlan.
	// The memo must be unspecified unless `outputs` is nonempty.
	Memo *v1alpha1.MemoPlaintext `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// If present, only spends funds from the given account.
	Source *v1alpha13.AddressIndex `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Request contents
	Outputs           []*TransactionPlannerRequest_Output           `protobuf:"bytes,20,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Swaps             []*TransactionPlannerRequest_Swap             `protobuf:"bytes,30,rep,name=swaps,proto3" json:"swaps,omitempty"`
	SwapClaims        []*TransactionPlannerRequest_SwapClaim        `protobuf:"bytes,31,rep,name=swap_claims,json=swapClaims,proto3" json:"swap_claims,omitempty"`
	Delegations       []*TransactionPlannerRequest_Delegate         `protobuf:"bytes,40,rep,name=delegations,proto3" json:"delegations,omitempty"`
	Undelegations     []*TransactionPlannerRequest_Undelegate       `protobuf:"bytes,50,rep,name=undelegations,proto3" json:"undelegations,omitempty"`
	IbcRelayActions   []*v1alpha14.IbcRelay                         `protobuf:"bytes,60,rep,name=ibc_relay_actions,json=ibcRelayActions,proto3" json:"ibc_relay_actions,omitempty"`
	Ics20Withdrawals  []*v1alpha14.Ics20Withdrawal                  `protobuf:"bytes,61,rep,name=ics20_withdrawals,json=ics20Withdrawals,proto3" json:"ics20_withdrawals,omitempty"`
	PositionOpens     []*TransactionPlannerRequest_PositionOpen     `protobuf:"bytes,70,rep,name=position_opens,json=positionOpens,proto3" json:"position_opens,omitempty"`
	PositionCloses    []*TransactionPlannerRequest_PositionClose    `protobuf:"bytes,71,rep,name=position_closes,json=positionCloses,proto3" json:"position_closes,omitempty"`
	PositionWithdraws []*TransactionPlannerRequest_PositionWithdraw `protobuf:"bytes,72,rep,name=position_withdraws,json=positionWithdraws,proto3" json:"position_withdraws,omitempty"`
}

func (m *TransactionPlannerRequest) Reset()         { *m = TransactionPlannerRequest{} }
func (m *TransactionPlannerRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest) ProtoMessage()    {}
func (*TransactionPlannerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4}
}
func (m *TransactionPlannerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest.Merge(m, src)
}
func (m *TransactionPlannerRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest proto.InternalMessageInfo

func (m *TransactionPlannerRequest) GetExpiryHeight() uint64 {
	if m != nil {
		return m.ExpiryHeight
	}
	return 0
}

func (m *TransactionPlannerRequest) GetFee() *v1alpha12.Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *TransactionPlannerRequest) GetMemo() *v1alpha1.MemoPlaintext {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *TransactionPlannerRequest) GetSource() *v1alpha13.AddressIndex {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *TransactionPlannerRequest) GetOutputs() []*TransactionPlannerRequest_Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TransactionPlannerRequest) GetSwaps() []*TransactionPlannerRequest_Swap {
	if m != nil {
		return m.Swaps
	}
	return nil
}

func (m *TransactionPlannerRequest) GetSwapClaims() []*TransactionPlannerRequest_SwapClaim {
	if m != nil {
		return m.SwapClaims
	}
	return nil
}

func (m *TransactionPlannerRequest) GetDelegations() []*TransactionPlannerRequest_Delegate {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *TransactionPlannerRequest) GetUndelegations() []*TransactionPlannerRequest_Undelegate {
	if m != nil {
		return m.Undelegations
	}
	return nil
}

func (m *TransactionPlannerRequest) GetIbcRelayActions() []*v1alpha14.IbcRelay {
	if m != nil {
		return m.IbcRelayActions
	}
	return nil
}

func (m *TransactionPlannerRequest) GetIcs20Withdrawals() []*v1alpha14.Ics20Withdrawal {
	if m != nil {
		return m.Ics20Withdrawals
	}
	return nil
}

func (m *TransactionPlannerRequest) GetPositionOpens() []*TransactionPlannerRequest_PositionOpen {
	if m != nil {
		return m.PositionOpens
	}
	return nil
}

func (m *TransactionPlannerRequest) GetPositionCloses() []*TransactionPlannerRequest_PositionClose {
	if m != nil {
		return m.PositionCloses
	}
	return nil
}

func (m *TransactionPlannerRequest) GetPositionWithdraws() []*TransactionPlannerRequest_PositionWithdraw {
	if m != nil {
		return m.PositionWithdraws
	}
	return nil
}

// Request message subtypes
type TransactionPlannerRequest_Output struct {
	// The amount and denomination in which the Output is issued.
	Value *v1alpha15.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The address to which Output will be sent.
	Address *v1alpha13.Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *TransactionPlannerRequest_Output) Reset()         { *m = TransactionPlannerRequest_Output{} }
func (m *TransactionPlannerRequest_Output) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Output) ProtoMessage()    {}
func (*TransactionPlannerRequest_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4, 0}
}
func (m *TransactionPlannerRequest_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Output.Merge(m, src)
}
func (m *TransactionPlannerRequest_Output) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Output proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Output) GetValue() *v1alpha15.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionPlannerRequest_Output) GetAddress() *v1alpha13.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type TransactionPlannerRequest_Swap struct {
	// The input amount and denomination to be traded in the Swap.
	Value *v1alpha15.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The denomination to be received as a Output of the Swap.
	TargetAsset *v1alpha15.AssetId `protobuf:"bytes,2,opt,name=target_asset,json=targetAsset,proto3" json:"target_asset,omitempty"`
	// The pre-paid fee to be paid for claiming the Swap outputs.
	Fee *v1alpha12.Fee `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// The address to which swap claim output will be sent.
	ClaimAddress *v1alpha13.Address `protobuf:"bytes,4,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
}

func (m *TransactionPlannerRequest_Swap) Reset()         { *m = TransactionPlannerRequest_Swap{} }
func (m *TransactionPlannerRequest_Swap) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Swap) ProtoMessage()    {}
func (*TransactionPlannerRequest_Swap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4, 1}
}
func (m *TransactionPlannerRequest_Swap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Swap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Swap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Swap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Swap.Merge(m, src)
}
func (m *TransactionPlannerRequest_Swap) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Swap) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Swap.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Swap proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Swap) GetValue() *v1alpha15.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionPlannerRequest_Swap) GetTargetAsset() *v1alpha15.AssetId {
	if m != nil {
		return m.TargetAsset
	}
	return nil
}

func (m *TransactionPlannerRequest_Swap) GetFee() *v1alpha12.Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *TransactionPlannerRequest_Swap) GetClaimAddress() *v1alpha13.Address {
	if m != nil {
		return m.ClaimAddress
	}
	return nil
}

type TransactionPlannerRequest_SwapClaim struct {
	// SwapCommitment to identify the Swap to be claimed.
	// Use the commitment from the Swap message:
	// penumbra.core.component.dex.v1alpha1.Swap.body.payload.commitment.
	SwapCommitment *v1alpha16.StateCommitment `protobuf:"bytes,1,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
}

func (m *TransactionPlannerRequest_SwapClaim) Reset()         { *m = TransactionPlannerRequest_SwapClaim{} }
func (m *TransactionPlannerRequest_SwapClaim) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_SwapClaim) ProtoMessage()    {}
func (*TransactionPlannerRequest_SwapClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4, 2}
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_SwapClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_SwapClaim.Merge(m, src)
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_SwapClaim.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_SwapClaim proto.InternalMessageInfo

func (m *TransactionPlannerRequest_SwapClaim) GetSwapCommitment() *v1alpha16.StateCommitment {
	if m != nil {
		return m.SwapCommitment
	}
	return nil
}

type TransactionPlannerRequest_Delegate struct {
	Amount   *v1alpha17.Amount   `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	RateData *v1alpha18.RateData `protobuf:"bytes,3,opt,name=rate_data,json=rateData,proto3" json:"rate_data,omitempty"`
}

func (m *TransactionPlannerRequest_Delegate) Reset()         { *m = TransactionPlannerRequest_Delegate{} }
func (m *TransactionPlannerRequest_Delegate) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Delegate) ProtoMessage()    {}
func (*TransactionPlannerRequest_Delegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4, 3}
}
func (m *TransactionPlannerRequest_Delegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Delegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Delegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Delegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Delegate.Merge(m, src)
}
func (m *TransactionPlannerRequest_Delegate) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Delegate) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Delegate.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Delegate proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Delegate) GetAmount() *v1alpha17.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransactionPlannerRequest_Delegate) GetRateData() *v1alpha18.RateData {
	if m != nil {
		return m.RateData
	}
	return nil
}

type TransactionPlannerRequest_Undelegate struct {
	Value    *v1alpha15.Value    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	RateData *v1alpha18.RateData `protobuf:"bytes,2,opt,name=rate_data,json=rateData,proto3" json:"rate_data,omitempty"`
}

func (m *TransactionPlannerRequest_Undelegate) Reset()         { *m = TransactionPlannerRequest_Undelegate{} }
func (m *TransactionPlannerRequest_Undelegate) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Undelegate) ProtoMessage()    {}
func (*TransactionPlannerRequest_Undelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4, 4}
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Undelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Undelegate.Merge(m, src)
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Undelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Undelegate.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Undelegate proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Undelegate) GetValue() *v1alpha15.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionPlannerRequest_Undelegate) GetRateData() *v1alpha18.RateData {
	if m != nil {
		return m.RateData
	}
	return nil
}

type TransactionPlannerRequest_PositionOpen struct {
	// Contains the data defining the position, sufficient to compute its `PositionId`.
	//
	// Positions are immutable, so the `PositionData` (and hence the `PositionId`)
	// are unchanged over the entire lifetime of the position.
	Position *v1alpha19.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *TransactionPlannerRequest_PositionOpen) Reset() {
	*m = TransactionPlannerRequest_PositionOpen{}
}
func (m *TransactionPlannerRequest_PositionOpen) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_PositionOpen) ProtoMessage()    {}
func (*TransactionPlannerRequest_PositionOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4, 5}
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_PositionOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_PositionOpen.Merge(m, src)
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_PositionOpen.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_PositionOpen proto.InternalMessageInfo

func (m *TransactionPlannerRequest_PositionOpen) GetPosition() *v1alpha19.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

type TransactionPlannerRequest_PositionClose struct {
	// The position to close.
	PositionId *v1alpha19.PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *TransactionPlannerRequest_PositionClose) Reset() {
	*m = TransactionPlannerRequest_PositionClose{}
}
func (m *TransactionPlannerRequest_PositionClose) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_PositionClose) ProtoMessage()    {}
func (*TransactionPlannerRequest_PositionClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4, 6}
}
func (m *TransactionPlannerRequest_PositionClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_PositionClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_PositionClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_PositionClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_PositionClose.Merge(m, src)
}
func (m *TransactionPlannerRequest_PositionClose) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_PositionClose) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_PositionClose.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_PositionClose proto.InternalMessageInfo

func (m *TransactionPlannerRequest_PositionClose) GetPositionId() *v1alpha19.PositionId {
	if m != nil {
		return m.PositionId
	}
	return nil
}

type TransactionPlannerRequest_PositionWithdraw struct {
	// The position to withdraw.
	PositionId *v1alpha19.PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// The position's final reserves.
	Reserves *v1alpha19.Reserves `protobuf:"bytes,2,opt,name=reserves,proto3" json:"reserves,omitempty"`
	// The trading pair of the position.
	TradingPair *v1alpha19.TradingPair `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *TransactionPlannerRequest_PositionWithdraw) Reset() {
	*m = TransactionPlannerRequest_PositionWithdraw{}
}
func (m *TransactionPlannerRequest_PositionWithdraw) String() string {
	return proto.CompactTextString(m)
}
func (*TransactionPlannerRequest_PositionWithdraw) ProtoMessage() {}
func (*TransactionPlannerRequest_PositionWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4, 7}
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_PositionWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_PositionWithdraw.Merge(m, src)
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_PositionWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_PositionWithdraw proto.InternalMessageInfo

func (m *TransactionPlannerRequest_PositionWithdraw) GetPositionId() *v1alpha19.PositionId {
	if m != nil {
		return m.PositionId
	}
	return nil
}

func (m *TransactionPlannerRequest_PositionWithdraw) GetReserves() *v1alpha19.Reserves {
	if m != nil {
		return m.Reserves
	}
	return nil
}

func (m *TransactionPlannerRequest_PositionWithdraw) GetTradingPair() *v1alpha19.TradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type TransactionPlannerResponse struct {
	Plan *v1alpha1.TransactionPlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *TransactionPlannerResponse) Reset()         { *m = TransactionPlannerResponse{} }
func (m *TransactionPlannerResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerResponse) ProtoMessage()    {}
func (*TransactionPlannerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{5}
}
func (m *TransactionPlannerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerResponse.Merge(m, src)
}
func (m *TransactionPlannerResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerResponse proto.InternalMessageInfo

func (m *TransactionPlannerResponse) GetPlan() *v1alpha1.TransactionPlan {
	if m != nil {
		return m.Plan
	}
	return nil
}

type AddressByIndexRequest struct {
	AddressIndex *v1alpha13.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *AddressByIndexRequest) Reset()         { *m = AddressByIndexRequest{} }
func (m *AddressByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*AddressByIndexRequest) ProtoMessage()    {}
func (*AddressByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{6}
}
func (m *AddressByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressByIndexRequest.Merge(m, src)
}
func (m *AddressByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddressByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddressByIndexRequest proto.InternalMessageInfo

func (m *AddressByIndexRequest) GetAddressIndex() *v1alpha13.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type AddressByIndexResponse struct {
	Address *v1alpha13.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AddressByIndexResponse) Reset()         { *m = AddressByIndexResponse{} }
func (m *AddressByIndexResponse) String() string { return proto.CompactTextString(m) }
func (*AddressByIndexResponse) ProtoMessage()    {}
func (*AddressByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{7}
}
func (m *AddressByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressByIndexResponse.Merge(m, src)
}
func (m *AddressByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddressByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddressByIndexResponse proto.InternalMessageInfo

func (m *AddressByIndexResponse) GetAddress() *v1alpha13.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type WalletIdRequest struct {
}

func (m *WalletIdRequest) Reset()         { *m = WalletIdRequest{} }
func (m *WalletIdRequest) String() string { return proto.CompactTextString(m) }
func (*WalletIdRequest) ProtoMessage()    {}
func (*WalletIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{8}
}
func (m *WalletIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletIdRequest.Merge(m, src)
}
func (m *WalletIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *WalletIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WalletIdRequest proto.InternalMessageInfo

type WalletIdResponse struct {
	WalletId *v1alpha13.WalletId `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (m *WalletIdResponse) Reset()         { *m = WalletIdResponse{} }
func (m *WalletIdResponse) String() string { return proto.CompactTextString(m) }
func (*WalletIdResponse) ProtoMessage()    {}
func (*WalletIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{9}
}
func (m *WalletIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletIdResponse.Merge(m, src)
}
func (m *WalletIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *WalletIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WalletIdResponse proto.InternalMessageInfo

func (m *WalletIdResponse) GetWalletId() *v1alpha13.WalletId {
	if m != nil {
		return m.WalletId
	}
	return nil
}

type IndexByAddressRequest struct {
	Address *v1alpha13.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IndexByAddressRequest) Reset()         { *m = IndexByAddressRequest{} }
func (m *IndexByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*IndexByAddressRequest) ProtoMessage()    {}
func (*IndexByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{10}
}
func (m *IndexByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexByAddressRequest.Merge(m, src)
}
func (m *IndexByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *IndexByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndexByAddressRequest proto.InternalMessageInfo

func (m *IndexByAddressRequest) GetAddress() *v1alpha13.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type IndexByAddressResponse struct {
	// Will be absent if given an address not viewable by this viewing service
	AddressIndex *v1alpha13.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *IndexByAddressResponse) Reset()         { *m = IndexByAddressResponse{} }
func (m *IndexByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*IndexByAddressResponse) ProtoMessage()    {}
func (*IndexByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{11}
}
func (m *IndexByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexByAddressResponse.Merge(m, src)
}
func (m *IndexByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *IndexByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndexByAddressResponse proto.InternalMessageInfo

func (m *IndexByAddressResponse) GetAddressIndex() *v1alpha13.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type EphemeralAddressRequest struct {
	AddressIndex   *v1alpha13.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	DisplayConfirm bool                    `protobuf:"varint,2,opt,name=display_confirm,json=displayConfirm,proto3" json:"display_confirm,omitempty"`
}

func (m *EphemeralAddressRequest) Reset()         { *m = EphemeralAddressRequest{} }
func (m *EphemeralAddressRequest) String() string { return proto.CompactTextString(m) }
func (*EphemeralAddressRequest) ProtoMessage()    {}
func (*EphemeralAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{12}
}
func (m *EphemeralAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EphemeralAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EphemeralAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralAddressRequest.Merge(m, src)
}
func (m *EphemeralAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralAddressRequest proto.InternalMessageInfo

func (m *EphemeralAddressRequest) GetAddressIndex() *v1alpha13.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *EphemeralAddressRequest) GetDisplayConfirm() bool {
	if m != nil {
		return m.DisplayConfirm
	}
	return false
}

type EphemeralAddressResponse struct {
	Address *v1alpha13.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EphemeralAddressResponse) Reset()         { *m = EphemeralAddressResponse{} }
func (m *EphemeralAddressResponse) String() string { return proto.CompactTextString(m) }
func (*EphemeralAddressResponse) ProtoMessage()    {}
func (*EphemeralAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{13}
}
func (m *EphemeralAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EphemeralAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EphemeralAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralAddressResponse.Merge(m, src)
}
func (m *EphemeralAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralAddressResponse proto.InternalMessageInfo

func (m *EphemeralAddressResponse) GetAddress() *v1alpha13.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type BalancesRequest struct {
	// If present, filter balances to only include the account specified by the `AddressIndex`.
	AccountFilter *v1alpha13.AddressIndex `protobuf:"bytes,1,opt,name=account_filter,json=accountFilter,proto3" json:"account_filter,omitempty"`
	// If present, filter balances to only include the specified asset ID.
	AssetIdFilter *v1alpha15.AssetId `protobuf:"bytes,2,opt,name=asset_id_filter,json=assetIdFilter,proto3" json:"asset_id_filter,omitempty"`
}

func (m *BalancesRequest) Reset()         { *m = BalancesRequest{} }
func (m *BalancesRequest) String() string { return proto.CompactTextString(m) }
func (*BalancesRequest) ProtoMessage()    {}
func (*BalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{14}
}
func (m *BalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalancesRequest.Merge(m, src)
}
func (m *BalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *BalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BalancesRequest proto.InternalMessageInfo

func (m *BalancesRequest) GetAccountFilter() *v1alpha13.AddressIndex {
	if m != nil {
		return m.AccountFilter
	}
	return nil
}

func (m *BalancesRequest) GetAssetIdFilter() *v1alpha15.AssetId {
	if m != nil {
		return m.AssetIdFilter
	}
	return nil
}

type BalancesResponse struct {
	Account *v1alpha13.AddressIndex `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Balance *v1alpha15.Value        `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *BalancesResponse) Reset()         { *m = BalancesResponse{} }
func (m *BalancesResponse) String() string { return proto.CompactTextString(m) }
func (*BalancesResponse) ProtoMessage()    {}
func (*BalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{15}
}
func (m *BalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalancesResponse.Merge(m, src)
}
func (m *BalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *BalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BalancesResponse proto.InternalMessageInfo

func (m *BalancesResponse) GetAccount() *v1alpha13.AddressIndex {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *BalancesResponse) GetBalance() *v1alpha15.Value {
	if m != nil {
		return m.Balance
	}
	return nil
}

// Requests sync status of the view service.
type StatusRequest struct {
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{16}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

// Returns the status of the view service and whether it is synchronized with the chain state.
type StatusResponse struct {
	// The height the view service has synchronized to so far when doing a full linear sync
	FullSyncHeight uint64 `protobuf:"varint,1,opt,name=full_sync_height,json=fullSyncHeight,proto3" json:"full_sync_height,omitempty"`
	// The height the view service has synchronized to so far when doing a partial sync
	PartialSyncHeight uint64 `protobuf:"varint,2,opt,name=partial_sync_height,json=partialSyncHeight,proto3" json:"partial_sync_height,omitempty"`
	// Whether the view service is catching up with the chain state
	CatchingUp bool `protobuf:"varint,3,opt,name=catching_up,json=catchingUp,proto3" json:"catching_up,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{17}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetFullSyncHeight() uint64 {
	if m != nil {
		return m.FullSyncHeight
	}
	return 0
}

func (m *StatusResponse) GetPartialSyncHeight() uint64 {
	if m != nil {
		return m.PartialSyncHeight
	}
	return 0
}

func (m *StatusResponse) GetCatchingUp() bool {
	if m != nil {
		return m.CatchingUp
	}
	return false
}

// Requests streaming updates on the sync height until the view service is synchronized.
type StatusStreamRequest struct {
}

func (m *StatusStreamRequest) Reset()         { *m = StatusStreamRequest{} }
func (m *StatusStreamRequest) String() string { return proto.CompactTextString(m) }
func (*StatusStreamRequest) ProtoMessage()    {}
func (*StatusStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{18}
}
func (m *StatusStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusStreamRequest.Merge(m, src)
}
func (m *StatusStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusStreamRequest proto.InternalMessageInfo

// A streaming sync status update
type StatusStreamResponse struct {
	// The latest known block height
	LatestKnownBlockHeight uint64 `protobuf:"varint,1,opt,name=latest_known_block_height,json=latestKnownBlockHeight,proto3" json:"latest_known_block_height,omitempty"`
	// The height the view service has synchronized to so far when doing a full linear sync
	FullSyncHeight uint64 `protobuf:"varint,2,opt,name=full_sync_height,json=fullSyncHeight,proto3" json:"full_sync_height,omitempty"`
	// The height the view service has synchronized to so far when doing a partial sync
	PartialSyncHeight uint64 `protobuf:"varint,3,opt,name=partial_sync_height,json=partialSyncHeight,proto3" json:"partial_sync_height,omitempty"`
}

func (m *StatusStreamResponse) Reset()         { *m = StatusStreamResponse{} }
func (m *StatusStreamResponse) String() string { return proto.CompactTextString(m) }
func (*StatusStreamResponse) ProtoMessage()    {}
func (*StatusStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{19}
}
func (m *StatusStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusStreamResponse.Merge(m, src)
}
func (m *StatusStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusStreamResponse proto.InternalMessageInfo

func (m *StatusStreamResponse) GetLatestKnownBlockHeight() uint64 {
	if m != nil {
		return m.LatestKnownBlockHeight
	}
	return 0
}

func (m *StatusStreamResponse) GetFullSyncHeight() uint64 {
	if m != nil {
		return m.FullSyncHeight
	}
	return 0
}

func (m *StatusStreamResponse) GetPartialSyncHeight() uint64 {
	if m != nil {
		return m.PartialSyncHeight
	}
	return 0
}

// A query for notes known by the view service.
//
// This message uses the fact that all proto fields are optional
// to allow various filtering on the returned notes.
type NotesRequest struct {
	// If set, return spent notes as well as unspent notes.
	IncludeSpent bool `protobuf:"varint,2,opt,name=include_spent,json=includeSpent,proto3" json:"include_spent,omitempty"`
	// If set, only return notes with the specified asset id.
	AssetId *v1alpha15.AssetId `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// If set, only return notes with the specified address incore.component.dex.v1alpha1.
	AddressIndex *v1alpha13.AddressIndex `protobuf:"bytes,4,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// If set, stop returning notes once the total exceeds this amount.
	//
	// Ignored if `asset_id` is unset or if `include_spent` is set.
	AmountToSpend *v1alpha17.Amount `protobuf:"bytes,6,opt,name=amount_to_spend,json=amountToSpend,proto3" json:"amount_to_spend,omitempty"`
}

func (m *NotesRequest) Reset()         { *m = NotesRequest{} }
func (m *NotesRequest) String() string { return proto.CompactTextString(m) }
func (*NotesRequest) ProtoMessage()    {}
func (*NotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{20}
}
func (m *NotesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesRequest.Merge(m, src)
}
func (m *NotesRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotesRequest proto.InternalMessageInfo

func (m *NotesRequest) GetIncludeSpent() bool {
	if m != nil {
		return m.IncludeSpent
	}
	return false
}

func (m *NotesRequest) GetAssetId() *v1alpha15.AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

func (m *NotesRequest) GetAddressIndex() *v1alpha13.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *NotesRequest) GetAmountToSpend() *v1alpha17.Amount {
	if m != nil {
		return m.AmountToSpend
	}
	return nil
}

// A query for notes to be used for voting on a proposal.
type NotesForVotingRequest struct {
	// The starting height of the proposal.
	VotableAtHeight uint64 `protobuf:"varint,1,opt,name=votable_at_height,json=votableAtHeight,proto3" json:"votable_at_height,omitempty"`
	// If set, only return notes with the specified asset id.
	AddressIndex *v1alpha13.AddressIndex `protobuf:"bytes,3,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *NotesForVotingRequest) Reset()         { *m = NotesForVotingRequest{} }
func (m *NotesForVotingRequest) String() string { return proto.CompactTextString(m) }
func (*NotesForVotingRequest) ProtoMessage()    {}
func (*NotesForVotingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{21}
}
func (m *NotesForVotingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesForVotingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesForVotingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesForVotingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesForVotingRequest.Merge(m, src)
}
func (m *NotesForVotingRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotesForVotingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesForVotingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotesForVotingRequest proto.InternalMessageInfo

func (m *NotesForVotingRequest) GetVotableAtHeight() uint64 {
	if m != nil {
		return m.VotableAtHeight
	}
	return 0
}

func (m *NotesForVotingRequest) GetAddressIndex() *v1alpha13.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type WitnessRequest struct {
	// The note commitments to obtain auth paths for.
	NoteCommitments []*v1alpha16.StateCommitment `protobuf:"bytes,2,rep,name=note_commitments,json=noteCommitments,proto3" json:"note_commitments,omitempty"`
	// The transaction plan to witness
	TransactionPlan *v1alpha1.TransactionPlan `protobuf:"bytes,3,opt,name=transaction_plan,json=transactionPlan,proto3" json:"transaction_plan,omitempty"`
}

func (m *WitnessRequest) Reset()         { *m = WitnessRequest{} }
func (m *WitnessRequest) String() string { return proto.CompactTextString(m) }
func (*WitnessRequest) ProtoMessage()    {}
func (*WitnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{22}
}
func (m *WitnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessRequest.Merge(m, src)
}
func (m *WitnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *WitnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessRequest proto.InternalMessageInfo

func (m *WitnessRequest) GetNoteCommitments() []*v1alpha16.StateCommitment {
	if m != nil {
		return m.NoteCommitments
	}
	return nil
}

func (m *WitnessRequest) GetTransactionPlan() *v1alpha1.TransactionPlan {
	if m != nil {
		return m.TransactionPlan
	}
	return nil
}

type WitnessResponse struct {
	WitnessData *v1alpha1.WitnessData `protobuf:"bytes,1,opt,name=witness_data,json=witnessData,proto3" json:"witness_data,omitempty"`
}

func (m *WitnessResponse) Reset()         { *m = WitnessResponse{} }
func (m *WitnessResponse) String() string { return proto.CompactTextString(m) }
func (*WitnessResponse) ProtoMessage()    {}
func (*WitnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{23}
}
func (m *WitnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessResponse.Merge(m, src)
}
func (m *WitnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *WitnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessResponse proto.InternalMessageInfo

func (m *WitnessResponse) GetWitnessData() *v1alpha1.WitnessData {
	if m != nil {
		return m.WitnessData
	}
	return nil
}

type WitnessAndBuildRequest struct {
	TransactionPlan   *v1alpha1.TransactionPlan   `protobuf:"bytes,1,opt,name=transaction_plan,json=transactionPlan,proto3" json:"transaction_plan,omitempty"`
	AuthorizationData *v1alpha1.AuthorizationData `protobuf:"bytes,2,opt,name=authorization_data,json=authorizationData,proto3" json:"authorization_data,omitempty"`
}

func (m *WitnessAndBuildRequest) Reset()         { *m = WitnessAndBuildRequest{} }
func (m *WitnessAndBuildRequest) String() string { return proto.CompactTextString(m) }
func (*WitnessAndBuildRequest) ProtoMessage()    {}
func (*WitnessAndBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{24}
}
func (m *WitnessAndBuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessAndBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessAndBuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessAndBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessAndBuildRequest.Merge(m, src)
}
func (m *WitnessAndBuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *WitnessAndBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessAndBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessAndBuildRequest proto.InternalMessageInfo

func (m *WitnessAndBuildRequest) GetTransactionPlan() *v1alpha1.TransactionPlan {
	if m != nil {
		return m.TransactionPlan
	}
	return nil
}

func (m *WitnessAndBuildRequest) GetAuthorizationData() *v1alpha1.AuthorizationData {
	if m != nil {
		return m.AuthorizationData
	}
	return nil
}

type WitnessAndBuildResponse struct {
	Transaction *v1alpha1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *WitnessAndBuildResponse) Reset()         { *m = WitnessAndBuildResponse{} }
func (m *WitnessAndBuildResponse) String() string { return proto.CompactTextString(m) }
func (*WitnessAndBuildResponse) ProtoMessage()    {}
func (*WitnessAndBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{25}
}
func (m *WitnessAndBuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessAndBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessAndBuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessAndBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessAndBuildResponse.Merge(m, src)
}
func (m *WitnessAndBuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *WitnessAndBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessAndBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessAndBuildResponse proto.InternalMessageInfo

func (m *WitnessAndBuildResponse) GetTransaction() *v1alpha1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// Requests all assets known to the view service.
type AssetsRequest struct {
	// If set to false (default), returns all assets, regardless of whether the rest of the fields of
	// the request indicate a filter.
	Filtered bool `protobuf:"varint,1,opt,name=filtered,proto3" json:"filtered,omitempty"`
	// Include these specific denominations in the response.
	IncludeSpecificDenominations []*v1alpha15.Denom `protobuf:"bytes,2,rep,name=include_specific_denominations,json=includeSpecificDenominations,proto3" json:"include_specific_denominations,omitempty"`
	// Include all delegation tokens, to any validator, in the response.
	IncludeDelegationTokens bool `protobuf:"varint,3,opt,name=include_delegation_tokens,json=includeDelegationTokens,proto3" json:"include_delegation_tokens,omitempty"`
	// Include all unbonding tokens, from any validator, in the response.
	IncludeUnbondingTokens bool `protobuf:"varint,4,opt,name=include_unbonding_tokens,json=includeUnbondingTokens,proto3" json:"include_unbonding_tokens,omitempty"`
	// Include all LP NFTs in the response.
	IncludeLpNfts bool `protobuf:"varint,5,opt,name=include_lp_nfts,json=includeLpNfts,proto3" json:"include_lp_nfts,omitempty"`
	// Include all proposal NFTs in the response.
	IncludeProposalNfts bool `protobuf:"varint,6,opt,name=include_proposal_nfts,json=includeProposalNfts,proto3" json:"include_proposal_nfts,omitempty"`
	// Include all voting receipt tokens in the response.
	IncludeVotingReceiptTokens bool `protobuf:"varint,7,opt,name=include_voting_receipt_tokens,json=includeVotingReceiptTokens,proto3" json:"include_voting_receipt_tokens,omitempty"`
}

func (m *AssetsRequest) Reset()         { *m = AssetsRequest{} }
func (m *AssetsRequest) String() string { return proto.CompactTextString(m) }
func (*AssetsRequest) ProtoMessage()    {}
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{26}
}
func (m *AssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsRequest.Merge(m, src)
}
func (m *AssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsRequest proto.InternalMessageInfo

func (m *AssetsRequest) GetFiltered() bool {
	if m != nil {
		return m.Filtered
	}
	return false
}

func (m *AssetsRequest) GetIncludeSpecificDenominations() []*v1alpha15.Denom {
	if m != nil {
		return m.IncludeSpecificDenominations
	}
	return nil
}

func (m *AssetsRequest) GetIncludeDelegationTokens() bool {
	if m != nil {
		return m.IncludeDelegationTokens
	}
	return false
}

func (m *AssetsRequest) GetIncludeUnbondingTokens() bool {
	if m != nil {
		return m.IncludeUnbondingTokens
	}
	return false
}

func (m *AssetsRequest) GetIncludeLpNfts() bool {
	if m != nil {
		return m.IncludeLpNfts
	}
	return false
}

func (m *AssetsRequest) GetIncludeProposalNfts() bool {
	if m != nil {
		return m.IncludeProposalNfts
	}
	return false
}

func (m *AssetsRequest) GetIncludeVotingReceiptTokens() bool {
	if m != nil {
		return m.IncludeVotingReceiptTokens
	}
	return false
}

// Requests all assets known to the view service.
type AssetsResponse struct {
	DenomMetadata *v1alpha15.DenomMetadata `protobuf:"bytes,2,opt,name=denom_metadata,json=denomMetadata,proto3" json:"denom_metadata,omitempty"`
}

func (m *AssetsResponse) Reset()         { *m = AssetsResponse{} }
func (m *AssetsResponse) String() string { return proto.CompactTextString(m) }
func (*AssetsResponse) ProtoMessage()    {}
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{27}
}
func (m *AssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsResponse.Merge(m, src)
}
func (m *AssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsResponse proto.InternalMessageInfo

func (m *AssetsResponse) GetDenomMetadata() *v1alpha15.DenomMetadata {
	if m != nil {
		return m.DenomMetadata
	}
	return nil
}

// Requests the current app parameters from the view service.
type AppParametersRequest struct {
}

func (m *AppParametersRequest) Reset()         { *m = AppParametersRequest{} }
func (m *AppParametersRequest) String() string { return proto.CompactTextString(m) }
func (*AppParametersRequest) ProtoMessage()    {}
func (*AppParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{28}
}
func (m *AppParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParametersRequest.Merge(m, src)
}
func (m *AppParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppParametersRequest proto.InternalMessageInfo

type AppParametersResponse struct {
	Parameters *v1alpha110.AppParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *AppParametersResponse) Reset()         { *m = AppParametersResponse{} }
func (m *AppParametersResponse) String() string { return proto.CompactTextString(m) }
func (*AppParametersResponse) ProtoMessage()    {}
func (*AppParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{29}
}
func (m *AppParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParametersResponse.Merge(m, src)
}
func (m *AppParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *AppParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppParametersResponse proto.InternalMessageInfo

func (m *AppParametersResponse) GetParameters() *v1alpha110.AppParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// Requests the current gas prices from the view service.
type GasPricesRequest struct {
}

func (m *GasPricesRequest) Reset()         { *m = GasPricesRequest{} }
func (m *GasPricesRequest) String() string { return proto.CompactTextString(m) }
func (*GasPricesRequest) ProtoMessage()    {}
func (*GasPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{30}
}
func (m *GasPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasPricesRequest.Merge(m, src)
}
func (m *GasPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GasPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GasPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GasPricesRequest proto.InternalMessageInfo

type GasPricesResponse struct {
	GasPrices *v1alpha12.GasPrices `protobuf:"bytes,1,opt,name=gas_prices,json=gasPrices,proto3" json:"gas_prices,omitempty"`
}

func (m *GasPricesResponse) Reset()         { *m = GasPricesResponse{} }
func (m *GasPricesResponse) String() string { return proto.CompactTextString(m) }
func (*GasPricesResponse) ProtoMessage()    {}
func (*GasPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{31}
}
func (m *GasPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasPricesResponse.Merge(m, src)
}
func (m *GasPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GasPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GasPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GasPricesResponse proto.InternalMessageInfo

func (m *GasPricesResponse) GetGasPrices() *v1alpha12.GasPrices {
	if m != nil {
		return m.GasPrices
	}
	return nil
}

// Requests the current FMD parameters from the view service.
type FMDParametersRequest struct {
}

func (m *FMDParametersRequest) Reset()         { *m = FMDParametersRequest{} }
func (m *FMDParametersRequest) String() string { return proto.CompactTextString(m) }
func (*FMDParametersRequest) ProtoMessage()    {}
func (*FMDParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{32}
}
func (m *FMDParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FMDParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FMDParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FMDParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FMDParametersRequest.Merge(m, src)
}
func (m *FMDParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *FMDParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FMDParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FMDParametersRequest proto.InternalMessageInfo

type FMDParametersResponse struct {
	Parameters *v1alpha111.FmdParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *FMDParametersResponse) Reset()         { *m = FMDParametersResponse{} }
func (m *FMDParametersResponse) String() string { return proto.CompactTextString(m) }
func (*FMDParametersResponse) ProtoMessage()    {}
func (*FMDParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{33}
}
func (m *FMDParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FMDParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FMDParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FMDParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FMDParametersResponse.Merge(m, src)
}
func (m *FMDParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *FMDParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FMDParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FMDParametersResponse proto.InternalMessageInfo

func (m *FMDParametersResponse) GetParameters() *v1alpha111.FmdParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type NoteByCommitmentRequest struct {
	NoteCommitment *v1alpha16.StateCommitment `protobuf:"bytes,2,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// If set to true, waits to return until the requested note is detected.
	AwaitDetection bool `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *NoteByCommitmentRequest) Reset()         { *m = NoteByCommitmentRequest{} }
func (m *NoteByCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*NoteByCommitmentRequest) ProtoMessage()    {}
func (*NoteByCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{34}
}
func (m *NoteByCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoteByCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoteByCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoteByCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteByCommitmentRequest.Merge(m, src)
}
func (m *NoteByCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoteByCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteByCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoteByCommitmentRequest proto.InternalMessageInfo

func (m *NoteByCommitmentRequest) GetNoteCommitment() *v1alpha16.StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

func (m *NoteByCommitmentRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type NoteByCommitmentResponse struct {
	SpendableNote *SpendableNoteRecord `protobuf:"bytes,1,opt,name=spendable_note,json=spendableNote,proto3" json:"spendable_note,omitempty"`
}

func (m *NoteByCommitmentResponse) Reset()         { *m = NoteByCommitmentResponse{} }
func (m *NoteByCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*NoteByCommitmentResponse) ProtoMessage()    {}
func (*NoteByCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{35}
}
func (m *NoteByCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoteByCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoteByCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoteByCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteByCommitmentResponse.Merge(m, src)
}
func (m *NoteByCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *NoteByCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteByCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NoteByCommitmentResponse proto.InternalMessageInfo

func (m *NoteByCommitmentResponse) GetSpendableNote() *SpendableNoteRecord {
	if m != nil {
		return m.SpendableNote
	}
	return nil
}

type SwapByCommitmentRequest struct {
	SwapCommitment *v1alpha16.StateCommitment `protobuf:"bytes,2,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
	// If set to true, waits to return until the requested swap is detected.
	AwaitDetection bool `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *SwapByCommitmentRequest) Reset()         { *m = SwapByCommitmentRequest{} }
func (m *SwapByCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*SwapByCommitmentRequest) ProtoMessage()    {}
func (*SwapByCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{36}
}
func (m *SwapByCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapByCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapByCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapByCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapByCommitmentRequest.Merge(m, src)
}
func (m *SwapByCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwapByCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapByCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwapByCommitmentRequest proto.InternalMessageInfo

func (m *SwapByCommitmentRequest) GetSwapCommitment() *v1alpha16.StateCommitment {
	if m != nil {
		return m.SwapCommitment
	}
	return nil
}

func (m *SwapByCommitmentRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type SwapByCommitmentResponse struct {
	Swap *SwapRecord `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (m *SwapByCommitmentResponse) Reset()         { *m = SwapByCommitmentResponse{} }
func (m *SwapByCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*SwapByCommitmentResponse) ProtoMessage()    {}
func (*SwapByCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{37}
}
func (m *SwapByCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapByCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapByCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapByCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapByCommitmentResponse.Merge(m, src)
}
func (m *SwapByCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *SwapByCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapByCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwapByCommitmentResponse proto.InternalMessageInfo

func (m *SwapByCommitmentResponse) GetSwap() *SwapRecord {
	if m != nil {
		return m.Swap
	}
	return nil
}

type UnclaimedSwapsRequest struct {
}

func (m *UnclaimedSwapsRequest) Reset()         { *m = UnclaimedSwapsRequest{} }
func (m *UnclaimedSwapsRequest) String() string { return proto.CompactTextString(m) }
func (*UnclaimedSwapsRequest) ProtoMessage()    {}
func (*UnclaimedSwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{38}
}
func (m *UnclaimedSwapsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnclaimedSwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnclaimedSwapsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnclaimedSwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnclaimedSwapsRequest.Merge(m, src)
}
func (m *UnclaimedSwapsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnclaimedSwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnclaimedSwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnclaimedSwapsRequest proto.InternalMessageInfo

type UnclaimedSwapsResponse struct {
	Swap *SwapRecord `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (m *UnclaimedSwapsResponse) Reset()         { *m = UnclaimedSwapsResponse{} }
func (m *UnclaimedSwapsResponse) String() string { return proto.CompactTextString(m) }
func (*UnclaimedSwapsResponse) ProtoMessage()    {}
func (*UnclaimedSwapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{39}
}
func (m *UnclaimedSwapsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnclaimedSwapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnclaimedSwapsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnclaimedSwapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnclaimedSwapsResponse.Merge(m, src)
}
func (m *UnclaimedSwapsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnclaimedSwapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnclaimedSwapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnclaimedSwapsResponse proto.InternalMessageInfo

func (m *UnclaimedSwapsResponse) GetSwap() *SwapRecord {
	if m != nil {
		return m.Swap
	}
	return nil
}

type NullifierStatusRequest struct {
	Nullifier      *v1alpha112.Nullifier `protobuf:"bytes,2,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	AwaitDetection bool                  `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *NullifierStatusRequest) Reset()         { *m = NullifierStatusRequest{} }
func (m *NullifierStatusRequest) String() string { return proto.CompactTextString(m) }
func (*NullifierStatusRequest) ProtoMessage()    {}
func (*NullifierStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{40}
}
func (m *NullifierStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullifierStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullifierStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullifierStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullifierStatusRequest.Merge(m, src)
}
func (m *NullifierStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *NullifierStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NullifierStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NullifierStatusRequest proto.InternalMessageInfo

func (m *NullifierStatusRequest) GetNullifier() *v1alpha112.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *NullifierStatusRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type NullifierStatusResponse struct {
	Spent bool `protobuf:"varint,1,opt,name=spent,proto3" json:"spent,omitempty"`
}

func (m *NullifierStatusResponse) Reset()         { *m = NullifierStatusResponse{} }
func (m *NullifierStatusResponse) String() string { return proto.CompactTextString(m) }
func (*NullifierStatusResponse) ProtoMessage()    {}
func (*NullifierStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{41}
}
func (m *NullifierStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullifierStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullifierStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullifierStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullifierStatusResponse.Merge(m, src)
}
func (m *NullifierStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *NullifierStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NullifierStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NullifierStatusResponse proto.InternalMessageInfo

func (m *NullifierStatusResponse) GetSpent() bool {
	if m != nil {
		return m.Spent
	}
	return false
}

type TransactionInfoByHashRequest struct {
	// The transaction hash to query for.
	Id *v1alpha11.TransactionId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TransactionInfoByHashRequest) Reset()         { *m = TransactionInfoByHashRequest{} }
func (m *TransactionInfoByHashRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionInfoByHashRequest) ProtoMessage()    {}
func (*TransactionInfoByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{42}
}
func (m *TransactionInfoByHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfoByHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfoByHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfoByHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfoByHashRequest.Merge(m, src)
}
func (m *TransactionInfoByHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfoByHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfoByHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfoByHashRequest proto.InternalMessageInfo

func (m *TransactionInfoByHashRequest) GetId() *v1alpha11.TransactionId {
	if m != nil {
		return m.Id
	}
	return nil
}

type TransactionInfoRequest struct {
	// If present, return only transactions after this height.
	StartHeight uint64 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// If present, return only transactions before this height.
	EndHeight uint64 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (m *TransactionInfoRequest) Reset()         { *m = TransactionInfoRequest{} }
func (m *TransactionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionInfoRequest) ProtoMessage()    {}
func (*TransactionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{43}
}
func (m *TransactionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfoRequest.Merge(m, src)
}
func (m *TransactionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfoRequest proto.InternalMessageInfo

func (m *TransactionInfoRequest) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *TransactionInfoRequest) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type TransactionInfo struct {
	// The height the transaction was included in a block, if known.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The hash of the transaction.
	Id *v1alpha11.TransactionId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The transaction data itself.
	Transaction *v1alpha1.Transaction `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// The transaction perspective, as seen by this view server.
	Perspective *v1alpha1.TransactionPerspective `protobuf:"bytes,4,opt,name=perspective,proto3" json:"perspective,omitempty"`
	// A precomputed transaction view of `transaction` from `perspective`, included for convenience of clients that don't have support for viewing transactions on their own.
	View *v1alpha1.TransactionView `protobuf:"bytes,5,opt,name=view,proto3" json:"view,omitempty"`
}

func (m *TransactionInfo) Reset()         { *m = TransactionInfo{} }
func (m *TransactionInfo) String() string { return proto.CompactTextString(m) }
func (*TransactionInfo) ProtoMessage()    {}
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{44}
}
func (m *TransactionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfo.Merge(m, src)
}
func (m *TransactionInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfo proto.InternalMessageInfo

func (m *TransactionInfo) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TransactionInfo) GetId() *v1alpha11.TransactionId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TransactionInfo) GetTransaction() *v1alpha1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionInfo) GetPerspective() *v1alpha1.TransactionPerspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *TransactionInfo) GetView() *v1alpha1.TransactionView {
	if m != nil {
		return m.View
	}
	return nil
}

type TransactionInfoResponse struct {
	TxInfo *TransactionInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
}

func (m *TransactionInfoResponse) Reset()         { *m = TransactionInfoResponse{} }
func (m *TransactionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionInfoResponse) ProtoMessage()    {}
func (*TransactionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{45}
}
func (m *TransactionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfoResponse.Merge(m, src)
}
func (m *TransactionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfoResponse proto.InternalMessageInfo

func (m *TransactionInfoResponse) GetTxInfo() *TransactionInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

type TransactionInfoByHashResponse struct {
	TxInfo *TransactionInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
}

func (m *TransactionInfoByHashResponse) Reset()         { *m = TransactionInfoByHashResponse{} }
func (m *TransactionInfoByHashResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionInfoByHashResponse) ProtoMessage()    {}
func (*TransactionInfoByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{46}
}
func (m *TransactionInfoByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfoByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfoByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfoByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfoByHashResponse.Merge(m, src)
}
func (m *TransactionInfoByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfoByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfoByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfoByHashResponse proto.InternalMessageInfo

func (m *TransactionInfoByHashResponse) GetTxInfo() *TransactionInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

type NotesResponse struct {
	NoteRecord *SpendableNoteRecord `protobuf:"bytes,1,opt,name=note_record,json=noteRecord,proto3" json:"note_record,omitempty"`
}

func (m *NotesResponse) Reset()         { *m = NotesResponse{} }
func (m *NotesResponse) String() string { return proto.CompactTextString(m) }
func (*NotesResponse) ProtoMessage()    {}
func (*NotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{47}
}
func (m *NotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesResponse.Merge(m, src)
}
func (m *NotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotesResponse proto.InternalMessageInfo

func (m *NotesResponse) GetNoteRecord() *SpendableNoteRecord {
	if m != nil {
		return m.NoteRecord
	}
	return nil
}

type NotesForVotingResponse struct {
	NoteRecord  *SpendableNoteRecord   `protobuf:"bytes,1,opt,name=note_record,json=noteRecord,proto3" json:"note_record,omitempty"`
	IdentityKey *v1alpha13.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *NotesForVotingResponse) Reset()         { *m = NotesForVotingResponse{} }
func (m *NotesForVotingResponse) String() string { return proto.CompactTextString(m) }
func (*NotesForVotingResponse) ProtoMessage()    {}
func (*NotesForVotingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{48}
}
func (m *NotesForVotingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesForVotingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesForVotingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesForVotingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesForVotingResponse.Merge(m, src)
}
func (m *NotesForVotingResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotesForVotingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesForVotingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotesForVotingResponse proto.InternalMessageInfo

func (m *NotesForVotingResponse) GetNoteRecord() *SpendableNoteRecord {
	if m != nil {
		return m.NoteRecord
	}
	return nil
}

func (m *NotesForVotingResponse) GetIdentityKey() *v1alpha13.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

// A note plaintext with associated metadata about its status.
type SpendableNoteRecord struct {
	// The note commitment, identifying the note.
	NoteCommitment *v1alpha16.StateCommitment `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// The note plaintext itself.
	Note *v1alpha113.Note `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	// A precomputed decryption of the note's address incore.component.dex.v1alpha1.
	AddressIndex *v1alpha13.AddressIndex `protobuf:"bytes,3,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// The note's nullifier.
	Nullifier *v1alpha112.Nullifier `protobuf:"bytes,4,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The height at which the note was created.
	HeightCreated uint64 `protobuf:"varint,5,opt,name=height_created,json=heightCreated,proto3" json:"height_created,omitempty"`
	// Records whether the note was spent (and if so, at what height).
	HeightSpent uint64 `protobuf:"varint,6,opt,name=height_spent,json=heightSpent,proto3" json:"height_spent,omitempty"`
	// The note position.
	Position uint64 `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	// The source of the note
	Source *v1alpha112.CommitmentSource `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *SpendableNoteRecord) Reset()         { *m = SpendableNoteRecord{} }
func (m *SpendableNoteRecord) String() string { return proto.CompactTextString(m) }
func (*SpendableNoteRecord) ProtoMessage()    {}
func (*SpendableNoteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{49}
}
func (m *SpendableNoteRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendableNoteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendableNoteRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendableNoteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendableNoteRecord.Merge(m, src)
}
func (m *SpendableNoteRecord) XXX_Size() int {
	return m.Size()
}
func (m *SpendableNoteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendableNoteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SpendableNoteRecord proto.InternalMessageInfo

func (m *SpendableNoteRecord) GetNoteCommitment() *v1alpha16.StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

func (m *SpendableNoteRecord) GetNote() *v1alpha113.Note {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *SpendableNoteRecord) GetAddressIndex() *v1alpha13.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *SpendableNoteRecord) GetNullifier() *v1alpha112.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *SpendableNoteRecord) GetHeightCreated() uint64 {
	if m != nil {
		return m.HeightCreated
	}
	return 0
}

func (m *SpendableNoteRecord) GetHeightSpent() uint64 {
	if m != nil {
		return m.HeightSpent
	}
	return 0
}

func (m *SpendableNoteRecord) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SpendableNoteRecord) GetSource() *v1alpha112.CommitmentSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type SwapRecord struct {
	SwapCommitment *v1alpha16.StateCommitment     `protobuf:"bytes,1,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
	Swap           *v1alpha19.SwapPlaintext       `protobuf:"bytes,2,opt,name=swap,proto3" json:"swap,omitempty"`
	Position       uint64                         `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Nullifier      *v1alpha112.Nullifier          `protobuf:"bytes,4,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	OutputData     *v1alpha19.BatchSwapOutputData `protobuf:"bytes,5,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	HeightClaimed  uint64                         `protobuf:"varint,6,opt,name=height_claimed,json=heightClaimed,proto3" json:"height_claimed,omitempty"`
	Source         *v1alpha112.CommitmentSource   `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *SwapRecord) Reset()         { *m = SwapRecord{} }
func (m *SwapRecord) String() string { return proto.CompactTextString(m) }
func (*SwapRecord) ProtoMessage()    {}
func (*SwapRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{50}
}
func (m *SwapRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapRecord.Merge(m, src)
}
func (m *SwapRecord) XXX_Size() int {
	return m.Size()
}
func (m *SwapRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SwapRecord proto.InternalMessageInfo

func (m *SwapRecord) GetSwapCommitment() *v1alpha16.StateCommitment {
	if m != nil {
		return m.SwapCommitment
	}
	return nil
}

func (m *SwapRecord) GetSwap() *v1alpha19.SwapPlaintext {
	if m != nil {
		return m.Swap
	}
	return nil
}

func (m *SwapRecord) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SwapRecord) GetNullifier() *v1alpha112.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *SwapRecord) GetOutputData() *v1alpha19.BatchSwapOutputData {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *SwapRecord) GetHeightClaimed() uint64 {
	if m != nil {
		return m.HeightClaimed
	}
	return 0
}

func (m *SwapRecord) GetSource() *v1alpha112.CommitmentSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type OwnedPositionIdsRequest struct {
	// If present, return only positions with this position state.
	PositionState *v1alpha19.PositionState `protobuf:"bytes,1,opt,name=position_state,json=positionState,proto3" json:"position_state,omitempty"`
	// If present, return only positions for this trading pair.
	TradingPair *v1alpha19.TradingPair `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *OwnedPositionIdsRequest) Reset()         { *m = OwnedPositionIdsRequest{} }
func (m *OwnedPositionIdsRequest) String() string { return proto.CompactTextString(m) }
func (*OwnedPositionIdsRequest) ProtoMessage()    {}
func (*OwnedPositionIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{51}
}
func (m *OwnedPositionIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnedPositionIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnedPositionIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnedPositionIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnedPositionIdsRequest.Merge(m, src)
}
func (m *OwnedPositionIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OwnedPositionIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnedPositionIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OwnedPositionIdsRequest proto.InternalMessageInfo

func (m *OwnedPositionIdsRequest) GetPositionState() *v1alpha19.PositionState {
	if m != nil {
		return m.PositionState
	}
	return nil
}

func (m *OwnedPositionIdsRequest) GetTradingPair() *v1alpha19.TradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type OwnedPositionIdsResponse struct {
	PositionId *v1alpha19.PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *OwnedPositionIdsResponse) Reset()         { *m = OwnedPositionIdsResponse{} }
func (m *OwnedPositionIdsResponse) String() string { return proto.CompactTextString(m) }
func (*OwnedPositionIdsResponse) ProtoMessage()    {}
func (*OwnedPositionIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{52}
}
func (m *OwnedPositionIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnedPositionIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnedPositionIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnedPositionIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnedPositionIdsResponse.Merge(m, src)
}
func (m *OwnedPositionIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OwnedPositionIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnedPositionIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OwnedPositionIdsResponse proto.InternalMessageInfo

func (m *OwnedPositionIdsResponse) GetPositionId() *v1alpha19.PositionId {
	if m != nil {
		return m.PositionId
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthorizeAndBuildRequest)(nil), "penumbra.view.v1alpha1.AuthorizeAndBuildRequest")
	proto.RegisterType((*AuthorizeAndBuildResponse)(nil), "penumbra.view.v1alpha1.AuthorizeAndBuildResponse")
	proto.RegisterType((*BroadcastTransactionRequest)(nil), "penumbra.view.v1alpha1.BroadcastTransactionRequest")
	proto.RegisterType((*BroadcastTransactionResponse)(nil), "penumbra.view.v1alpha1.BroadcastTransactionResponse")
	proto.RegisterType((*TransactionPlannerRequest)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest")
	proto.RegisterType((*TransactionPlannerRequest_Output)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.Output")
	proto.RegisterType((*TransactionPlannerRequest_Swap)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.Swap")
	proto.RegisterType((*TransactionPlannerRequest_SwapClaim)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.SwapClaim")
	proto.RegisterType((*TransactionPlannerRequest_Delegate)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.Delegate")
	proto.RegisterType((*TransactionPlannerRequest_Undelegate)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.Undelegate")
	proto.RegisterType((*TransactionPlannerRequest_PositionOpen)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.PositionOpen")
	proto.RegisterType((*TransactionPlannerRequest_PositionClose)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.PositionClose")
	proto.RegisterType((*TransactionPlannerRequest_PositionWithdraw)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.PositionWithdraw")
	proto.RegisterType((*TransactionPlannerResponse)(nil), "penumbra.view.v1alpha1.TransactionPlannerResponse")
	proto.RegisterType((*AddressByIndexRequest)(nil), "penumbra.view.v1alpha1.AddressByIndexRequest")
	proto.RegisterType((*AddressByIndexResponse)(nil), "penumbra.view.v1alpha1.AddressByIndexResponse")
	proto.RegisterType((*WalletIdRequest)(nil), "penumbra.view.v1alpha1.WalletIdRequest")
	proto.RegisterType((*WalletIdResponse)(nil), "penumbra.view.v1alpha1.WalletIdResponse")
	proto.RegisterType((*IndexByAddressRequest)(nil), "penumbra.view.v1alpha1.IndexByAddressRequest")
	proto.RegisterType((*IndexByAddressResponse)(nil), "penumbra.view.v1alpha1.IndexByAddressResponse")
	proto.RegisterType((*EphemeralAddressRequest)(nil), "penumbra.view.v1alpha1.EphemeralAddressRequest")
	proto.RegisterType((*EphemeralAddressResponse)(nil), "penumbra.view.v1alpha1.EphemeralAddressResponse")
	proto.RegisterType((*BalancesRequest)(nil), "penumbra.view.v1alpha1.BalancesRequest")
	proto.RegisterType((*BalancesResponse)(nil), "penumbra.view.v1alpha1.BalancesResponse")
	proto.RegisterType((*StatusRequest)(nil), "penumbra.view.v1alpha1.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "penumbra.view.v1alpha1.StatusResponse")
	proto.RegisterType((*StatusStreamRequest)(nil), "penumbra.view.v1alpha1.StatusStreamRequest")
	proto.RegisterType((*StatusStreamResponse)(nil), "penumbra.view.v1alpha1.StatusStreamResponse")
	proto.RegisterType((*NotesRequest)(nil), "penumbra.view.v1alpha1.NotesRequest")
	proto.RegisterType((*NotesForVotingRequest)(nil), "penumbra.view.v1alpha1.NotesForVotingRequest")
	proto.RegisterType((*WitnessRequest)(nil), "penumbra.view.v1alpha1.WitnessRequest")
	proto.RegisterType((*WitnessResponse)(nil), "penumbra.view.v1alpha1.WitnessResponse")
	proto.RegisterType((*WitnessAndBuildRequest)(nil), "penumbra.view.v1alpha1.WitnessAndBuildRequest")
	proto.RegisterType((*WitnessAndBuildResponse)(nil), "penumbra.view.v1alpha1.WitnessAndBuildResponse")
	proto.RegisterType((*AssetsRequest)(nil), "penumbra.view.v1alpha1.AssetsRequest")
	proto.RegisterType((*AssetsResponse)(nil), "penumbra.view.v1alpha1.AssetsResponse")
	proto.RegisterType((*AppParametersRequest)(nil), "penumbra.view.v1alpha1.AppParametersRequest")
	proto.RegisterType((*AppParametersResponse)(nil), "penumbra.view.v1alpha1.AppParametersResponse")
	proto.RegisterType((*GasPricesRequest)(nil), "penumbra.view.v1alpha1.GasPricesRequest")
	proto.RegisterType((*GasPricesResponse)(nil), "penumbra.view.v1alpha1.GasPricesResponse")
	proto.RegisterType((*FMDParametersRequest)(nil), "penumbra.view.v1alpha1.FMDParametersRequest")
	proto.RegisterType((*FMDParametersResponse)(nil), "penumbra.view.v1alpha1.FMDParametersResponse")
	proto.RegisterType((*NoteByCommitmentRequest)(nil), "penumbra.view.v1alpha1.NoteByCommitmentRequest")
	proto.RegisterType((*NoteByCommitmentResponse)(nil), "penumbra.view.v1alpha1.NoteByCommitmentResponse")
	proto.RegisterType((*SwapByCommitmentRequest)(nil), "penumbra.view.v1alpha1.SwapByCommitmentRequest")
	proto.RegisterType((*SwapByCommitmentResponse)(nil), "penumbra.view.v1alpha1.SwapByCommitmentResponse")
	proto.RegisterType((*UnclaimedSwapsRequest)(nil), "penumbra.view.v1alpha1.UnclaimedSwapsRequest")
	proto.RegisterType((*UnclaimedSwapsResponse)(nil), "penumbra.view.v1alpha1.UnclaimedSwapsResponse")
	proto.RegisterType((*NullifierStatusRequest)(nil), "penumbra.view.v1alpha1.NullifierStatusRequest")
	proto.RegisterType((*NullifierStatusResponse)(nil), "penumbra.view.v1alpha1.NullifierStatusResponse")
	proto.RegisterType((*TransactionInfoByHashRequest)(nil), "penumbra.view.v1alpha1.TransactionInfoByHashRequest")
	proto.RegisterType((*TransactionInfoRequest)(nil), "penumbra.view.v1alpha1.TransactionInfoRequest")
	proto.RegisterType((*TransactionInfo)(nil), "penumbra.view.v1alpha1.TransactionInfo")
	proto.RegisterType((*TransactionInfoResponse)(nil), "penumbra.view.v1alpha1.TransactionInfoResponse")
	proto.RegisterType((*TransactionInfoByHashResponse)(nil), "penumbra.view.v1alpha1.TransactionInfoByHashResponse")
	proto.RegisterType((*NotesResponse)(nil), "penumbra.view.v1alpha1.NotesResponse")
	proto.RegisterType((*NotesForVotingResponse)(nil), "penumbra.view.v1alpha1.NotesForVotingResponse")
	proto.RegisterType((*SpendableNoteRecord)(nil), "penumbra.view.v1alpha1.SpendableNoteRecord")
	proto.RegisterType((*SwapRecord)(nil), "penumbra.view.v1alpha1.SwapRecord")
	proto.RegisterType((*OwnedPositionIdsRequest)(nil), "penumbra.view.v1alpha1.OwnedPositionIdsRequest")
	proto.RegisterType((*OwnedPositionIdsResponse)(nil), "penumbra.view.v1alpha1.OwnedPositionIdsResponse")
}

func init() { proto.RegisterFile("penumbra/view/v1alpha1/view.proto", fileDescriptor_0aa947b204e6a7c2) }

var fileDescriptor_0aa947b204e6a7c2 = []byte{
	// 3262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x3b, 0x5b, 0x53, 0x1c, 0xc7,
	0xd5, 0x9e, 0x05, 0x71, 0x39, 0xb0, 0x2c, 0x8c, 0x04, 0xac, 0xf6, 0xb3, 0xb1, 0x3d, 0xb6, 0x6c,
	0x7c, 0x5b, 0x10, 0x96, 0x5d, 0x36, 0xbe, 0x7c, 0x66, 0x25, 0x4b, 0xc2, 0xb6, 0x24, 0xbe, 0x41,
	0x42, 0xfe, 0xf8, 0xe4, 0x6f, 0xd2, 0xcc, 0x34, 0xec, 0x94, 0x66, 0x67, 0x46, 0x33, 0xbd, 0x2c,
	0x24, 0x4f, 0xa9, 0xa4, 0xca, 0x55, 0x49, 0x1e, 0x9c, 0xb8, 0xe2, 0xaa, 0xe4, 0x31, 0x8f, 0xf1,
	0x5b, 0xf2, 0x27, 0x12, 0xe7, 0xc5, 0x8f, 0x79, 0x4a, 0x39, 0xf2, 0x5b, 0x52, 0x95, 0xdf, 0x90,
	0xea, 0xdb, 0xdc, 0x76, 0x5b, 0xec, 0x02, 0x7a, 0xc9, 0x13, 0xd3, 0xa7, 0xcf, 0xbd, 0xbb, 0x4f,
	0x9f, 0x3e, 0x67, 0x81, 0x67, 0x43, 0xec, 0xb7, 0x5b, 0x3b, 0x11, 0x5a, 0xda, 0x77, 0x71, 0x67,
	0x69, 0xff, 0x22, 0xf2, 0xc2, 0x26, 0xba, 0xc8, 0x46, 0xf5, 0x30, 0x0a, 0x48, 0xa0, 0xcf, 0x49,
	0x94, 0x3a, 0x03, 0x4a, 0x94, 0xda, 0xf3, 0x09, 0xa9, 0x1d, 0x44, 0x78, 0x09, 0x85, 0x61, 0x4a,
	0x8e, 0xc2, 0x90, 0x53, 0xd7, 0x16, 0x0b, 0x58, 0x71, 0x8c, 0x49, 0x06, 0x8f, 0x0e, 0x05, 0xe6,
	0x4a, 0x1e, 0xd3, 0x0e, 0x5a, 0x61, 0xe0, 0x63, 0x9f, 0x2c, 0xd9, 0x4d, 0xe4, 0xfa, 0x29, 0x0d,
	0x1b, 0x0a, 0x9a, 0xba, 0x8a, 0xc6, 0xc1, 0x07, 0x29, 0x85, 0x83, 0x0f, 0x8e, 0xc2, 0xdf, 0xc5,
	0x38, 0xc5, 0xdf, 0xc5, 0xf8, 0x28, 0x7c, 0x77, 0xc7, 0x4e, 0xf1, 0xdd, 0x1d, 0xfb, 0x28, 0xfc,
	0xd8, 0xce, 0x58, 0x1d, 0xdb, 0xd2, 0xe6, 0x86, 0x12, 0xbf, 0xe9, 0x62, 0xcf, 0xc1, 0x8e, 0x15,
	0x06, 0x81, 0x97, 0xa1, 0xcc, 0x82, 0x8f, 0xf2, 0x5b, 0x4c, 0xd0, 0xfd, 0x8c, 0x55, 0x6c, 0x28,
	0x68, 0x5e, 0xc8, 0xd3, 0xdc, 0xc7, 0x87, 0x71, 0x8a, 0x48, 0x47, 0x02, 0xaf, 0xb0, 0xc6, 0x7e,
	0xbb, 0x95, 0xa2, 0xf9, 0xed, 0x96, 0xc0, 0xba, 0x94, 0xc7, 0x22, 0x11, 0xf2, 0x63, 0x64, 0x13,
	0x37, 0xc8, 0xac, 0x5a, 0x06, 0x28, 0xa8, 0x5e, 0x2e, 0x50, 0x1d, 0x34, 0x51, 0xdc, 0xcc, 0x10,
	0xb0, 0x71, 0xb7, 0xbe, 0xd1, 0x61, 0x48, 0x82, 0x25, 0x92, 0xf5, 0x27, 0x91, 0xfe, 0x34, 0xbe,
	0xd3, 0xa0, 0xba, 0xd6, 0x26, 0xcd, 0x20, 0x72, 0x7f, 0x88, 0xd7, 0x7c, 0xa7, 0xd1, 0x76, 0x3d,
	0xc7, 0xc4, 0x0f, 0xda, 0x38, 0x26, 0xfa, 0xff, 0xc3, 0x74, 0x46, 0x0b, 0x2b, 0xf4, 0x90, 0x5f,
	0xd5, 0x9e, 0xd1, 0x16, 0x27, 0x56, 0x5e, 0x4f, 0xd6, 0xad, 0x4e, 0x75, 0xa9, 0x67, 0x95, 0x95,
	0x52, 0xea, 0xb7, 0x53, 0xe0, 0x86, 0x87, 0x7c, 0xb3, 0x42, 0xf2, 0x00, 0xdd, 0x01, 0x1d, 0x09,
	0xd9, 0x88, 0x49, 0x70, 0x10, 0x41, 0xd5, 0x12, 0x93, 0xf0, 0x46, 0x3f, 0x12, 0xd6, 0xb2, 0xd4,
	0x57, 0x10, 0x41, 0xe6, 0x0c, 0x2a, 0x82, 0x0c, 0x1f, 0xce, 0xf7, 0xb0, 0x30, 0x0e, 0x03, 0x3f,
	0xc6, 0xfa, 0xff, 0xc0, 0x44, 0x86, 0xb3, 0xb0, 0x6e, 0x69, 0x40, 0xeb, 0xcc, 0x2c, 0x0f, 0xe3,
	0x37, 0x1a, 0xfc, 0x57, 0x23, 0x0a, 0x90, 0x63, 0xa3, 0x98, 0x64, 0xb1, 0x84, 0x57, 0x4f, 0x5f,
	0xa4, 0xfe, 0x22, 0x54, 0x50, 0x07, 0xb9, 0xc4, 0x72, 0x30, 0xc1, 0x9c, 0x2d, 0xf5, 0xe2, 0x98,
	0x39, 0xc5, 0xc0, 0x57, 0x24, 0xd4, 0xf8, 0x5c, 0x83, 0x27, 0x7b, 0xeb, 0x26, 0xfc, 0xf1, 0x2e,
	0x94, 0x5c, 0x47, 0xe8, 0xf4, 0x6a, 0x51, 0x27, 0xbe, 0xc1, 0x7a, 0xa9, 0xb3, 0xee, 0x98, 0x25,
	0xd7, 0xd1, 0x5f, 0x82, 0xe9, 0x44, 0x03, 0xab, 0x89, 0xdd, 0xbd, 0x26, 0x61, 0x8a, 0x0c, 0x9b,
	0x95, 0x04, 0x7e, 0x9d, 0x81, 0x8d, 0x3f, 0x9f, 0x85, 0xf3, 0x85, 0x0d, 0xe2, 0xe3, 0x48, 0xfa,
	0xe8, 0x39, 0x28, 0xe3, 0x83, 0xd0, 0x8d, 0x0e, 0x25, 0x17, 0x8d, 0x71, 0x99, 0xe4, 0x40, 0xce,
	0x42, 0x7f, 0x07, 0x86, 0x76, 0x31, 0x16, 0xfb, 0xe5, 0xa5, 0x82, 0xb2, 0xc9, 0xa9, 0xae, 0xd3,
	0xe0, 0x94, 0xe8, 0x7c, 0x15, 0x63, 0x93, 0x52, 0xe9, 0x1f, 0xc2, 0x70, 0x0b, 0xb7, 0x82, 0xea,
	0x10, 0xa3, 0xbe, 0xd8, 0x8f, 0xfb, 0x6f, 0xe0, 0x56, 0xb0, 0xe1, 0x21, 0xd7, 0x27, 0xf8, 0x80,
	0x98, 0x8c, 0x5c, 0x5f, 0x83, 0x91, 0x38, 0x68, 0x47, 0x36, 0xae, 0x0e, 0xf7, 0x54, 0x83, 0x85,
	0x86, 0x74, 0xbf, 0x3a, 0x4e, 0x84, 0xe3, 0x78, 0xdd, 0x77, 0xf0, 0x81, 0x29, 0x08, 0x75, 0x13,
	0x46, 0x83, 0x36, 0x09, 0xdb, 0x24, 0xae, 0x9e, 0x7b, 0x66, 0x68, 0x71, 0x62, 0xe5, 0xad, 0x7a,
	0xef, 0x0b, 0xa4, 0xae, 0xf4, 0x57, 0xfd, 0x16, 0x63, 0x60, 0x4a, 0x46, 0xfa, 0x27, 0x70, 0x26,
	0xee, 0xa0, 0x30, 0xae, 0x2e, 0x30, 0x8e, 0x6f, 0x0e, 0xce, 0x71, 0xb3, 0x83, 0x42, 0x93, 0x33,
	0xd1, 0xef, 0xc1, 0x04, 0xfd, 0xb0, 0x6c, 0x0f, 0xb9, 0xad, 0xb8, 0xfa, 0x34, 0xe3, 0xf9, 0xce,
	0xf1, 0x78, 0x5e, 0xa6, 0x3c, 0x4c, 0x88, 0xe5, 0x27, 0xe3, 0xee, 0x60, 0x0f, 0xef, 0xb1, 0x13,
	0x1b, 0x57, 0x17, 0x19, 0xf7, 0xd5, 0xc1, 0xb9, 0x5f, 0xe1, 0x4c, 0xb0, 0x99, 0x65, 0xa7, 0xef,
	0x40, 0xb9, 0xed, 0x67, 0xf9, 0xaf, 0x30, 0xfe, 0xef, 0x0e, 0xce, 0xff, 0x8e, 0x64, 0x83, 0xcd,
	0x3c, 0x4b, 0x7d, 0x1b, 0x66, 0xdc, 0x1d, 0xdb, 0x8a, 0xb0, 0x87, 0x0e, 0x2d, 0x4e, 0x1b, 0x57,
	0xdf, 0x65, 0x72, 0xea, 0xca, 0x6d, 0x49, 0xef, 0xc0, 0x44, 0xea, 0xfa, 0x8e, 0x6d, 0x52, 0x6a,
	0xb3, 0xe2, 0x8a, 0xaf, 0x35, 0x5b, 0xea, 0x3f, 0xe3, 0xda, 0xf1, 0xca, 0xb2, 0xd5, 0x71, 0x49,
	0xd3, 0x89, 0x50, 0x07, 0x79, 0x71, 0xf5, 0x3d, 0xc6, 0xfb, 0x8d, 0x3e, 0x79, 0x53, 0xf2, 0xbb,
	0x09, 0xb5, 0x39, 0xed, 0xe6, 0x01, 0xb1, 0x8e, 0x61, 0x2a, 0x0c, 0x62, 0x97, 0x9d, 0xda, 0x20,
	0xc4, 0x7e, 0x5c, 0xbd, 0xca, 0x04, 0xbc, 0x3f, 0xb8, 0x93, 0x36, 0x04, 0x9f, 0x5b, 0x21, 0xf6,
	0xcd, 0x72, 0x98, 0x19, 0xc5, 0x7a, 0x13, 0x2a, 0x89, 0x18, 0xdb, 0x0b, 0x62, 0x1c, 0x57, 0xaf,
	0x31, 0x39, 0xff, 0x7d, 0x7c, 0x39, 0x97, 0x29, 0x1f, 0x33, 0x51, 0x9f, 0x0d, 0x63, 0xfd, 0x01,
	0xe8, 0x89, 0x24, 0xe9, 0xb7, 0xb8, 0x7a, 0x9d, 0x09, 0x6b, 0x1c, 0x5f, 0x98, 0xf4, 0x99, 0x39,
	0x13, 0x16, 0x20, 0x71, 0xed, 0x27, 0x1a, 0x8c, 0xf0, 0x53, 0xa8, 0xbf, 0x0d, 0x67, 0xf6, 0x91,
	0xd7, 0xc6, 0x22, 0x8c, 0x3e, 0x57, 0x58, 0x26, 0x9e, 0xc2, 0x25, 0x62, 0xb7, 0x28, 0xaa, 0xc9,
	0x29, 0xf4, 0xf7, 0x61, 0x14, 0xf1, 0x18, 0x21, 0xc2, 0xda, 0xf3, 0xfd, 0xc4, 0x13, 0x53, 0x12,
	0xd5, 0xbe, 0x2c, 0xc1, 0x30, 0x3d, 0x65, 0x27, 0xd1, 0xe1, 0x3a, 0x4c, 0x12, 0x14, 0xed, 0x61,
	0x62, 0x31, 0x2c, 0xa1, 0xc8, 0x85, 0x47, 0x73, 0x58, 0xa3, 0xc3, 0x75, 0xc7, 0x9c, 0xe0, 0xa4,
	0x6c, 0x28, 0x03, 0xf4, 0xd0, 0xb1, 0x02, 0xf4, 0x3a, 0x94, 0x59, 0xbc, 0xb1, 0xa4, 0x43, 0x86,
	0x07, 0x70, 0xc8, 0x24, 0x23, 0x15, 0xa3, 0x9a, 0x0d, 0xe3, 0x49, 0xe8, 0xd1, 0xb7, 0xa0, 0xc2,
	0x83, 0x59, 0xd0, 0x6a, 0xb9, 0xa4, 0x85, 0x7d, 0x22, 0x7c, 0xf4, 0x5a, 0x86, 0x33, 0xcb, 0x99,
	0xea, 0x34, 0x4d, 0x4a, 0x58, 0x6f, 0x12, 0x44, 0xf0, 0xe5, 0x84, 0xc8, 0x9c, 0x62, 0x21, 0x2c,
	0x19, 0xd7, 0x7e, 0xad, 0xc1, 0x98, 0x0c, 0x41, 0xfa, 0x2a, 0x8c, 0xa0, 0x56, 0xd0, 0x4e, 0x78,
	0x1b, 0x05, 0xad, 0x69, 0x2a, 0x98, 0x2a, 0xcd, 0x30, 0x4d, 0x41, 0xa1, 0xdf, 0x80, 0xf1, 0x08,
	0x11, 0xcc, 0x93, 0x21, 0xee, 0xbb, 0x65, 0xa5, 0xef, 0x78, 0x8e, 0x9a, 0xb0, 0x32, 0x11, 0xc1,
	0x2c, 0x0f, 0x1a, 0x8b, 0xc4, 0x57, 0xed, 0x2b, 0x0d, 0x20, 0x0d, 0x5d, 0x27, 0xd9, 0x18, 0x39,
	0xc5, 0x4a, 0x27, 0x56, 0x6c, 0x1b, 0x26, 0xb3, 0xd1, 0x42, 0xff, 0x08, 0xc6, 0xe4, 0xb1, 0x12,
	0xca, 0xa9, 0x83, 0x27, 0x7d, 0xa0, 0x24, 0xbc, 0x25, 0x17, 0x33, 0xa1, 0xaf, 0xed, 0x40, 0x39,
	0x17, 0x21, 0x68, 0xd2, 0x95, 0x44, 0x84, 0x24, 0xc1, 0x59, 0x1e, 0x8c, 0xff, 0xba, 0x63, 0x42,
	0x98, 0x7c, 0xd7, 0x3e, 0x2f, 0xc1, 0x74, 0x31, 0x32, 0x3c, 0x06, 0x39, 0xd4, 0x2f, 0x11, 0x8e,
	0x71, 0xb4, 0x8f, 0x65, 0x50, 0xe8, 0xd3, 0x2f, 0xa6, 0xa0, 0x32, 0x13, 0x7a, 0xfd, 0x36, 0x4c,
	0x92, 0x08, 0x39, 0xae, 0xbf, 0x67, 0x85, 0xc8, 0x8d, 0x14, 0xd9, 0x8f, 0x82, 0xdf, 0x6d, 0x4e,
	0xb9, 0x81, 0xdc, 0x88, 0xa5, 0x9f, 0x72, 0x60, 0x60, 0xa8, 0xf5, 0x0a, 0x9e, 0x22, 0xa5, 0xbc,
	0x06, 0xc3, 0x27, 0x7d, 0x39, 0x30, 0x06, 0xc6, 0x1e, 0xcc, 0x8a, 0x13, 0xdd, 0x38, 0xe4, 0x29,
	0x94, 0xc8, 0x16, 0x6f, 0x42, 0x59, 0x04, 0x09, 0xcb, 0xa5, 0x70, 0x21, 0x6a, 0x80, 0x5c, 0x6c,
	0x12, 0x65, 0x46, 0xc6, 0xa7, 0x30, 0x57, 0x14, 0x24, 0x6c, 0xc9, 0xc4, 0x67, 0xed, 0x18, 0xf1,
	0xd9, 0x98, 0x81, 0xca, 0x5d, 0xe4, 0x79, 0x2c, 0x54, 0x72, 0xe5, 0x8d, 0x2d, 0x98, 0x4e, 0x41,
	0x42, 0x4c, 0x03, 0xc6, 0x3b, 0x0c, 0x96, 0xee, 0xa1, 0x0b, 0x8f, 0x14, 0x94, 0x70, 0x18, 0xeb,
	0x88, 0x2f, 0xe3, 0x2e, 0xcc, 0x32, 0xdd, 0x1b, 0x87, 0x52, 0x0b, 0xe1, 0xad, 0x93, 0xda, 0xd0,
	0x84, 0xb9, 0x22, 0x63, 0xa1, 0xf6, 0x69, 0xaf, 0xc3, 0xaf, 0x34, 0x98, 0xff, 0x30, 0x6c, 0xe2,
	0x16, 0x8e, 0x90, 0x57, 0xb0, 0xe2, 0x94, 0x65, 0xd1, 0x27, 0x94, 0xe3, 0xc6, 0x21, 0xcd, 0xe0,
	0xec, 0xc0, 0xdf, 0x75, 0xa3, 0x96, 0x7c, 0x42, 0x09, 0xf0, 0x65, 0x0e, 0x35, 0xb6, 0xa1, 0xda,
	0xad, 0xd3, 0x29, 0x6d, 0x8f, 0x3f, 0x68, 0x50, 0x69, 0x20, 0x0f, 0xf9, 0x36, 0x4e, 0x0c, 0xdd,
	0x80, 0x29, 0x64, 0xdb, 0xf4, 0x66, 0xb0, 0x76, 0x5d, 0x8f, 0xe0, 0x68, 0x70, 0x4b, 0xcb, 0x82,
	0xc1, 0x55, 0x46, 0xaf, 0xdf, 0x80, 0x0a, 0x0b, 0xf3, 0x96, 0xeb, 0x48, 0x96, 0x03, 0xdd, 0xf1,
	0x65, 0xc4, 0x3f, 0x38, 0x3b, 0xe3, 0x2b, 0x0d, 0xa6, 0x53, 0xa5, 0x85, 0x27, 0x2e, 0xc3, 0xa8,
	0x10, 0x3a, 0xb8, 0xba, 0x92, 0x52, 0x7f, 0x0f, 0x46, 0x77, 0x38, 0x63, 0xa1, 0x60, 0x5f, 0xb7,
	0x95, 0xa4, 0x31, 0x2a, 0x50, 0xa6, 0x97, 0x76, 0x5b, 0xba, 0xd2, 0xf8, 0xb9, 0x06, 0x53, 0x12,
	0x22, 0xf4, 0x5c, 0x84, 0xe9, 0xdd, 0xb6, 0xe7, 0x59, 0xf1, 0xa1, 0x6f, 0xe7, 0xdf, 0x9a, 0x53,
	0x14, 0xbe, 0x79, 0xe8, 0xdb, 0xe2, 0xb5, 0x59, 0x87, 0xb3, 0x21, 0x8a, 0x88, 0x8b, 0xf2, 0xc8,
	0xfc, 0x79, 0x3b, 0x23, 0xa6, 0x32, 0xf8, 0x4f, 0xc3, 0x84, 0x8d, 0x88, 0xdd, 0xa4, 0xb1, 0xb6,
	0x1d, 0xb2, 0x48, 0x3b, 0x66, 0x82, 0x04, 0xdd, 0x09, 0x8d, 0x59, 0x38, 0xcb, 0x95, 0xd9, 0x24,
	0x11, 0x46, 0x2d, 0xa9, 0xe4, 0xd7, 0x1a, 0x9c, 0xcb, 0xc3, 0x85, 0xaa, 0x6f, 0xc3, 0x79, 0x0f,
	0x11, 0x1c, 0x13, 0xeb, 0xbe, 0x1f, 0x74, 0x7c, 0x6b, 0xc7, 0x0b, 0xec, 0xfb, 0x79, 0x9d, 0xe7,
	0x38, 0xc2, 0xc7, 0x74, 0xbe, 0x41, 0xa7, 0x85, 0x2e, 0xbd, 0xac, 0x2c, 0x0d, 0x62, 0xe5, 0x90,
	0xc2, 0x4a, 0xe3, 0x97, 0x25, 0x98, 0xbc, 0x19, 0x90, 0x74, 0xbb, 0x3e, 0x07, 0x65, 0xd7, 0xb7,
	0xbd, 0xb6, 0x83, 0xad, 0x38, 0xa4, 0xc9, 0x15, 0x3f, 0x45, 0x93, 0x02, 0xb8, 0x49, 0x61, 0xfa,
	0x07, 0x30, 0x26, 0x77, 0xa0, 0xb8, 0x82, 0xfa, 0xdc, 0x7a, 0xa3, 0x62, 0xeb, 0x75, 0x1f, 0xff,
	0xe1, 0x93, 0x1d, 0xff, 0x8f, 0xa0, 0xc2, 0xd3, 0x2f, 0x8b, 0x04, 0x4c, 0x71, 0xa7, 0x3a, 0xd2,
	0x77, 0xe6, 0x56, 0xe6, 0xa4, 0xb7, 0x03, 0x6a, 0x9d, 0x63, 0x7c, 0xa9, 0xc1, 0x2c, 0xf3, 0xc9,
	0xd5, 0x20, 0xda, 0x0a, 0x88, 0xeb, 0xef, 0x49, 0xe7, 0xbc, 0x0c, 0x33, 0xfb, 0x01, 0x41, 0x3b,
	0x1e, 0xb6, 0x10, 0xc9, 0x2f, 0x5d, 0x45, 0x4c, 0xac, 0x11, 0xb1, 0x12, 0x5d, 0x16, 0x0e, 0x9d,
	0x2c, 0x98, 0x7e, 0xa3, 0xc1, 0xd4, 0x5d, 0x97, 0xf8, 0x99, 0x18, 0xfa, 0x29, 0x4c, 0xfb, 0x01,
	0xc1, 0x99, 0x54, 0x98, 0x66, 0x18, 0x43, 0x83, 0xe7, 0xc2, 0x15, 0xca, 0x26, 0x1d, 0xc7, 0x3d,
	0x2b, 0x87, 0x43, 0xa7, 0x57, 0x39, 0x34, 0x30, 0x54, 0x12, 0x5b, 0xc4, 0xf1, 0x30, 0x61, 0xb2,
	0xc3, 0x41, 0x3c, 0x41, 0x1d, 0xa0, 0xae, 0x26, 0x58, 0xb1, 0xfc, 0x74, 0xa2, 0x93, 0x0e, 0x8c,
	0xbf, 0x69, 0x30, 0x27, 0x26, 0xff, 0x33, 0x6b, 0xa3, 0x1e, 0xcc, 0x77, 0xd9, 0xf7, 0xf8, 0x2a,
	0xa3, 0x5f, 0x0f, 0x41, 0x99, 0x9d, 0xe4, 0x64, 0x07, 0xd6, 0x60, 0x8c, 0xdf, 0x40, 0x98, 0xe7,
	0x39, 0x63, 0x66, 0x32, 0xd6, 0x5d, 0x58, 0xc8, 0x44, 0x12, 0xdb, 0xdd, 0x75, 0x6d, 0xcb, 0xc1,
	0x7e, 0xd0, 0x72, 0x7d, 0x51, 0xca, 0xe1, 0x7b, 0xf5, 0x88, 0x4b, 0xe1, 0x0a, 0x25, 0x31, 0x9f,
	0x4c, 0xe3, 0x0f, 0xe3, 0x74, 0x25, 0xcb, 0x48, 0x5f, 0x85, 0xf3, 0x52, 0x54, 0x5a, 0xd7, 0xb1,
	0x48, 0x70, 0x1f, 0xfb, 0xb1, 0x88, 0xdc, 0xf3, 0x02, 0xe1, 0x4a, 0x32, 0x7f, 0x9b, 0x4d, 0xeb,
	0x6f, 0x41, 0x55, 0xd2, 0xb6, 0xfd, 0x9d, 0xc0, 0x67, 0xc9, 0xb5, 0x20, 0x1d, 0x66, 0xa4, 0x73,
	0x62, 0xfe, 0x8e, 0x9c, 0x16, 0x94, 0x2f, 0x40, 0x45, 0x52, 0x7a, 0xa1, 0xe5, 0xef, 0x92, 0xb8,
	0x7a, 0x86, 0x11, 0xc8, 0x08, 0xfa, 0x49, 0x78, 0x73, 0x97, 0xc4, 0xfa, 0x0a, 0xcc, 0x4a, 0xbc,
	0x30, 0x0a, 0xc2, 0x20, 0x46, 0x1e, 0xc7, 0x1e, 0x61, 0xd8, 0x67, 0xc5, 0xe4, 0x86, 0x98, 0x63,
	0x34, 0x6b, 0xf0, 0x94, 0xa4, 0xd9, 0x67, 0x21, 0xc8, 0x8a, 0xb0, 0x8d, 0xdd, 0x90, 0x48, 0xd5,
	0x46, 0x19, 0x6d, 0x4d, 0x20, 0xc9, 0x30, 0xc5, 0x50, 0xb8, 0x7a, 0x86, 0x03, 0x53, 0x72, 0xb1,
	0x92, 0x23, 0x36, 0xc5, 0x16, 0xc0, 0x6a, 0x61, 0x82, 0x32, 0xfb, 0xf1, 0x95, 0x3e, 0x56, 0xe0,
	0x86, 0x20, 0x31, 0xcb, 0x4e, 0x76, 0x68, 0xcc, 0xc1, 0xb9, 0xb5, 0x30, 0xdc, 0x40, 0x11, 0x6a,
	0x61, 0x82, 0xa3, 0xe4, 0xae, 0xde, 0x81, 0xd9, 0x02, 0x5c, 0x28, 0xb1, 0x0e, 0x10, 0x26, 0x50,
	0x45, 0x72, 0x81, 0xc2, 0x30, 0x73, 0x10, 0x72, 0x6c, 0x32, 0xc4, 0x86, 0x0e, 0xd3, 0xd7, 0x50,
	0xbc, 0x11, 0xb9, 0x69, 0xba, 0x65, 0xd8, 0x30, 0x93, 0x81, 0x25, 0x89, 0x2d, 0xec, 0xa1, 0xd8,
	0x0a, 0x19, 0x54, 0x71, 0x14, 0x14, 0xf5, 0x8c, 0x94, 0xd9, 0xf8, 0x9e, 0xfc, 0xa4, 0x46, 0x5f,
	0xbd, 0x71, 0xa5, 0xdb, 0x68, 0x1f, 0x66, 0x0b, 0x70, 0xa1, 0xc0, 0x9d, 0x1e, 0x46, 0xab, 0xcb,
	0x7f, 0xbc, 0xe1, 0x97, 0x96, 0x54, 0x5a, 0x8e, 0xc2, 0x01, 0xbf, 0xd5, 0x60, 0x9e, 0xde, 0x54,
	0x8d, 0xc3, 0x4c, 0x30, 0x17, 0x47, 0x73, 0x0b, 0x2a, 0x85, 0xcb, 0x41, 0xac, 0xf6, 0xa0, 0x75,
	0x92, 0xfc, 0xdd, 0xd0, 0xab, 0x57, 0x31, 0xd4, 0xb3, 0x57, 0xe1, 0x43, 0xb5, 0x5b, 0xb7, 0x74,
	0x27, 0xb2, 0x4b, 0x9a, 0x5d, 0xa5, 0x54, 0x80, 0xf0, 0xc9, 0x2b, 0xaa, 0xe2, 0xde, 0xa6, 0xc4,
	0xa6, 0x2c, 0x4d, 0x6c, 0x07, 0x91, 0x63, 0x96, 0xe3, 0x2c, 0x90, 0x39, 0x63, 0xb3, 0x83, 0x42,
	0x85, 0x33, 0x8a, 0x45, 0xa3, 0xd2, 0x29, 0x14, 0x8d, 0xfa, 0x77, 0x86, 0x09, 0xd5, 0x6e, 0xdd,
	0x84, 0x33, 0xde, 0x84, 0x61, 0xca, 0xb6, 0xbb, 0xd4, 0x54, 0x70, 0x41, 0x07, 0x85, 0xc2, 0x72,
	0x86, 0x6f, 0xcc, 0xc3, 0xec, 0x1d, 0x9f, 0x15, 0xca, 0xb0, 0x43, 0x27, 0x93, 0x6d, 0xb8, 0x01,
	0x73, 0xc5, 0x89, 0x13, 0x8a, 0xfa, 0x42, 0x83, 0xb9, 0x9b, 0x6d, 0xcf, 0x73, 0x77, 0x5d, 0x1c,
	0xe5, 0x92, 0x72, 0xfd, 0x06, 0x8c, 0xfb, 0x72, 0x46, 0x38, 0x55, 0x7d, 0xb4, 0xe2, 0xac, 0x73,
	0x13, 0x86, 0x66, 0xca, 0xa1, 0x7f, 0x8f, 0x2e, 0xc1, 0x7c, 0x97, 0x46, 0xc2, 0xca, 0x73, 0x70,
	0x86, 0xe7, 0xae, 0xfc, 0x4a, 0xe2, 0x03, 0xe3, 0x1e, 0x3c, 0x99, 0xed, 0x78, 0xf9, 0xbb, 0x41,
	0xe3, 0xf0, 0x3a, 0x8a, 0x9b, 0xd2, 0x10, 0xde, 0x3a, 0x2b, 0x1d, 0xaf, 0x75, 0x66, 0x6c, 0xc3,
	0x5c, 0x81, 0xbb, 0xe4, 0xfb, 0x2c, 0x4c, 0xc6, 0x04, 0x45, 0x85, 0x7c, 0x71, 0x82, 0xc1, 0x44,
	0xae, 0xf8, 0x14, 0x00, 0xf6, 0x9d, 0x7c, 0x66, 0x3f, 0x8e, 0x7d, 0x47, 0x24, 0xe9, 0x7f, 0x2f,
	0x41, 0xa5, 0xc0, 0x5c, 0x9f, 0x83, 0x91, 0x1c, 0x3f, 0x31, 0x3a, 0x99, 0x15, 0xc5, 0xa4, 0x61,
	0xe8, 0x14, 0x7a, 0x9b, 0xf7, 0x60, 0x22, 0xc4, 0x11, 0xcd, 0x00, 0x88, 0xbb, 0x2f, 0xdb, 0x6c,
	0xab, 0x83, 0xe6, 0x58, 0x29, 0x07, 0x33, 0xcb, 0x4e, 0xbf, 0x06, 0xc3, 0x74, 0xeb, 0xb2, 0x8b,
	0x77, 0xf0, 0xd4, 0x6d, 0xcb, 0xc5, 0x1d, 0x93, 0x31, 0x30, 0xfe, 0x0f, 0xe6, 0xbb, 0xd6, 0x4f,
	0x6c, 0xa7, 0x0f, 0x60, 0x94, 0x1c, 0x58, 0xae, 0xbf, 0x1b, 0x88, 0x73, 0xf3, 0x62, 0x1f, 0x2d,
	0x08, 0xc6, 0x61, 0x84, 0x1c, 0xd0, 0xbf, 0x06, 0x82, 0xa7, 0x14, 0x5b, 0xef, 0xd4, 0x44, 0x7c,
	0x06, 0x65, 0xf1, 0x8e, 0x13, 0x2c, 0x3f, 0x81, 0x09, 0x16, 0xff, 0x23, 0x76, 0x8e, 0x8f, 0x13,
	0x5f, 0xc1, 0x4f, 0xbe, 0x8d, 0x3f, 0xd2, 0x00, 0x50, 0x78, 0x13, 0x3d, 0x0e, 0x41, 0xfa, 0xc7,
	0x30, 0xe9, 0x3a, 0xd8, 0x27, 0x2e, 0x39, 0xb4, 0xee, 0xe3, 0x43, 0xb1, 0x93, 0x17, 0x1f, 0xf9,
	0x6a, 0x5a, 0x17, 0x04, 0x1f, 0xe3, 0x43, 0x73, 0xc2, 0x4d, 0x07, 0xc6, 0x2f, 0x86, 0xe1, 0x6c,
	0x0f, 0x81, 0xbd, 0xee, 0x46, 0xed, 0x34, 0xee, 0xc6, 0xeb, 0x30, 0xcc, 0x2e, 0x33, 0xae, 0xf4,
	0x25, 0x75, 0x18, 0xcc, 0xfd, 0xaa, 0x25, 0x0d, 0x88, 0x54, 0x43, 0xc6, 0xe1, 0xb4, 0x5f, 0x8f,
	0xf9, 0x28, 0x3d, 0x7c, 0xe2, 0x28, 0x7d, 0x01, 0xa6, 0x78, 0xbc, 0xb1, 0xec, 0x08, 0x23, 0x82,
	0x1d, 0x76, 0x00, 0x87, 0xcd, 0x32, 0x87, 0x5e, 0xe6, 0x40, 0x1a, 0xfa, 0x04, 0x1a, 0x8f, 0xc7,
	0x23, 0x3c, 0xf4, 0x71, 0x18, 0x2f, 0x25, 0xd4, 0x32, 0x5d, 0x83, 0x51, 0x36, 0x9d, 0x8c, 0xf5,
	0x9b, 0x49, 0x73, 0x7e, 0x8c, 0x69, 0xfc, 0x66, 0x7f, 0x1a, 0xa7, 0x0b, 0xb2, 0xc9, 0xa8, 0x65,
	0xa7, 0xde, 0xf8, 0xe7, 0x10, 0x40, 0x7a, 0xb5, 0x3d, 0xae, 0x4e, 0x12, 0x8d, 0x49, 0xec, 0x92,
	0x2d, 0xf5, 0x8c, 0x49, 0x8a, 0xe2, 0x3c, 0xd5, 0x2b, 0xf3, 0xe3, 0x04, 0xca, 0x20, 0xe7, 0x9b,
	0xa1, 0x82, 0x6f, 0x4e, 0x79, 0x41, 0xb7, 0x61, 0x82, 0xff, 0xf6, 0x80, 0xbf, 0x53, 0x79, 0x38,
	0x7d, 0xbb, 0x3f, 0xd5, 0x1b, 0x88, 0xd8, 0x4d, 0xaa, 0x3f, 0xef, 0x9f, 0xb2, 0xb7, 0x2a, 0x04,
	0xc9, 0x77, 0x76, 0xb3, 0xf0, 0x9c, 0x44, 0xec, 0x03, 0xb9, 0x59, 0x38, 0x30, 0xb3, 0xda, 0xa3,
	0xa7, 0xb2, 0xda, 0x7f, 0xd1, 0x60, 0xfe, 0x56, 0xc7, 0xc7, 0x4e, 0xda, 0x97, 0x49, 0x92, 0x96,
	0xed, 0x4c, 0xc7, 0x3c, 0xa6, 0xcb, 0xa9, 0x78, 0xfb, 0x1f, 0xd1, 0xe9, 0x61, 0x3b, 0x21, 0x6d,
	0x93, 0xb3, 0x61, 0x57, 0x8f, 0xa6, 0x74, 0x2a, 0x3d, 0x9a, 0x16, 0x54, 0xbb, 0x8d, 0x49, 0x9f,
	0xfa, 0xa7, 0xdc, 0xb4, 0x5a, 0xf9, 0xd7, 0x2c, 0x9c, 0xa5, 0xb7, 0xe3, 0x46, 0x14, 0x90, 0xc0,
	0x0e, 0xbc, 0x4d, 0x1c, 0xed, 0xbb, 0x36, 0xd6, 0xef, 0xc2, 0x08, 0x4f, 0xb6, 0xf4, 0x0b, 0xca,
	0x08, 0x9f, 0x4d, 0x0f, 0x6b, 0x2f, 0x1c, 0x85, 0x26, 0x6c, 0xb8, 0x0f, 0x93, 0xd9, 0xaa, 0xa9,
	0xfe, 0xca, 0xa3, 0xe9, 0x72, 0x35, 0xd7, 0xda, 0xab, 0xfd, 0x21, 0x73, 0x51, 0xcb, 0x9a, 0xbe,
	0x05, 0x67, 0xd8, 0x65, 0xa6, 0x3f, 0xaf, 0x22, 0xcc, 0xd6, 0x44, 0x6b, 0x17, 0x8e, 0xc0, 0x4a,
	0xf8, 0x3e, 0x80, 0xa9, 0xfc, 0x25, 0xa9, 0xbf, 0xf6, 0x48, 0xd2, 0x62, 0x81, 0xb1, 0x56, 0xef,
	0x17, 0x3d, 0x11, 0xb9, 0x0d, 0xa3, 0xa2, 0x02, 0xa4, 0x2b, 0x5d, 0x9d, 0x2f, 0x1b, 0xd6, 0x5e,
	0x3c, 0x12, 0x4f, 0xac, 0x49, 0x94, 0x54, 0xe9, 0x64, 0x75, 0x49, 0xaf, 0x1f, 0x41, 0x5b, 0x28,
	0xb3, 0xd5, 0x96, 0xfa, 0xc6, 0x17, 0x32, 0xff, 0x17, 0x46, 0x78, 0xd5, 0x42, 0xbd, 0xc1, 0x72,
	0x25, 0x28, 0xf5, 0x06, 0xcb, 0x17, 0x3f, 0x96, 0x35, 0xdd, 0x83, 0x72, 0xae, 0x96, 0xa0, 0x2b,
	0xb7, 0x4d, 0xaf, 0x8a, 0x46, 0xed, 0xb5, 0x3e, 0xb1, 0x85, 0x21, 0x3f, 0x80, 0xf1, 0xa4, 0x76,
	0xa0, 0x2f, 0xaa, 0x68, 0x8b, 0xf5, 0x8b, 0xda, 0x4b, 0x7d, 0x60, 0x0a, 0x09, 0x1e, 0x94, 0x73,
	0xd5, 0x06, 0xb5, 0x3d, 0xbd, 0x8a, 0x15, 0x6a, 0x7b, 0x7a, 0x97, 0x30, 0x02, 0x98, 0xca, 0x37,
	0x55, 0xd5, 0x7b, 0xbb, 0x67, 0x97, 0x57, 0xbd, 0xb7, 0x15, 0xbd, 0xda, 0xcf, 0x60, 0x4c, 0xb6,
	0x45, 0x75, 0xf5, 0x96, 0xcd, 0x77, 0x63, 0x6b, 0x8b, 0x47, 0x23, 0xa6, 0xf6, 0xe4, 0xdb, 0xa0,
	0x6a, 0x7b, 0x7a, 0xf6, 0x61, 0xd5, 0xf6, 0x28, 0xba, 0xab, 0x6d, 0x98, 0x2e, 0x36, 0x1e, 0x75,
	0xe5, 0xf1, 0x50, 0xb4, 0x4d, 0x6b, 0xcb, 0xfd, 0x13, 0x08, 0xb1, 0x16, 0x8c, 0xc9, 0xee, 0x9e,
	0xda, 0x8d, 0x85, 0xa6, 0xa5, 0xda, 0x8d, 0xc5, 0x46, 0xe1, 0xb2, 0x46, 0xed, 0x2a, 0xd6, 0x79,
	0xd4, 0x76, 0x29, 0xaa, 0x55, 0x6a, 0xbb, 0x94, 0x25, 0xa4, 0x36, 0x4c, 0x17, 0x2b, 0x2a, 0x6a,
	0xb1, 0x8a, 0xba, 0x90, 0x5a, 0xac, 0xb2, 0x58, 0xf3, 0x00, 0xa6, 0xf2, 0xb5, 0x15, 0xf5, 0xb6,
	0xe9, 0x59, 0x9c, 0x51, 0x6f, 0x9b, 0xde, 0x25, 0x9b, 0x65, 0x8d, 0x86, 0xe1, 0x42, 0xa5, 0x43,
	0x1d, 0x86, 0x7b, 0x17, 0x69, 0xd4, 0x61, 0x58, 0x55, 0x42, 0xf9, 0xa9, 0x06, 0xb3, 0x3d, 0x9f,
	0xac, 0xfa, 0xa5, 0x3e, 0x5f, 0xa6, 0xb9, 0xe2, 0x4a, 0xed, 0x8d, 0x01, 0xa9, 0x84, 0x1a, 0xa4,
	0xbb, 0xf0, 0x51, 0xef, 0xf7, 0x65, 0x7c, 0x94, 0xe9, 0x8a, 0xe7, 0xfe, 0xb2, 0xa6, 0xff, 0x08,
	0xf4, 0xee, 0xdf, 0xc3, 0xe8, 0x17, 0x07, 0xfe, 0xe1, 0x61, 0x6d, 0x65, 0x10, 0x12, 0x61, 0xf2,
	0x8f, 0x35, 0x38, 0xd7, 0xeb, 0x27, 0xde, 0xfa, 0xeb, 0xca, 0x33, 0xa9, 0xfe, 0xb1, 0x7a, 0xed,
	0xd2, 0x60, 0x44, 0x42, 0x87, 0x0e, 0x4c, 0x17, 0x93, 0x4d, 0xf5, 0xd9, 0x52, 0xe4, 0xd8, 0xea,
	0xb3, 0xa5, 0xca, 0x63, 0x97, 0x35, 0xfd, 0x00, 0x66, 0xba, 0x7e, 0xeb, 0xaf, 0x2b, 0x19, 0xa9,
	0xfe, 0xf1, 0xa1, 0x76, 0x71, 0x00, 0x0a, 0x2e, 0xbb, 0xf1, 0xb3, 0xd2, 0x9f, 0x1e, 0x2e, 0x68,
	0xdf, 0x3e, 0x5c, 0xd0, 0xbe, 0x7b, 0xb8, 0xa0, 0x7d, 0xf1, 0xfd, 0xc2, 0x13, 0xdf, 0x7e, 0xbf,
	0xf0, 0xc4, 0x5f, 0xbf, 0x5f, 0x78, 0x02, 0x6a, 0x76, 0xd0, 0x52, 0x30, 0x6c, 0x8c, 0x27, 0x49,
	0xf2, 0x86, 0xb6, 0x7d, 0x6b, 0xcf, 0x25, 0xcd, 0xf6, 0x0e, 0x4d, 0xb5, 0x97, 0xec, 0x20, 0x6e,
	0x05, 0xf1, 0x12, 0xfb, 0x4d, 0x31, 0x8e, 0x96, 0xf6, 0x57, 0x92, 0x4f, 0x56, 0xdd, 0x8f, 0x97,
	0x7a, 0xff, 0x1f, 0xd2, 0x3b, 0x74, 0x24, 0x07, 0xbf, 0x2b, 0x0d, 0x6d, 0x6c, 0x7d, 0xfa, 0xfb,
	0xd2, 0xdc, 0x86, 0x14, 0x4e, 0xa5, 0xd5, 0xb7, 0xc4, 0xf4, 0x37, 0xe9, 0xc4, 0x3d, 0x3a, 0x71,
	0x4f, 0x4e, 0x3c, 0x2c, 0x19, 0xbd, 0x27, 0xee, 0x5d, 0xdb, 0x68, 0xc8, 0xce, 0xcd, 0x3f, 0x4a,
	0x55, 0x89, 0xb4, 0xba, 0x4a, 0xb1, 0x56, 0x57, 0x25, 0xda, 0xce, 0x08, 0xfb, 0xe7, 0x92, 0xd7,
	0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x61, 0x26, 0xe8, 0x2d, 0x35, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ViewProtocolServiceClient is the client API for ViewProtocolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ViewProtocolServiceClient interface {
	// Get current status of chain sync
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Stream sync status updates until the view service has caught up with the chain.
	// Returns a stream of `StatusStreamResponse`s.
	StatusStream(ctx context.Context, in *StatusStreamRequest, opts ...grpc.CallOption) (ViewProtocolService_StatusStreamClient, error)
	// Queries for notes that have been accepted by the chain.
	// Returns a stream of `NotesResponse`s.
	Notes(ctx context.Context, in *NotesRequest, opts ...grpc.CallOption) (ViewProtocolService_NotesClient, error)
	// Returns a stream of `NotesForVotingResponse`s.
	NotesForVoting(ctx context.Context, in *NotesForVotingRequest, opts ...grpc.CallOption) (ViewProtocolService_NotesForVotingClient, error)
	// Returns authentication paths for the given note commitments.
	//
	// This method takes a batch of input commitments, rather than just one, so
	// that the client can get a consistent set of authentication paths to a
	// common root.  (Otherwise, if a client made multiple requests, the wallet
	// service could have advanced the state commitment tree state between queries).
	Witness(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessResponse, error)
	WitnessAndBuild(ctx context.Context, in *WitnessAndBuildRequest, opts ...grpc.CallOption) (*WitnessAndBuildResponse, error)
	// Queries for assets.
	// Returns a stream of `AssetsResponse`s.
	Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (ViewProtocolService_AssetsClient, error)
	// Query for the current app parameters.
	AppParameters(ctx context.Context, in *AppParametersRequest, opts ...grpc.CallOption) (*AppParametersResponse, error)
	// Query for the current gas prices.
	GasPrices(ctx context.Context, in *GasPricesRequest, opts ...grpc.CallOption) (*GasPricesResponse, error)
	// Query for the current FMD parameters.
	FMDParameters(ctx context.Context, in *FMDParametersRequest, opts ...grpc.CallOption) (*FMDParametersResponse, error)
	// Query for an address given an address index
	AddressByIndex(ctx context.Context, in *AddressByIndexRequest, opts ...grpc.CallOption) (*AddressByIndexResponse, error)
	// Query for wallet id
	WalletId(ctx context.Context, in *WalletIdRequest, opts ...grpc.CallOption) (*WalletIdResponse, error)
	// Query for an address given an address index
	IndexByAddress(ctx context.Context, in *IndexByAddressRequest, opts ...grpc.CallOption) (*IndexByAddressResponse, error)
	// Query for an ephemeral address
	EphemeralAddress(ctx context.Context, in *EphemeralAddressRequest, opts ...grpc.CallOption) (*EphemeralAddressResponse, error)
	// Query for balance of a given address.
	// Returns a stream of `BalancesResponses`.
	Balances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (ViewProtocolService_BalancesClient, error)
	// Query for a note by its note commitment, optionally waiting until the note is detected.
	NoteByCommitment(ctx context.Context, in *NoteByCommitmentRequest, opts ...grpc.CallOption) (*NoteByCommitmentResponse, error)
	// Query for a swap by its swap commitment, optionally waiting until the swap is detected.
	SwapByCommitment(ctx context.Context, in *SwapByCommitmentRequest, opts ...grpc.CallOption) (*SwapByCommitmentResponse, error)
	// Query for all unclaimed swaps.
	UnclaimedSwaps(ctx context.Context, in *UnclaimedSwapsRequest, opts ...grpc.CallOption) (ViewProtocolService_UnclaimedSwapsClient, error)
	// Query for whether a nullifier has been spent, optionally waiting until it is spent.
	NullifierStatus(ctx context.Context, in *NullifierStatusRequest, opts ...grpc.CallOption) (*NullifierStatusResponse, error)
	// Query for a given transaction by its hash.
	TransactionInfoByHash(ctx context.Context, in *TransactionInfoByHashRequest, opts ...grpc.CallOption) (*TransactionInfoByHashResponse, error)
	// Query for the full transactions in the given range of blocks.
	// Returns a stream of `TransactionInfoResponse`s.
	TransactionInfo(ctx context.Context, in *TransactionInfoRequest, opts ...grpc.CallOption) (ViewProtocolService_TransactionInfoClient, error)
	// Query for a transaction plan
	TransactionPlanner(ctx context.Context, in *TransactionPlannerRequest, opts ...grpc.CallOption) (*TransactionPlannerResponse, error)
	// Broadcast a transaction to the network, optionally waiting for full confirmation.
	BroadcastTransaction(ctx context.Context, in *BroadcastTransactionRequest, opts ...grpc.CallOption) (*BroadcastTransactionResponse, error)
	// Query for owned position IDs for the given trading pair and in the given position state.
	OwnedPositionIds(ctx context.Context, in *OwnedPositionIdsRequest, opts ...grpc.CallOption) (ViewProtocolService_OwnedPositionIdsClient, error)
	// Authorize a transaction plan and build the transaction.
	AuthorizeAndBuild(ctx context.Context, in *AuthorizeAndBuildRequest, opts ...grpc.CallOption) (*AuthorizeAndBuildResponse, error)
}

type viewProtocolServiceClient struct {
	cc grpc1.ClientConn
}

func NewViewProtocolServiceClient(cc grpc1.ClientConn) ViewProtocolServiceClient {
	return &viewProtocolServiceClient{cc}
}

func (c *viewProtocolServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) StatusStream(ctx context.Context, in *StatusStreamRequest, opts ...grpc.CallOption) (ViewProtocolService_StatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewProtocolService_serviceDesc.Streams[0], "/penumbra.view.v1alpha1.ViewProtocolService/StatusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewProtocolServiceStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewProtocolService_StatusStreamClient interface {
	Recv() (*StatusStreamResponse, error)
	grpc.ClientStream
}

type viewProtocolServiceStatusStreamClient struct {
	grpc.ClientStream
}

func (x *viewProtocolServiceStatusStreamClient) Recv() (*StatusStreamResponse, error) {
	m := new(StatusStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewProtocolServiceClient) Notes(ctx context.Context, in *NotesRequest, opts ...grpc.CallOption) (ViewProtocolService_NotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewProtocolService_serviceDesc.Streams[1], "/penumbra.view.v1alpha1.ViewProtocolService/Notes", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewProtocolServiceNotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewProtocolService_NotesClient interface {
	Recv() (*NotesResponse, error)
	grpc.ClientStream
}

type viewProtocolServiceNotesClient struct {
	grpc.ClientStream
}

func (x *viewProtocolServiceNotesClient) Recv() (*NotesResponse, error) {
	m := new(NotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewProtocolServiceClient) NotesForVoting(ctx context.Context, in *NotesForVotingRequest, opts ...grpc.CallOption) (ViewProtocolService_NotesForVotingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewProtocolService_serviceDesc.Streams[2], "/penumbra.view.v1alpha1.ViewProtocolService/NotesForVoting", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewProtocolServiceNotesForVotingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewProtocolService_NotesForVotingClient interface {
	Recv() (*NotesForVotingResponse, error)
	grpc.ClientStream
}

type viewProtocolServiceNotesForVotingClient struct {
	grpc.ClientStream
}

func (x *viewProtocolServiceNotesForVotingClient) Recv() (*NotesForVotingResponse, error) {
	m := new(NotesForVotingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewProtocolServiceClient) Witness(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessResponse, error) {
	out := new(WitnessResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/Witness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) WitnessAndBuild(ctx context.Context, in *WitnessAndBuildRequest, opts ...grpc.CallOption) (*WitnessAndBuildResponse, error) {
	out := new(WitnessAndBuildResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/WitnessAndBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (ViewProtocolService_AssetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewProtocolService_serviceDesc.Streams[3], "/penumbra.view.v1alpha1.ViewProtocolService/Assets", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewProtocolServiceAssetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewProtocolService_AssetsClient interface {
	Recv() (*AssetsResponse, error)
	grpc.ClientStream
}

type viewProtocolServiceAssetsClient struct {
	grpc.ClientStream
}

func (x *viewProtocolServiceAssetsClient) Recv() (*AssetsResponse, error) {
	m := new(AssetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewProtocolServiceClient) AppParameters(ctx context.Context, in *AppParametersRequest, opts ...grpc.CallOption) (*AppParametersResponse, error) {
	out := new(AppParametersResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/AppParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) GasPrices(ctx context.Context, in *GasPricesRequest, opts ...grpc.CallOption) (*GasPricesResponse, error) {
	out := new(GasPricesResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/GasPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) FMDParameters(ctx context.Context, in *FMDParametersRequest, opts ...grpc.CallOption) (*FMDParametersResponse, error) {
	out := new(FMDParametersResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/FMDParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) AddressByIndex(ctx context.Context, in *AddressByIndexRequest, opts ...grpc.CallOption) (*AddressByIndexResponse, error) {
	out := new(AddressByIndexResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/AddressByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) WalletId(ctx context.Context, in *WalletIdRequest, opts ...grpc.CallOption) (*WalletIdResponse, error) {
	out := new(WalletIdResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/WalletId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) IndexByAddress(ctx context.Context, in *IndexByAddressRequest, opts ...grpc.CallOption) (*IndexByAddressResponse, error) {
	out := new(IndexByAddressResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/IndexByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) EphemeralAddress(ctx context.Context, in *EphemeralAddressRequest, opts ...grpc.CallOption) (*EphemeralAddressResponse, error) {
	out := new(EphemeralAddressResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/EphemeralAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) Balances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (ViewProtocolService_BalancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewProtocolService_serviceDesc.Streams[4], "/penumbra.view.v1alpha1.ViewProtocolService/Balances", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewProtocolServiceBalancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewProtocolService_BalancesClient interface {
	Recv() (*BalancesResponse, error)
	grpc.ClientStream
}

type viewProtocolServiceBalancesClient struct {
	grpc.ClientStream
}

func (x *viewProtocolServiceBalancesClient) Recv() (*BalancesResponse, error) {
	m := new(BalancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewProtocolServiceClient) NoteByCommitment(ctx context.Context, in *NoteByCommitmentRequest, opts ...grpc.CallOption) (*NoteByCommitmentResponse, error) {
	out := new(NoteByCommitmentResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/NoteByCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) SwapByCommitment(ctx context.Context, in *SwapByCommitmentRequest, opts ...grpc.CallOption) (*SwapByCommitmentResponse, error) {
	out := new(SwapByCommitmentResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/SwapByCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) UnclaimedSwaps(ctx context.Context, in *UnclaimedSwapsRequest, opts ...grpc.CallOption) (ViewProtocolService_UnclaimedSwapsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewProtocolService_serviceDesc.Streams[5], "/penumbra.view.v1alpha1.ViewProtocolService/UnclaimedSwaps", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewProtocolServiceUnclaimedSwapsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewProtocolService_UnclaimedSwapsClient interface {
	Recv() (*UnclaimedSwapsResponse, error)
	grpc.ClientStream
}

type viewProtocolServiceUnclaimedSwapsClient struct {
	grpc.ClientStream
}

func (x *viewProtocolServiceUnclaimedSwapsClient) Recv() (*UnclaimedSwapsResponse, error) {
	m := new(UnclaimedSwapsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewProtocolServiceClient) NullifierStatus(ctx context.Context, in *NullifierStatusRequest, opts ...grpc.CallOption) (*NullifierStatusResponse, error) {
	out := new(NullifierStatusResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/NullifierStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) TransactionInfoByHash(ctx context.Context, in *TransactionInfoByHashRequest, opts ...grpc.CallOption) (*TransactionInfoByHashResponse, error) {
	out := new(TransactionInfoByHashResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/TransactionInfoByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) TransactionInfo(ctx context.Context, in *TransactionInfoRequest, opts ...grpc.CallOption) (ViewProtocolService_TransactionInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewProtocolService_serviceDesc.Streams[6], "/penumbra.view.v1alpha1.ViewProtocolService/TransactionInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewProtocolServiceTransactionInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewProtocolService_TransactionInfoClient interface {
	Recv() (*TransactionInfoResponse, error)
	grpc.ClientStream
}

type viewProtocolServiceTransactionInfoClient struct {
	grpc.ClientStream
}

func (x *viewProtocolServiceTransactionInfoClient) Recv() (*TransactionInfoResponse, error) {
	m := new(TransactionInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewProtocolServiceClient) TransactionPlanner(ctx context.Context, in *TransactionPlannerRequest, opts ...grpc.CallOption) (*TransactionPlannerResponse, error) {
	out := new(TransactionPlannerResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/TransactionPlanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) BroadcastTransaction(ctx context.Context, in *BroadcastTransactionRequest, opts ...grpc.CallOption) (*BroadcastTransactionResponse, error) {
	out := new(BroadcastTransactionResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/BroadcastTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewProtocolServiceClient) OwnedPositionIds(ctx context.Context, in *OwnedPositionIdsRequest, opts ...grpc.CallOption) (ViewProtocolService_OwnedPositionIdsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewProtocolService_serviceDesc.Streams[7], "/penumbra.view.v1alpha1.ViewProtocolService/OwnedPositionIds", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewProtocolServiceOwnedPositionIdsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewProtocolService_OwnedPositionIdsClient interface {
	Recv() (*OwnedPositionIdsResponse, error)
	grpc.ClientStream
}

type viewProtocolServiceOwnedPositionIdsClient struct {
	grpc.ClientStream
}

func (x *viewProtocolServiceOwnedPositionIdsClient) Recv() (*OwnedPositionIdsResponse, error) {
	m := new(OwnedPositionIdsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewProtocolServiceClient) AuthorizeAndBuild(ctx context.Context, in *AuthorizeAndBuildRequest, opts ...grpc.CallOption) (*AuthorizeAndBuildResponse, error) {
	out := new(AuthorizeAndBuildResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1alpha1.ViewProtocolService/AuthorizeAndBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewProtocolServiceServer is the server API for ViewProtocolService service.
type ViewProtocolServiceServer interface {
	// Get current status of chain sync
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Stream sync status updates until the view service has caught up with the chain.
	// Returns a stream of `StatusStreamResponse`s.
	StatusStream(*StatusStreamRequest, ViewProtocolService_StatusStreamServer) error
	// Queries for notes that have been accepted by the chain.
	// Returns a stream of `NotesResponse`s.
	Notes(*NotesRequest, ViewProtocolService_NotesServer) error
	// Returns a stream of `NotesForVotingResponse`s.
	NotesForVoting(*NotesForVotingRequest, ViewProtocolService_NotesForVotingServer) error
	// Returns authentication paths for the given note commitments.
	//
	// This method takes a batch of input commitments, rather than just one, so
	// that the client can get a consistent set of authentication paths to a
	// common root.  (Otherwise, if a client made multiple requests, the wallet
	// service could have advanced the state commitment tree state between queries).
	Witness(context.Context, *WitnessRequest) (*WitnessResponse, error)
	WitnessAndBuild(context.Context, *WitnessAndBuildRequest) (*WitnessAndBuildResponse, error)
	// Queries for assets.
	// Returns a stream of `AssetsResponse`s.
	Assets(*AssetsRequest, ViewProtocolService_AssetsServer) error
	// Query for the current app parameters.
	AppParameters(context.Context, *AppParametersRequest) (*AppParametersResponse, error)
	// Query for the current gas prices.
	GasPrices(context.Context, *GasPricesRequest) (*GasPricesResponse, error)
	// Query for the current FMD parameters.
	FMDParameters(context.Context, *FMDParametersRequest) (*FMDParametersResponse, error)
	// Query for an address given an address index
	AddressByIndex(context.Context, *AddressByIndexRequest) (*AddressByIndexResponse, error)
	// Query for wallet id
	WalletId(context.Context, *WalletIdRequest) (*WalletIdResponse, error)
	// Query for an address given an address index
	IndexByAddress(context.Context, *IndexByAddressRequest) (*IndexByAddressResponse, error)
	// Query for an ephemeral address
	EphemeralAddress(context.Context, *EphemeralAddressRequest) (*EphemeralAddressResponse, error)
	// Query for balance of a given address.
	// Returns a stream of `BalancesResponses`.
	Balances(*BalancesRequest, ViewProtocolService_BalancesServer) error
	// Query for a note by its note commitment, optionally waiting until the note is detected.
	NoteByCommitment(context.Context, *NoteByCommitmentRequest) (*NoteByCommitmentResponse, error)
	// Query for a swap by its swap commitment, optionally waiting until the swap is detected.
	SwapByCommitment(context.Context, *SwapByCommitmentRequest) (*SwapByCommitmentResponse, error)
	// Query for all unclaimed swaps.
	UnclaimedSwaps(*UnclaimedSwapsRequest, ViewProtocolService_UnclaimedSwapsServer) error
	// Query for whether a nullifier has been spent, optionally waiting until it is spent.
	NullifierStatus(context.Context, *NullifierStatusRequest) (*NullifierStatusResponse, error)
	// Query for a given transaction by its hash.
	TransactionInfoByHash(context.Context, *TransactionInfoByHashRequest) (*TransactionInfoByHashResponse, error)
	// Query for the full transactions in the given range of blocks.
	// Returns a stream of `TransactionInfoResponse`s.
	TransactionInfo(*TransactionInfoRequest, ViewProtocolService_TransactionInfoServer) error
	// Query for a transaction plan
	TransactionPlanner(context.Context, *TransactionPlannerRequest) (*TransactionPlannerResponse, error)
	// Broadcast a transaction to the network, optionally waiting for full confirmation.
	BroadcastTransaction(context.Context, *BroadcastTransactionRequest) (*BroadcastTransactionResponse, error)
	// Query for owned position IDs for the given trading pair and in the given position state.
	OwnedPositionIds(*OwnedPositionIdsRequest, ViewProtocolService_OwnedPositionIdsServer) error
	// Authorize a transaction plan and build the transaction.
	AuthorizeAndBuild(context.Context, *AuthorizeAndBuildRequest) (*AuthorizeAndBuildResponse, error)
}

// UnimplementedViewProtocolServiceServer can be embedded to have forward compatible implementations.
type UnimplementedViewProtocolServiceServer struct {
}

func (*UnimplementedViewProtocolServiceServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedViewProtocolServiceServer) StatusStream(req *StatusStreamRequest, srv ViewProtocolService_StatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusStream not implemented")
}
func (*UnimplementedViewProtocolServiceServer) Notes(req *NotesRequest, srv ViewProtocolService_NotesServer) error {
	return status.Errorf(codes.Unimplemented, "method Notes not implemented")
}
func (*UnimplementedViewProtocolServiceServer) NotesForVoting(req *NotesForVotingRequest, srv ViewProtocolService_NotesForVotingServer) error {
	return status.Errorf(codes.Unimplemented, "method NotesForVoting not implemented")
}
func (*UnimplementedViewProtocolServiceServer) Witness(ctx context.Context, req *WitnessRequest) (*WitnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Witness not implemented")
}
func (*UnimplementedViewProtocolServiceServer) WitnessAndBuild(ctx context.Context, req *WitnessAndBuildRequest) (*WitnessAndBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WitnessAndBuild not implemented")
}
func (*UnimplementedViewProtocolServiceServer) Assets(req *AssetsRequest, srv ViewProtocolService_AssetsServer) error {
	return status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (*UnimplementedViewProtocolServiceServer) AppParameters(ctx context.Context, req *AppParametersRequest) (*AppParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppParameters not implemented")
}
func (*UnimplementedViewProtocolServiceServer) GasPrices(ctx context.Context, req *GasPricesRequest) (*GasPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrices not implemented")
}
func (*UnimplementedViewProtocolServiceServer) FMDParameters(ctx context.Context, req *FMDParametersRequest) (*FMDParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FMDParameters not implemented")
}
func (*UnimplementedViewProtocolServiceServer) AddressByIndex(ctx context.Context, req *AddressByIndexRequest) (*AddressByIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressByIndex not implemented")
}
func (*UnimplementedViewProtocolServiceServer) WalletId(ctx context.Context, req *WalletIdRequest) (*WalletIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletId not implemented")
}
func (*UnimplementedViewProtocolServiceServer) IndexByAddress(ctx context.Context, req *IndexByAddressRequest) (*IndexByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexByAddress not implemented")
}
func (*UnimplementedViewProtocolServiceServer) EphemeralAddress(ctx context.Context, req *EphemeralAddressRequest) (*EphemeralAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EphemeralAddress not implemented")
}
func (*UnimplementedViewProtocolServiceServer) Balances(req *BalancesRequest, srv ViewProtocolService_BalancesServer) error {
	return status.Errorf(codes.Unimplemented, "method Balances not implemented")
}
func (*UnimplementedViewProtocolServiceServer) NoteByCommitment(ctx context.Context, req *NoteByCommitmentRequest) (*NoteByCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteByCommitment not implemented")
}
func (*UnimplementedViewProtocolServiceServer) SwapByCommitment(ctx context.Context, req *SwapByCommitmentRequest) (*SwapByCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapByCommitment not implemented")
}
func (*UnimplementedViewProtocolServiceServer) UnclaimedSwaps(req *UnclaimedSwapsRequest, srv ViewProtocolService_UnclaimedSwapsServer) error {
	return status.Errorf(codes.Unimplemented, "method UnclaimedSwaps not implemented")
}
func (*UnimplementedViewProtocolServiceServer) NullifierStatus(ctx context.Context, req *NullifierStatusRequest) (*NullifierStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NullifierStatus not implemented")
}
func (*UnimplementedViewProtocolServiceServer) TransactionInfoByHash(ctx context.Context, req *TransactionInfoByHashRequest) (*TransactionInfoByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionInfoByHash not implemented")
}
func (*UnimplementedViewProtocolServiceServer) TransactionInfo(req *TransactionInfoRequest, srv ViewProtocolService_TransactionInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionInfo not implemented")
}
func (*UnimplementedViewProtocolServiceServer) TransactionPlanner(ctx context.Context, req *TransactionPlannerRequest) (*TransactionPlannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionPlanner not implemented")
}
func (*UnimplementedViewProtocolServiceServer) BroadcastTransaction(ctx context.Context, req *BroadcastTransactionRequest) (*BroadcastTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTransaction not implemented")
}
func (*UnimplementedViewProtocolServiceServer) OwnedPositionIds(req *OwnedPositionIdsRequest, srv ViewProtocolService_OwnedPositionIdsServer) error {
	return status.Errorf(codes.Unimplemented, "method OwnedPositionIds not implemented")
}
func (*UnimplementedViewProtocolServiceServer) AuthorizeAndBuild(ctx context.Context, req *AuthorizeAndBuildRequest) (*AuthorizeAndBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeAndBuild not implemented")
}

func RegisterViewProtocolServiceServer(s grpc1.Server, srv ViewProtocolServiceServer) {
	s.RegisterService(&_ViewProtocolService_serviceDesc, srv)
}

func _ViewProtocolService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_StatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewProtocolServiceServer).StatusStream(m, &viewProtocolServiceStatusStreamServer{stream})
}

type ViewProtocolService_StatusStreamServer interface {
	Send(*StatusStreamResponse) error
	grpc.ServerStream
}

type viewProtocolServiceStatusStreamServer struct {
	grpc.ServerStream
}

func (x *viewProtocolServiceStatusStreamServer) Send(m *StatusStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewProtocolService_Notes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewProtocolServiceServer).Notes(m, &viewProtocolServiceNotesServer{stream})
}

type ViewProtocolService_NotesServer interface {
	Send(*NotesResponse) error
	grpc.ServerStream
}

type viewProtocolServiceNotesServer struct {
	grpc.ServerStream
}

func (x *viewProtocolServiceNotesServer) Send(m *NotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewProtocolService_NotesForVoting_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotesForVotingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewProtocolServiceServer).NotesForVoting(m, &viewProtocolServiceNotesForVotingServer{stream})
}

type ViewProtocolService_NotesForVotingServer interface {
	Send(*NotesForVotingResponse) error
	grpc.ServerStream
}

type viewProtocolServiceNotesForVotingServer struct {
	grpc.ServerStream
}

func (x *viewProtocolServiceNotesForVotingServer) Send(m *NotesForVotingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewProtocolService_Witness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WitnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).Witness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/Witness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).Witness(ctx, req.(*WitnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_WitnessAndBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WitnessAndBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).WitnessAndBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/WitnessAndBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).WitnessAndBuild(ctx, req.(*WitnessAndBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_Assets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewProtocolServiceServer).Assets(m, &viewProtocolServiceAssetsServer{stream})
}

type ViewProtocolService_AssetsServer interface {
	Send(*AssetsResponse) error
	grpc.ServerStream
}

type viewProtocolServiceAssetsServer struct {
	grpc.ServerStream
}

func (x *viewProtocolServiceAssetsServer) Send(m *AssetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewProtocolService_AppParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).AppParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/AppParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).AppParameters(ctx, req.(*AppParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_GasPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GasPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).GasPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/GasPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).GasPrices(ctx, req.(*GasPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_FMDParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FMDParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).FMDParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/FMDParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).FMDParameters(ctx, req.(*FMDParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_AddressByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).AddressByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/AddressByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).AddressByIndex(ctx, req.(*AddressByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_WalletId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).WalletId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/WalletId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).WalletId(ctx, req.(*WalletIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_IndexByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).IndexByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/IndexByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).IndexByAddress(ctx, req.(*IndexByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_EphemeralAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EphemeralAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).EphemeralAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/EphemeralAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).EphemeralAddress(ctx, req.(*EphemeralAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_Balances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BalancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewProtocolServiceServer).Balances(m, &viewProtocolServiceBalancesServer{stream})
}

type ViewProtocolService_BalancesServer interface {
	Send(*BalancesResponse) error
	grpc.ServerStream
}

type viewProtocolServiceBalancesServer struct {
	grpc.ServerStream
}

func (x *viewProtocolServiceBalancesServer) Send(m *BalancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewProtocolService_NoteByCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteByCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).NoteByCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/NoteByCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).NoteByCommitment(ctx, req.(*NoteByCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_SwapByCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapByCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).SwapByCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/SwapByCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).SwapByCommitment(ctx, req.(*SwapByCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_UnclaimedSwaps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnclaimedSwapsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewProtocolServiceServer).UnclaimedSwaps(m, &viewProtocolServiceUnclaimedSwapsServer{stream})
}

type ViewProtocolService_UnclaimedSwapsServer interface {
	Send(*UnclaimedSwapsResponse) error
	grpc.ServerStream
}

type viewProtocolServiceUnclaimedSwapsServer struct {
	grpc.ServerStream
}

func (x *viewProtocolServiceUnclaimedSwapsServer) Send(m *UnclaimedSwapsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewProtocolService_NullifierStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullifierStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).NullifierStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/NullifierStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).NullifierStatus(ctx, req.(*NullifierStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_TransactionInfoByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfoByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).TransactionInfoByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/TransactionInfoByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).TransactionInfoByHash(ctx, req.(*TransactionInfoByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_TransactionInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewProtocolServiceServer).TransactionInfo(m, &viewProtocolServiceTransactionInfoServer{stream})
}

type ViewProtocolService_TransactionInfoServer interface {
	Send(*TransactionInfoResponse) error
	grpc.ServerStream
}

type viewProtocolServiceTransactionInfoServer struct {
	grpc.ServerStream
}

func (x *viewProtocolServiceTransactionInfoServer) Send(m *TransactionInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewProtocolService_TransactionPlanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPlannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).TransactionPlanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/TransactionPlanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).TransactionPlanner(ctx, req.(*TransactionPlannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/BroadcastTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).BroadcastTransaction(ctx, req.(*BroadcastTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewProtocolService_OwnedPositionIds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OwnedPositionIdsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewProtocolServiceServer).OwnedPositionIds(m, &viewProtocolServiceOwnedPositionIdsServer{stream})
}

type ViewProtocolService_OwnedPositionIdsServer interface {
	Send(*OwnedPositionIdsResponse) error
	grpc.ServerStream
}

type viewProtocolServiceOwnedPositionIdsServer struct {
	grpc.ServerStream
}

func (x *viewProtocolServiceOwnedPositionIdsServer) Send(m *OwnedPositionIdsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewProtocolService_AuthorizeAndBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAndBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewProtocolServiceServer).AuthorizeAndBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1alpha1.ViewProtocolService/AuthorizeAndBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewProtocolServiceServer).AuthorizeAndBuild(ctx, req.(*AuthorizeAndBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ViewProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.view.v1alpha1.ViewProtocolService",
	HandlerType: (*ViewProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ViewProtocolService_Status_Handler,
		},
		{
			MethodName: "Witness",
			Handler:    _ViewProtocolService_Witness_Handler,
		},
		{
			MethodName: "WitnessAndBuild",
			Handler:    _ViewProtocolService_WitnessAndBuild_Handler,
		},
		{
			MethodName: "AppParameters",
			Handler:    _ViewProtocolService_AppParameters_Handler,
		},
		{
			MethodName: "GasPrices",
			Handler:    _ViewProtocolService_GasPrices_Handler,
		},
		{
			MethodName: "FMDParameters",
			Handler:    _ViewProtocolService_FMDParameters_Handler,
		},
		{
			MethodName: "AddressByIndex",
			Handler:    _ViewProtocolService_AddressByIndex_Handler,
		},
		{
			MethodName: "WalletId",
			Handler:    _ViewProtocolService_WalletId_Handler,
		},
		{
			MethodName: "IndexByAddress",
			Handler:    _ViewProtocolService_IndexByAddress_Handler,
		},
		{
			MethodName: "EphemeralAddress",
			Handler:    _ViewProtocolService_EphemeralAddress_Handler,
		},
		{
			MethodName: "NoteByCommitment",
			Handler:    _ViewProtocolService_NoteByCommitment_Handler,
		},
		{
			MethodName: "SwapByCommitment",
			Handler:    _ViewProtocolService_SwapByCommitment_Handler,
		},
		{
			MethodName: "NullifierStatus",
			Handler:    _ViewProtocolService_NullifierStatus_Handler,
		},
		{
			MethodName: "TransactionInfoByHash",
			Handler:    _ViewProtocolService_TransactionInfoByHash_Handler,
		},
		{
			MethodName: "TransactionPlanner",
			Handler:    _ViewProtocolService_TransactionPlanner_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _ViewProtocolService_BroadcastTransaction_Handler,
		},
		{
			MethodName: "AuthorizeAndBuild",
			Handler:    _ViewProtocolService_AuthorizeAndBuild_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatusStream",
			Handler:       _ViewProtocolService_StatusStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Notes",
			Handler:       _ViewProtocolService_Notes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NotesForVoting",
			Handler:       _ViewProtocolService_NotesForVoting_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Assets",
			Handler:       _ViewProtocolService_Assets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Balances",
			Handler:       _ViewProtocolService_Balances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UnclaimedSwaps",
			Handler:       _ViewProtocolService_UnclaimedSwaps_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransactionInfo",
			Handler:       _ViewProtocolService_TransactionInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OwnedPositionIds",
			Handler:       _ViewProtocolService_OwnedPositionIds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "penumbra/view/v1alpha1/view.proto",
}

func (m *AuthorizeAndBuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAndBuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeAndBuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorizationData != nil {
		{
			size, err := m.AuthorizationData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TransactionPlan != nil {
		{
			size, err := m.TransactionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizeAndBuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAndBuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeAndBuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DetectionHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionWithdraws) > 0 {
		for iNdEx := len(m.PositionWithdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PositionWithdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.PositionCloses) > 0 {
		for iNdEx := len(m.PositionCloses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PositionCloses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.PositionOpens) > 0 {
		for iNdEx := len(m.PositionOpens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PositionOpens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.Ics20Withdrawals) > 0 {
		for iNdEx := len(m.Ics20Withdrawals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ics20Withdrawals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.IbcRelayActions) > 0 {
		for iNdEx := len(m.IbcRelayActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IbcRelayActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.Undelegations) > 0 {
		for iNdEx := len(m.Undelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Undelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.SwapClaims) > 0 {
		for iNdEx := len(m.SwapClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.Swaps) > 0 {
		for iNdEx := len(m.Swaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Swaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExpiryHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ExpiryHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Swap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Swap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Swap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimAddress != nil {
		{
			size, err := m.ClaimAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TargetAsset != nil {
		{
			size, err := m.TargetAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_SwapClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_SwapClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_SwapClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapCommitment != nil {
		{
			size, err := m.SwapCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Delegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateData != nil {
		{
			size, err := m.RateData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Undelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Undelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Undelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateData != nil {
		{
			size, err := m.RateData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_PositionOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_PositionOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_PositionOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_PositionClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_PositionClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_PositionClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != nil {
		{
			size, err := m.PositionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_PositionWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_PositionWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_PositionWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Reserves != nil {
		{
			size, err := m.Reserves.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PositionId != nil {
		{
			size, err := m.PositionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Plan != nil {
		{
			size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WalletIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *WalletIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WalletId != nil {
		{
			size, err := m.WalletId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EphemeralAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisplayConfirm {
		i--
		if m.DisplayConfirm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EphemeralAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetIdFilter != nil {
		{
			size, err := m.AssetIdFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AccountFilter != nil {
		{
			size, err := m.AccountFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CatchingUp {
		i--
		if m.CatchingUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PartialSyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PartialSyncHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.FullSyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FullSyncHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StatusStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartialSyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PartialSyncHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.FullSyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FullSyncHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.LatestKnownBlockHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.LatestKnownBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmountToSpend != nil {
		{
			size, err := m.AmountToSpend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IncludeSpent {
		i--
		if m.IncludeSpent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *NotesForVotingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesForVotingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesForVotingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VotableAtHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.VotableAtHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WitnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransactionPlan != nil {
		{
			size, err := m.TransactionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NoteCommitments) > 0 {
		for iNdEx := len(m.NoteCommitments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NoteCommitments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *WitnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WitnessData != nil {
		{
			size, err := m.WitnessData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WitnessAndBuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessAndBuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessAndBuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorizationData != nil {
		{
			size, err := m.AuthorizationData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TransactionPlan != nil {
		{
			size, err := m.TransactionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WitnessAndBuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessAndBuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessAndBuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeVotingReceiptTokens {
		i--
		if m.IncludeVotingReceiptTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IncludeProposalNfts {
		i--
		if m.IncludeProposalNfts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IncludeLpNfts {
		i--
		if m.IncludeLpNfts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IncludeUnbondingTokens {
		i--
		if m.IncludeUnbondingTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IncludeDelegationTokens {
		i--
		if m.IncludeDelegationTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.IncludeSpecificDenominations) > 0 {
		for iNdEx := len(m.IncludeSpecificDenominations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeSpecificDenominations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Filtered {
		i--
		if m.Filtered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DenomMetadata != nil {
		{
			size, err := m.DenomMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AppParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AppParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GasPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasPrices != nil {
		{
			size, err := m.GasPrices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FMDParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FMDParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FMDParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FMDParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FMDParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FMDParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoteByCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoteByCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteByCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *NoteByCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoteByCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteByCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpendableNote != nil {
		{
			size, err := m.SpendableNote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapByCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapByCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapByCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SwapCommitment != nil {
		{
			size, err := m.SwapCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SwapByCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapByCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapByCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnclaimedSwapsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnclaimedSwapsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnclaimedSwapsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UnclaimedSwapsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnclaimedSwapsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnclaimedSwapsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NullifierStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullifierStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullifierStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *NullifierStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullifierStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullifierStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spent {
		i--
		if m.Spent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfoByHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfoByHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfoByHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.StartHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.View != nil {
		{
			size, err := m.View.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Perspective != nil {
		{
			size, err := m.Perspective.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxInfo != nil {
		{
			size, err := m.TxInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfoByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfoByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfoByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxInfo != nil {
		{
			size, err := m.TxInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoteRecord != nil {
		{
			size, err := m.NoteRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotesForVotingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesForVotingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesForVotingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NoteRecord != nil {
		{
			size, err := m.NoteRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpendableNoteRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendableNoteRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendableNoteRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Position != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x38
	}
	if m.HeightSpent != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.HeightSpent))
		i--
		dAtA[i] = 0x30
	}
	if m.HeightCreated != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.HeightCreated))
		i--
		dAtA[i] = 0x28
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Note != nil {
		{
			size, err := m.Note.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.HeightClaimed != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.HeightClaimed))
		i--
		dAtA[i] = 0x30
	}
	if m.OutputData != nil {
		{
			size, err := m.OutputData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Position != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SwapCommitment != nil {
		{
			size, err := m.SwapCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnedPositionIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnedPositionIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnedPositionIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PositionState != nil {
		{
			size, err := m.PositionState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnedPositionIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnedPositionIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnedPositionIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != nil {
		{
			size, err := m.PositionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintView(dAtA []byte, offset int, v uint64) int {
	offset -= sovView(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthorizeAndBuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionPlan != nil {
		l = m.TransactionPlan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AuthorizationData != nil {
		l = m.AuthorizationData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AuthorizeAndBuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BroadcastTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *BroadcastTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.DetectionHeight != 0 {
		n += 1 + sovView(uint64(m.DetectionHeight))
	}
	return n
}

func (m *TransactionPlannerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpiryHeight != 0 {
		n += 1 + sovView(uint64(m.ExpiryHeight))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Swaps) > 0 {
		for _, e := range m.Swaps {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.SwapClaims) > 0 {
		for _, e := range m.SwapClaims {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Undelegations) > 0 {
		for _, e := range m.Undelegations {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.IbcRelayActions) > 0 {
		for _, e := range m.IbcRelayActions {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Ics20Withdrawals) > 0 {
		for _, e := range m.Ics20Withdrawals {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.PositionOpens) > 0 {
		for _, e := range m.PositionOpens {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.PositionCloses) > 0 {
		for _, e := range m.PositionCloses {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.PositionWithdraws) > 0 {
		for _, e := range m.PositionWithdraws {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	return n
}

func (m *TransactionPlannerRequest_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Swap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.TargetAsset != nil {
		l = m.TargetAsset.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ClaimAddress != nil {
		l = m.ClaimAddress.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_SwapClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapCommitment != nil {
		l = m.SwapCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.RateData != nil {
		l = m.RateData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Undelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.RateData != nil {
		l = m.RateData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_PositionOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_PositionClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != nil {
		l = m.PositionId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_PositionWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != nil {
		l = m.PositionId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Reserves != nil {
		l = m.Reserves.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AddressByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AddressByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WalletIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *WalletIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletId != nil {
		l = m.WalletId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *IndexByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *IndexByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *EphemeralAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.DisplayConfirm {
		n += 2
	}
	return n
}

func (m *EphemeralAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountFilter != nil {
		l = m.AccountFilter.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AssetIdFilter != nil {
		l = m.AssetIdFilter.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullSyncHeight != 0 {
		n += 1 + sovView(uint64(m.FullSyncHeight))
	}
	if m.PartialSyncHeight != 0 {
		n += 1 + sovView(uint64(m.PartialSyncHeight))
	}
	if m.CatchingUp {
		n += 2
	}
	return n
}

func (m *StatusStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StatusStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestKnownBlockHeight != 0 {
		n += 1 + sovView(uint64(m.LatestKnownBlockHeight))
	}
	if m.FullSyncHeight != 0 {
		n += 1 + sovView(uint64(m.FullSyncHeight))
	}
	if m.PartialSyncHeight != 0 {
		n += 1 + sovView(uint64(m.PartialSyncHeight))
	}
	return n
}

func (m *NotesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeSpent {
		n += 2
	}
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AmountToSpend != nil {
		l = m.AmountToSpend.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NotesForVotingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotableAtHeight != 0 {
		n += 1 + sovView(uint64(m.VotableAtHeight))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WitnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NoteCommitments) > 0 {
		for _, e := range m.NoteCommitments {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.TransactionPlan != nil {
		l = m.TransactionPlan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WitnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WitnessData != nil {
		l = m.WitnessData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WitnessAndBuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionPlan != nil {
		l = m.TransactionPlan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AuthorizationData != nil {
		l = m.AuthorizationData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WitnessAndBuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filtered {
		n += 2
	}
	if len(m.IncludeSpecificDenominations) > 0 {
		for _, e := range m.IncludeSpecificDenominations {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.IncludeDelegationTokens {
		n += 2
	}
	if m.IncludeUnbondingTokens {
		n += 2
	}
	if m.IncludeLpNfts {
		n += 2
	}
	if m.IncludeProposalNfts {
		n += 2
	}
	if m.IncludeVotingReceiptTokens {
		n += 2
	}
	return n
}

func (m *AssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenomMetadata != nil {
		l = m.DenomMetadata.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AppParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AppParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *GasPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GasPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasPrices != nil {
		l = m.GasPrices.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *FMDParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FMDParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NoteByCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *NoteByCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpendableNote != nil {
		l = m.SpendableNote.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SwapByCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapCommitment != nil {
		l = m.SwapCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *SwapByCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *UnclaimedSwapsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnclaimedSwapsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NullifierStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *NullifierStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spent {
		n += 2
	}
	return n
}

func (m *TransactionInfoByHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartHeight != 0 {
		n += 1 + sovView(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovView(uint64(m.EndHeight))
	}
	return n
}

func (m *TransactionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovView(uint64(m.Height))
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Perspective != nil {
		l = m.Perspective.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.View != nil {
		l = m.View.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxInfo != nil {
		l = m.TxInfo.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionInfoByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxInfo != nil {
		l = m.TxInfo.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteRecord != nil {
		l = m.NoteRecord.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NotesForVotingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteRecord != nil {
		l = m.NoteRecord.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SpendableNoteRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Note != nil {
		l = m.Note.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.HeightCreated != 0 {
		n += 1 + sovView(uint64(m.HeightCreated))
	}
	if m.HeightSpent != 0 {
		n += 1 + sovView(uint64(m.HeightSpent))
	}
	if m.Position != 0 {
		n += 1 + sovView(uint64(m.Position))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SwapRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapCommitment != nil {
		l = m.SwapCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovView(uint64(m.Position))
	}
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.OutputData != nil {
		l = m.OutputData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.HeightClaimed != 0 {
		n += 1 + sovView(uint64(m.HeightClaimed))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *OwnedPositionIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionState != nil {
		l = m.PositionState.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *OwnedPositionIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != nil {
		l = m.PositionId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func sovView(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozView(x uint64) (n int) {
	return sovView(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthorizeAndBuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeAndBuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeAndBuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPlan == nil {
				m.TransactionPlan = &v1alpha1.TransactionPlan{}
			}
			if err := m.TransactionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationData == nil {
				m.AuthorizationData = &v1alpha1.AuthorizationData{}
			}
			if err := m.AuthorizationData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAndBuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeAndBuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeAndBuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1alpha1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1alpha1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v1alpha11.TransactionId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionHeight", wireType)
			}
			m.DetectionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DetectionHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPlannerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPlannerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryHeight", wireType)
			}
			m.ExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &v1alpha12.Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &v1alpha1.MemoPlaintext{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &v1alpha13.AddressIndex{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &TransactionPlannerRequest_Output{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swaps = append(m.Swaps, &TransactionPlannerRequest_Swap{})
			if err := m.Swaps[len(m.Swaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapClaims = append(m.SwapClaims, &TransactionPlannerRequest_SwapClaim{})
			if err := m.SwapClaims[len(m.SwapClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &TransactionPlannerRequest_Delegate{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Undelegations = append(m.Undelegations, &TransactionPlannerRequest_Undelegate{})
			if err := m.Undelegations[len(m.Undelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcRelayActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcRelayActions = append(m.IbcRelayActions, &v1alpha14.IbcRelay{})
			if err := m.IbcRelayActions[len(m.IbcRelayActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ics20Withdrawals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ics20Withdrawals = append(m.Ics20Withdrawals, &v1alpha14.Ics20Withdrawal{})
			if err := m.Ics20Withdrawals[len(m.Ics20Withdrawals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionOpens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionOpens = append(m.PositionOpens, &TransactionPlannerRequest_PositionOpen{})
			if err := m.PositionOpens[len(m.PositionOpens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionCloses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionCloses = append(m.PositionCloses, &TransactionPlannerRequest_PositionClose{})
			if err := m.PositionCloses[len(m.PositionCloses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionWithdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionWithdraws = append(m.PositionWithdraws, &TransactionPlannerRequest_PositionWithdraw{})
			if err := m.PositionWithdraws[len(m.PositionWithdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v1alpha15.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha13.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Swap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Swap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Swap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v1alpha15.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetAsset == nil {
				m.TargetAsset = &v1alpha15.AssetId{}
			}
			if err := m.TargetAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &v1alpha12.Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimAddress == nil {
				m.ClaimAddress = &v1alpha13.Address{}
			}
			if err := m.ClaimAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_SwapClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapCommitment == nil {
				m.SwapCommitment = &v1alpha16.StateCommitment{}
			}
			if err := m.SwapCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Delegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &v1alpha17.Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateData == nil {
				m.RateData = &v1alpha18.RateData{}
			}
			if err := m.RateData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Undelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Undelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Undelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v1alpha15.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateData == nil {
				m.RateData = &v1alpha18.RateData{}
			}
			if err := m.RateData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_PositionOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &v1alpha19.Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_PositionClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionId == nil {
				m.PositionId = &v1alpha19.PositionId{}
			}
			if err := m.PositionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_PositionWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionId == nil {
				m.PositionId = &v1alpha19.PositionId{}
			}
			if err := m.PositionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reserves == nil {
				m.Reserves = &v1alpha19.Reserves{}
			}
			if err := m.Reserves.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v1alpha19.TradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPlannerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPlannerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &v1alpha1.TransactionPlan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha13.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha13.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletId == nil {
				m.WalletId = &v1alpha13.WalletId{}
			}
			if err := m.WalletId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha13.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha13.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha13.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayConfirm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayConfirm = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha13.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountFilter == nil {
				m.AccountFilter = &v1alpha13.AddressIndex{}
			}
			if err := m.AccountFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIdFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetIdFilter == nil {
				m.AssetIdFilter = &v1alpha15.AssetId{}
			}
			if err := m.AssetIdFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &v1alpha13.AddressIndex{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &v1alpha15.Value{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullSyncHeight", wireType)
			}
			m.FullSyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullSyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialSyncHeight", wireType)
			}
			m.PartialSyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartialSyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchingUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CatchingUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestKnownBlockHeight", wireType)
			}
			m.LatestKnownBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestKnownBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullSyncHeight", wireType)
			}
			m.FullSyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullSyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialSyncHeight", wireType)
			}
			m.PartialSyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartialSyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSpent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSpent = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &v1alpha15.AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha13.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountToSpend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AmountToSpend == nil {
				m.AmountToSpend = &v1alpha17.Amount{}
			}
			if err := m.AmountToSpend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesForVotingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesForVotingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesForVotingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotableAtHeight", wireType)
			}
			m.VotableAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotableAtHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha13.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoteCommitments = append(m.NoteCommitments, &v1alpha16.StateCommitment{})
			if err := m.NoteCommitments[len(m.NoteCommitments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPlan == nil {
				m.TransactionPlan = &v1alpha1.TransactionPlan{}
			}
			if err := m.TransactionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessData == nil {
				m.WitnessData = &v1alpha1.WitnessData{}
			}
			if err := m.WitnessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessAndBuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessAndBuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessAndBuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPlan == nil {
				m.TransactionPlan = &v1alpha1.TransactionPlan{}
			}
			if err := m.TransactionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationData == nil {
				m.AuthorizationData = &v1alpha1.AuthorizationData{}
			}
			if err := m.AuthorizationData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessAndBuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessAndBuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessAndBuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1alpha1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filtered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Filtered = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSpecificDenominations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeSpecificDenominations = append(m.IncludeSpecificDenominations, &v1alpha15.Denom{})
			if err := m.IncludeSpecificDenominations[len(m.IncludeSpecificDenominations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeDelegationTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeDelegationTokens = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeUnbondingTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeUnbondingTokens = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeLpNfts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeLpNfts = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeProposalNfts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeProposalNfts = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeVotingReceiptTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeVotingReceiptTokens = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomMetadata == nil {
				m.DenomMetadata = &v1alpha15.DenomMetadata{}
			}
			if err := m.DenomMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &v1alpha110.AppParameters{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPrices == nil {
				m.GasPrices = &v1alpha12.GasPrices{}
			}
			if err := m.GasPrices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMDParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMDParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMDParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMDParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMDParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMDParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &v1alpha111.FmdParameters{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoteByCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoteByCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoteByCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &v1alpha16.StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoteByCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoteByCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoteByCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendableNote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpendableNote == nil {
				m.SpendableNote = &SpendableNoteRecord{}
			}
			if err := m.SpendableNote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapByCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapByCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapByCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapCommitment == nil {
				m.SwapCommitment = &v1alpha16.StateCommitment{}
			}
			if err := m.SwapCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapByCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapByCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapByCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &SwapRecord{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnclaimedSwapsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnclaimedSwapsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnclaimedSwapsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnclaimedSwapsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnclaimedSwapsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnclaimedSwapsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &SwapRecord{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullifierStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullifierStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullifierStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v1alpha112.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullifierStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullifierStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullifierStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfoByHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfoByHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfoByHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v1alpha11.TransactionId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v1alpha11.TransactionId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1alpha1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perspective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Perspective == nil {
				m.Perspective = &v1alpha1.TransactionPerspective{}
			}
			if err := m.Perspective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.View == nil {
				m.View = &v1alpha1.TransactionView{}
			}
			if err := m.View.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxInfo == nil {
				m.TxInfo = &TransactionInfo{}
			}
			if err := m.TxInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfoByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfoByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfoByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxInfo == nil {
				m.TxInfo = &TransactionInfo{}
			}
			if err := m.TxInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteRecord == nil {
				m.NoteRecord = &SpendableNoteRecord{}
			}
			if err := m.NoteRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesForVotingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesForVotingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesForVotingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteRecord == nil {
				m.NoteRecord = &SpendableNoteRecord{}
			}
			if err := m.NoteRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v1alpha13.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendableNoteRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendableNoteRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendableNoteRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &v1alpha16.StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Note == nil {
				m.Note = &v1alpha113.Note{}
			}
			if err := m.Note.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha13.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v1alpha112.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightCreated", wireType)
			}
			m.HeightCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightCreated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightSpent", wireType)
			}
			m.HeightSpent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightSpent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &v1alpha112.CommitmentSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapCommitment == nil {
				m.SwapCommitment = &v1alpha16.StateCommitment{}
			}
			if err := m.SwapCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &v1alpha19.SwapPlaintext{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v1alpha112.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputData == nil {
				m.OutputData = &v1alpha19.BatchSwapOutputData{}
			}
			if err := m.OutputData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightClaimed", wireType)
			}
			m.HeightClaimed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightClaimed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &v1alpha112.CommitmentSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnedPositionIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnedPositionIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnedPositionIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionState == nil {
				m.PositionState = &v1alpha19.PositionState{}
			}
			if err := m.PositionState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v1alpha19.TradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnedPositionIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnedPositionIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnedPositionIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionId == nil {
				m.PositionId = &v1alpha19.PositionId{}
			}
			if err := m.PositionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipView(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowView
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthView
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupView
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthView
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthView        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowView          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupView = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/view/v1alpha1/view.proto

package penumbra_view_v1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	v1alpha12 "penumbra/core/chain/v1alpha1"
	v1alpha11 "penumbra/core/crypto/v1alpha1"
	v1alpha13 "penumbra/core/dex/v1alpha1"
	v1alpha1 "penumbra/core/transaction/v1alpha1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BroadcastTransactionRequest struct {
	// The transaction to broadcast.
	Transaction *v1alpha1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// If true, wait for the view service to detect the transaction during sync.
	AwaitDetection bool `protobuf:"varint,2,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *BroadcastTransactionRequest) Reset()         { *m = BroadcastTransactionRequest{} }
func (m *BroadcastTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastTransactionRequest) ProtoMessage()    {}
func (*BroadcastTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{0}
}
func (m *BroadcastTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTransactionRequest.Merge(m, src)
}
func (m *BroadcastTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTransactionRequest proto.InternalMessageInfo

func (m *BroadcastTransactionRequest) GetTransaction() *v1alpha1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *BroadcastTransactionRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type BroadcastTransactionResponse struct {
	// The hash of the transaction that was broadcast.
	Id *v1alpha1.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BroadcastTransactionResponse) Reset()         { *m = BroadcastTransactionResponse{} }
func (m *BroadcastTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastTransactionResponse) ProtoMessage()    {}
func (*BroadcastTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{1}
}
func (m *BroadcastTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTransactionResponse.Merge(m, src)
}
func (m *BroadcastTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTransactionResponse proto.InternalMessageInfo

func (m *BroadcastTransactionResponse) GetId() *v1alpha1.Id {
	if m != nil {
		return m.Id
	}
	return nil
}

type TransactionPlannerRequest struct {
	// The expiry height for the requested TransactionPlan
	ExpiryHeight uint64 `protobuf:"varint,1,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	// The fee for the requested TransactionPlan, if any.
	Fee *v1alpha11.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// The memo for the requested TransactionPlan
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// Types that are valid to be assigned to XAccountId:
	//	*TransactionPlannerRequest_AccountId
	XAccountId isTransactionPlannerRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*TransactionPlannerRequest_Token
	XToken isTransactionPlannerRequest_XToken `protobuf_oneof:"_token"`
	// Request contents
	Outputs       []*TransactionPlannerRequest_Output     `protobuf:"bytes,20,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Swaps         []*TransactionPlannerRequest_Swap       `protobuf:"bytes,30,rep,name=swaps,proto3" json:"swaps,omitempty"`
	Delegations   []*TransactionPlannerRequest_Delegate   `protobuf:"bytes,40,rep,name=delegations,proto3" json:"delegations,omitempty"`
	Undelegations []*TransactionPlannerRequest_Undelegate `protobuf:"bytes,50,rep,name=undelegations,proto3" json:"undelegations,omitempty"`
}

func (m *TransactionPlannerRequest) Reset()         { *m = TransactionPlannerRequest{} }
func (m *TransactionPlannerRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest) ProtoMessage()    {}
func (*TransactionPlannerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{2}
}
func (m *TransactionPlannerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest.Merge(m, src)
}
func (m *TransactionPlannerRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest proto.InternalMessageInfo

type isTransactionPlannerRequest_XAccountId interface {
	isTransactionPlannerRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTransactionPlannerRequest_XToken interface {
	isTransactionPlannerRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransactionPlannerRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type TransactionPlannerRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*TransactionPlannerRequest_AccountId) isTransactionPlannerRequest_XAccountId() {}
func (*TransactionPlannerRequest_Token) isTransactionPlannerRequest_XToken()         {}

func (m *TransactionPlannerRequest) GetXAccountId() isTransactionPlannerRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *TransactionPlannerRequest) GetXToken() isTransactionPlannerRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *TransactionPlannerRequest) GetExpiryHeight() uint64 {
	if m != nil {
		return m.ExpiryHeight
	}
	return 0
}

func (m *TransactionPlannerRequest) GetFee() *v1alpha11.Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *TransactionPlannerRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *TransactionPlannerRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*TransactionPlannerRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *TransactionPlannerRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*TransactionPlannerRequest_Token); ok {
		return x.Token
	}
	return nil
}

func (m *TransactionPlannerRequest) GetOutputs() []*TransactionPlannerRequest_Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TransactionPlannerRequest) GetSwaps() []*TransactionPlannerRequest_Swap {
	if m != nil {
		return m.Swaps
	}
	return nil
}

func (m *TransactionPlannerRequest) GetDelegations() []*TransactionPlannerRequest_Delegate {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *TransactionPlannerRequest) GetUndelegations() []*TransactionPlannerRequest_Undelegate {
	if m != nil {
		return m.Undelegations
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransactionPlannerRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransactionPlannerRequest_AccountId)(nil),
		(*TransactionPlannerRequest_Token)(nil),
	}
}

// Request message subtypes
type TransactionPlannerRequest_Output struct {
	Value   *v1alpha11.Value   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Address *v1alpha11.Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *TransactionPlannerRequest_Output) Reset()         { *m = TransactionPlannerRequest_Output{} }
func (m *TransactionPlannerRequest_Output) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Output) ProtoMessage()    {}
func (*TransactionPlannerRequest_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{2, 0}
}
func (m *TransactionPlannerRequest_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Output.Merge(m, src)
}
func (m *TransactionPlannerRequest_Output) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Output proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Output) GetValue() *v1alpha11.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionPlannerRequest_Output) GetAddress() *v1alpha11.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type TransactionPlannerRequest_Swap struct {
	Value       *v1alpha11.Value   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	TargetAsset *v1alpha11.AssetId `protobuf:"bytes,2,opt,name=target_asset,json=targetAsset,proto3" json:"target_asset,omitempty"`
	Fee         *v1alpha11.Fee     `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *TransactionPlannerRequest_Swap) Reset()         { *m = TransactionPlannerRequest_Swap{} }
func (m *TransactionPlannerRequest_Swap) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Swap) ProtoMessage()    {}
func (*TransactionPlannerRequest_Swap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{2, 1}
}
func (m *TransactionPlannerRequest_Swap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Swap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Swap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Swap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Swap.Merge(m, src)
}
func (m *TransactionPlannerRequest_Swap) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Swap) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Swap.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Swap proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Swap) GetValue() *v1alpha11.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionPlannerRequest_Swap) GetTargetAsset() *v1alpha11.AssetId {
	if m != nil {
		return m.TargetAsset
	}
	return nil
}

func (m *TransactionPlannerRequest_Swap) GetFee() *v1alpha11.Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

type TransactionPlannerRequest_Delegate struct {
	Amount      *v1alpha11.Amount      `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	IdentityKey *v1alpha11.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *TransactionPlannerRequest_Delegate) Reset()         { *m = TransactionPlannerRequest_Delegate{} }
func (m *TransactionPlannerRequest_Delegate) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Delegate) ProtoMessage()    {}
func (*TransactionPlannerRequest_Delegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{2, 2}
}
func (m *TransactionPlannerRequest_Delegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Delegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Delegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Delegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Delegate.Merge(m, src)
}
func (m *TransactionPlannerRequest_Delegate) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Delegate) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Delegate.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Delegate proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Delegate) GetAmount() *v1alpha11.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransactionPlannerRequest_Delegate) GetIdentityKey() *v1alpha11.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

type TransactionPlannerRequest_Undelegate struct {
	Value *v1alpha11.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TransactionPlannerRequest_Undelegate) Reset()         { *m = TransactionPlannerRequest_Undelegate{} }
func (m *TransactionPlannerRequest_Undelegate) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Undelegate) ProtoMessage()    {}
func (*TransactionPlannerRequest_Undelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{2, 3}
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Undelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Undelegate.Merge(m, src)
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Undelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Undelegate.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Undelegate proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Undelegate) GetValue() *v1alpha11.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type TransactionPlannerResponse struct {
	Plan *v1alpha1.TransactionPlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *TransactionPlannerResponse) Reset()         { *m = TransactionPlannerResponse{} }
func (m *TransactionPlannerResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerResponse) ProtoMessage()    {}
func (*TransactionPlannerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{3}
}
func (m *TransactionPlannerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerResponse.Merge(m, src)
}
func (m *TransactionPlannerResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerResponse proto.InternalMessageInfo

func (m *TransactionPlannerResponse) GetPlan() *v1alpha1.TransactionPlan {
	if m != nil {
		return m.Plan
	}
	return nil
}

type AddressByIndexRequest struct {
	AddressIndex *v1alpha11.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *AddressByIndexRequest) Reset()         { *m = AddressByIndexRequest{} }
func (m *AddressByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*AddressByIndexRequest) ProtoMessage()    {}
func (*AddressByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{4}
}
func (m *AddressByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressByIndexRequest.Merge(m, src)
}
func (m *AddressByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddressByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddressByIndexRequest proto.InternalMessageInfo

func (m *AddressByIndexRequest) GetAddressIndex() *v1alpha11.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type AddressByIndexResponse struct {
	Address *v1alpha11.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AddressByIndexResponse) Reset()         { *m = AddressByIndexResponse{} }
func (m *AddressByIndexResponse) String() string { return proto.CompactTextString(m) }
func (*AddressByIndexResponse) ProtoMessage()    {}
func (*AddressByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{5}
}
func (m *AddressByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressByIndexResponse.Merge(m, src)
}
func (m *AddressByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddressByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddressByIndexResponse proto.InternalMessageInfo

func (m *AddressByIndexResponse) GetAddress() *v1alpha11.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type IndexByAddressRequest struct {
	Address *v1alpha11.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IndexByAddressRequest) Reset()         { *m = IndexByAddressRequest{} }
func (m *IndexByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*IndexByAddressRequest) ProtoMessage()    {}
func (*IndexByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{6}
}
func (m *IndexByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexByAddressRequest.Merge(m, src)
}
func (m *IndexByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *IndexByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndexByAddressRequest proto.InternalMessageInfo

func (m *IndexByAddressRequest) GetAddress() *v1alpha11.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type IndexByAddressResponse struct {
	// Types that are valid to be assigned to XAddressIndex:
	//	*IndexByAddressResponse_AddressIndex
	XAddressIndex isIndexByAddressResponse_XAddressIndex `protobuf_oneof:"_address_index"`
}

func (m *IndexByAddressResponse) Reset()         { *m = IndexByAddressResponse{} }
func (m *IndexByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*IndexByAddressResponse) ProtoMessage()    {}
func (*IndexByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{7}
}
func (m *IndexByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexByAddressResponse.Merge(m, src)
}
func (m *IndexByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *IndexByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndexByAddressResponse proto.InternalMessageInfo

type isIndexByAddressResponse_XAddressIndex interface {
	isIndexByAddressResponse_XAddressIndex()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IndexByAddressResponse_AddressIndex struct {
	AddressIndex *v1alpha11.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3,oneof" json:"address_index,omitempty"`
}

func (*IndexByAddressResponse_AddressIndex) isIndexByAddressResponse_XAddressIndex() {}

func (m *IndexByAddressResponse) GetXAddressIndex() isIndexByAddressResponse_XAddressIndex {
	if m != nil {
		return m.XAddressIndex
	}
	return nil
}

func (m *IndexByAddressResponse) GetAddressIndex() *v1alpha11.AddressIndex {
	if x, ok := m.GetXAddressIndex().(*IndexByAddressResponse_AddressIndex); ok {
		return x.AddressIndex
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IndexByAddressResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IndexByAddressResponse_AddressIndex)(nil),
	}
}

type EphemeralAddressRequest struct {
	AddressIndex *v1alpha11.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *EphemeralAddressRequest) Reset()         { *m = EphemeralAddressRequest{} }
func (m *EphemeralAddressRequest) String() string { return proto.CompactTextString(m) }
func (*EphemeralAddressRequest) ProtoMessage()    {}
func (*EphemeralAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{8}
}
func (m *EphemeralAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EphemeralAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EphemeralAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralAddressRequest.Merge(m, src)
}
func (m *EphemeralAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralAddressRequest proto.InternalMessageInfo

func (m *EphemeralAddressRequest) GetAddressIndex() *v1alpha11.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type EphemeralAddressResponse struct {
	Address *v1alpha11.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EphemeralAddressResponse) Reset()         { *m = EphemeralAddressResponse{} }
func (m *EphemeralAddressResponse) String() string { return proto.CompactTextString(m) }
func (*EphemeralAddressResponse) ProtoMessage()    {}
func (*EphemeralAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{9}
}
func (m *EphemeralAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EphemeralAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EphemeralAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralAddressResponse.Merge(m, src)
}
func (m *EphemeralAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralAddressResponse proto.InternalMessageInfo

func (m *EphemeralAddressResponse) GetAddress() *v1alpha11.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type BalanceByAddressRequest struct {
	Address *v1alpha11.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *BalanceByAddressRequest) Reset()         { *m = BalanceByAddressRequest{} }
func (m *BalanceByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*BalanceByAddressRequest) ProtoMessage()    {}
func (*BalanceByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{10}
}
func (m *BalanceByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceByAddressRequest.Merge(m, src)
}
func (m *BalanceByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *BalanceByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceByAddressRequest proto.InternalMessageInfo

func (m *BalanceByAddressRequest) GetAddress() *v1alpha11.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type BalanceByAddressResponse struct {
	Asset  *v1alpha11.AssetId `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount *v1alpha11.Amount  `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *BalanceByAddressResponse) Reset()         { *m = BalanceByAddressResponse{} }
func (m *BalanceByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*BalanceByAddressResponse) ProtoMessage()    {}
func (*BalanceByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{11}
}
func (m *BalanceByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceByAddressResponse.Merge(m, src)
}
func (m *BalanceByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *BalanceByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceByAddressResponse proto.InternalMessageInfo

func (m *BalanceByAddressResponse) GetAsset() *v1alpha11.AssetId {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *BalanceByAddressResponse) GetAmount() *v1alpha11.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

// Scaffolding for bearer-token authentication for the ViewService.
// The `account_id` and `token` fields are both optional,
// and numbered as 14 & 15 throughout the view service protocol.
type ViewAuthToken struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *ViewAuthToken) Reset()         { *m = ViewAuthToken{} }
func (m *ViewAuthToken) String() string { return proto.CompactTextString(m) }
func (*ViewAuthToken) ProtoMessage()    {}
func (*ViewAuthToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{12}
}
func (m *ViewAuthToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewAuthToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewAuthToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewAuthToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewAuthToken.Merge(m, src)
}
func (m *ViewAuthToken) XXX_Size() int {
	return m.Size()
}
func (m *ViewAuthToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewAuthToken.DiscardUnknown(m)
}

var xxx_messageInfo_ViewAuthToken proto.InternalMessageInfo

func (m *ViewAuthToken) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type ViewAuthRequest struct {
	Fvk *v1alpha11.FullViewingKey `protobuf:"bytes,1,opt,name=fvk,proto3" json:"fvk,omitempty"`
}

func (m *ViewAuthRequest) Reset()         { *m = ViewAuthRequest{} }
func (m *ViewAuthRequest) String() string { return proto.CompactTextString(m) }
func (*ViewAuthRequest) ProtoMessage()    {}
func (*ViewAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{13}
}
func (m *ViewAuthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewAuthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewAuthRequest.Merge(m, src)
}
func (m *ViewAuthRequest) XXX_Size() int {
	return m.Size()
}
func (m *ViewAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewAuthRequest proto.InternalMessageInfo

func (m *ViewAuthRequest) GetFvk() *v1alpha11.FullViewingKey {
	if m != nil {
		return m.Fvk
	}
	return nil
}

type ViewAuthResponse struct {
	Token *ViewAuthToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ViewAuthResponse) Reset()         { *m = ViewAuthResponse{} }
func (m *ViewAuthResponse) String() string { return proto.CompactTextString(m) }
func (*ViewAuthResponse) ProtoMessage()    {}
func (*ViewAuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{14}
}
func (m *ViewAuthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewAuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewAuthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewAuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewAuthResponse.Merge(m, src)
}
func (m *ViewAuthResponse) XXX_Size() int {
	return m.Size()
}
func (m *ViewAuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewAuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ViewAuthResponse proto.InternalMessageInfo

func (m *ViewAuthResponse) GetToken() *ViewAuthToken {
	if m != nil {
		return m.Token
	}
	return nil
}

// Requests sync status of the view service.
type StatusRequest struct {
	// Types that are valid to be assigned to XAccountId:
	//	*StatusRequest_AccountId
	XAccountId isStatusRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*StatusRequest_Token
	XToken isStatusRequest_XToken `protobuf_oneof:"_token"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{15}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

type isStatusRequest_XAccountId interface {
	isStatusRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isStatusRequest_XToken interface {
	isStatusRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type StatusRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type StatusRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*StatusRequest_AccountId) isStatusRequest_XAccountId() {}
func (*StatusRequest_Token) isStatusRequest_XToken()         {}

func (m *StatusRequest) GetXAccountId() isStatusRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *StatusRequest) GetXToken() isStatusRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *StatusRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*StatusRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *StatusRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*StatusRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StatusRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StatusRequest_AccountId)(nil),
		(*StatusRequest_Token)(nil),
	}
}

// Returns the status of the view service and whether it is synchronized with the chain state.
type StatusResponse struct {
	// The height the view service has synchronized to so far
	SyncHeight uint64 `protobuf:"varint,1,opt,name=sync_height,json=syncHeight,proto3" json:"sync_height,omitempty"`
	// Whether the view service is catching up with the chain state
	CatchingUp bool `protobuf:"varint,2,opt,name=catching_up,json=catchingUp,proto3" json:"catching_up,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{16}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetSyncHeight() uint64 {
	if m != nil {
		return m.SyncHeight
	}
	return 0
}

func (m *StatusResponse) GetCatchingUp() bool {
	if m != nil {
		return m.CatchingUp
	}
	return false
}

// Requests streaming updates on the sync height until the view service is synchronized.
type StatusStreamRequest struct {
	// Types that are valid to be assigned to XAccountId:
	//	*StatusStreamRequest_AccountId
	XAccountId isStatusStreamRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*StatusStreamRequest_Token
	XToken isStatusStreamRequest_XToken `protobuf_oneof:"_token"`
}

func (m *StatusStreamRequest) Reset()         { *m = StatusStreamRequest{} }
func (m *StatusStreamRequest) String() string { return proto.CompactTextString(m) }
func (*StatusStreamRequest) ProtoMessage()    {}
func (*StatusStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{17}
}
func (m *StatusStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusStreamRequest.Merge(m, src)
}
func (m *StatusStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusStreamRequest proto.InternalMessageInfo

type isStatusStreamRequest_XAccountId interface {
	isStatusStreamRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isStatusStreamRequest_XToken interface {
	isStatusStreamRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type StatusStreamRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type StatusStreamRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*StatusStreamRequest_AccountId) isStatusStreamRequest_XAccountId() {}
func (*StatusStreamRequest_Token) isStatusStreamRequest_XToken()         {}

func (m *StatusStreamRequest) GetXAccountId() isStatusStreamRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *StatusStreamRequest) GetXToken() isStatusStreamRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *StatusStreamRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*StatusStreamRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *StatusStreamRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*StatusStreamRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StatusStreamRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StatusStreamRequest_AccountId)(nil),
		(*StatusStreamRequest_Token)(nil),
	}
}

// A streaming sync status update
type StatusStreamResponse struct {
	LatestKnownBlockHeight uint64 `protobuf:"varint,1,opt,name=latest_known_block_height,json=latestKnownBlockHeight,proto3" json:"latest_known_block_height,omitempty"`
	SyncHeight             uint64 `protobuf:"varint,2,opt,name=sync_height,json=syncHeight,proto3" json:"sync_height,omitempty"`
}

func (m *StatusStreamResponse) Reset()         { *m = StatusStreamResponse{} }
func (m *StatusStreamResponse) String() string { return proto.CompactTextString(m) }
func (*StatusStreamResponse) ProtoMessage()    {}
func (*StatusStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{18}
}
func (m *StatusStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusStreamResponse.Merge(m, src)
}
func (m *StatusStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusStreamResponse proto.InternalMessageInfo

func (m *StatusStreamResponse) GetLatestKnownBlockHeight() uint64 {
	if m != nil {
		return m.LatestKnownBlockHeight
	}
	return 0
}

func (m *StatusStreamResponse) GetSyncHeight() uint64 {
	if m != nil {
		return m.SyncHeight
	}
	return 0
}

// A query for notes known by the view service.
//
// This message uses the fact that all proto fields are optional
// to allow various filtering on the returned notes.
type NotesRequest struct {
	// If set, return spent notes as well as unspent notes.
	IncludeSpent bool `protobuf:"varint,2,opt,name=include_spent,json=includeSpent,proto3" json:"include_spent,omitempty"`
	// If set, only return notes with the specified asset id.
	AssetId *v1alpha11.AssetId `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// If set, only return notes with the specified address incore.dex.v1alpha1.
	AddressIndex *v1alpha11.AddressIndex `protobuf:"bytes,4,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// If set, stop returning notes once the total exceeds this amount.
	//
	// Ignored if `asset_id` is unset or if `include_spent` is set.
	AmountToSpend uint64 `protobuf:"varint,5,opt,name=amount_to_spend,json=amountToSpend,proto3" json:"amount_to_spend,omitempty"`
	// Types that are valid to be assigned to XAccountId:
	//	*NotesRequest_AccountId
	XAccountId isNotesRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*NotesRequest_Token
	XToken isNotesRequest_XToken `protobuf_oneof:"_token"`
}

func (m *NotesRequest) Reset()         { *m = NotesRequest{} }
func (m *NotesRequest) String() string { return proto.CompactTextString(m) }
func (*NotesRequest) ProtoMessage()    {}
func (*NotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{19}
}
func (m *NotesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesRequest.Merge(m, src)
}
func (m *NotesRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotesRequest proto.InternalMessageInfo

type isNotesRequest_XAccountId interface {
	isNotesRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isNotesRequest_XToken interface {
	isNotesRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NotesRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type NotesRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*NotesRequest_AccountId) isNotesRequest_XAccountId() {}
func (*NotesRequest_Token) isNotesRequest_XToken()         {}

func (m *NotesRequest) GetXAccountId() isNotesRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *NotesRequest) GetXToken() isNotesRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *NotesRequest) GetIncludeSpent() bool {
	if m != nil {
		return m.IncludeSpent
	}
	return false
}

func (m *NotesRequest) GetAssetId() *v1alpha11.AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

func (m *NotesRequest) GetAddressIndex() *v1alpha11.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *NotesRequest) GetAmountToSpend() uint64 {
	if m != nil {
		return m.AmountToSpend
	}
	return 0
}

func (m *NotesRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*NotesRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *NotesRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*NotesRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NotesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NotesRequest_AccountId)(nil),
		(*NotesRequest_Token)(nil),
	}
}

// A query for notes to be used for voting on a proposal.
type NotesForVotingRequest struct {
	// The starting height of the proposal.
	VotableAtHeight uint64 `protobuf:"varint,1,opt,name=votable_at_height,json=votableAtHeight,proto3" json:"votable_at_height,omitempty"`
	// If set, only return notes with the specified asset id.
	AddressIndex *v1alpha11.AddressIndex `protobuf:"bytes,3,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// Types that are valid to be assigned to XAccountId:
	//	*NotesForVotingRequest_AccountId
	XAccountId isNotesForVotingRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*NotesForVotingRequest_Token
	XToken isNotesForVotingRequest_XToken `protobuf_oneof:"_token"`
}

func (m *NotesForVotingRequest) Reset()         { *m = NotesForVotingRequest{} }
func (m *NotesForVotingRequest) String() string { return proto.CompactTextString(m) }
func (*NotesForVotingRequest) ProtoMessage()    {}
func (*NotesForVotingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{20}
}
func (m *NotesForVotingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesForVotingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesForVotingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesForVotingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesForVotingRequest.Merge(m, src)
}
func (m *NotesForVotingRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotesForVotingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesForVotingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotesForVotingRequest proto.InternalMessageInfo

type isNotesForVotingRequest_XAccountId interface {
	isNotesForVotingRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isNotesForVotingRequest_XToken interface {
	isNotesForVotingRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NotesForVotingRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type NotesForVotingRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*NotesForVotingRequest_AccountId) isNotesForVotingRequest_XAccountId() {}
func (*NotesForVotingRequest_Token) isNotesForVotingRequest_XToken()         {}

func (m *NotesForVotingRequest) GetXAccountId() isNotesForVotingRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *NotesForVotingRequest) GetXToken() isNotesForVotingRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *NotesForVotingRequest) GetVotableAtHeight() uint64 {
	if m != nil {
		return m.VotableAtHeight
	}
	return 0
}

func (m *NotesForVotingRequest) GetAddressIndex() *v1alpha11.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *NotesForVotingRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*NotesForVotingRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *NotesForVotingRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*NotesForVotingRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NotesForVotingRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NotesForVotingRequest_AccountId)(nil),
		(*NotesForVotingRequest_Token)(nil),
	}
}

type WitnessRequest struct {
	// The note commitments to obtain auth paths for.
	NoteCommitments []*v1alpha11.StateCommitment `protobuf:"bytes,2,rep,name=note_commitments,json=noteCommitments,proto3" json:"note_commitments,omitempty"`
	// The transaction plan to witness
	TransactionPlan *v1alpha1.TransactionPlan `protobuf:"bytes,3,opt,name=transaction_plan,json=transactionPlan,proto3" json:"transaction_plan,omitempty"`
	// Types that are valid to be assigned to XAccountId:
	//	*WitnessRequest_AccountId
	XAccountId isWitnessRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*WitnessRequest_Token
	XToken isWitnessRequest_XToken `protobuf_oneof:"_token"`
}

func (m *WitnessRequest) Reset()         { *m = WitnessRequest{} }
func (m *WitnessRequest) String() string { return proto.CompactTextString(m) }
func (*WitnessRequest) ProtoMessage()    {}
func (*WitnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{21}
}
func (m *WitnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessRequest.Merge(m, src)
}
func (m *WitnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *WitnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessRequest proto.InternalMessageInfo

type isWitnessRequest_XAccountId interface {
	isWitnessRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWitnessRequest_XToken interface {
	isWitnessRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WitnessRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type WitnessRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*WitnessRequest_AccountId) isWitnessRequest_XAccountId() {}
func (*WitnessRequest_Token) isWitnessRequest_XToken()         {}

func (m *WitnessRequest) GetXAccountId() isWitnessRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *WitnessRequest) GetXToken() isWitnessRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *WitnessRequest) GetNoteCommitments() []*v1alpha11.StateCommitment {
	if m != nil {
		return m.NoteCommitments
	}
	return nil
}

func (m *WitnessRequest) GetTransactionPlan() *v1alpha1.TransactionPlan {
	if m != nil {
		return m.TransactionPlan
	}
	return nil
}

func (m *WitnessRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*WitnessRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *WitnessRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*WitnessRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WitnessRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WitnessRequest_AccountId)(nil),
		(*WitnessRequest_Token)(nil),
	}
}

type WitnessResponse struct {
	WitnessData *v1alpha1.WitnessData `protobuf:"bytes,1,opt,name=witness_data,json=witnessData,proto3" json:"witness_data,omitempty"`
}

func (m *WitnessResponse) Reset()         { *m = WitnessResponse{} }
func (m *WitnessResponse) String() string { return proto.CompactTextString(m) }
func (*WitnessResponse) ProtoMessage()    {}
func (*WitnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{22}
}
func (m *WitnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessResponse.Merge(m, src)
}
func (m *WitnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *WitnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessResponse proto.InternalMessageInfo

func (m *WitnessResponse) GetWitnessData() *v1alpha1.WitnessData {
	if m != nil {
		return m.WitnessData
	}
	return nil
}

// Requests all assets known to the view service.
type AssetsRequest struct {
	// If set to false (default), returns all assets, regardless of whether the rest of the fields of
	// the request indicate a filter.
	Filtered bool `protobuf:"varint,1,opt,name=filtered,proto3" json:"filtered,omitempty"`
	// Include these specific denominations in the response.
	IncludeSpecificDenominations []*v1alpha11.Denom `protobuf:"bytes,2,rep,name=include_specific_denominations,json=includeSpecificDenominations,proto3" json:"include_specific_denominations,omitempty"`
	// Include all delegation tokens, to any validator, in the response.
	IncludeDelegationTokens bool `protobuf:"varint,3,opt,name=include_delegation_tokens,json=includeDelegationTokens,proto3" json:"include_delegation_tokens,omitempty"`
	// Include all unbonding tokens, from any validator, in the response.
	IncludeUnbondingTokens bool `protobuf:"varint,4,opt,name=include_unbonding_tokens,json=includeUnbondingTokens,proto3" json:"include_unbonding_tokens,omitempty"`
	// Include all LP NFTs in the response.
	IncludeLpNfts bool `protobuf:"varint,5,opt,name=include_lp_nfts,json=includeLpNfts,proto3" json:"include_lp_nfts,omitempty"`
	// Include all proposal NFTs in the response.
	IncludeProposalNfts bool `protobuf:"varint,6,opt,name=include_proposal_nfts,json=includeProposalNfts,proto3" json:"include_proposal_nfts,omitempty"`
	// Include all voting receipt tokens in the response.
	IncludeVotingReceiptTokens bool `protobuf:"varint,7,opt,name=include_voting_receipt_tokens,json=includeVotingReceiptTokens,proto3" json:"include_voting_receipt_tokens,omitempty"`
}

func (m *AssetsRequest) Reset()         { *m = AssetsRequest{} }
func (m *AssetsRequest) String() string { return proto.CompactTextString(m) }
func (*AssetsRequest) ProtoMessage()    {}
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{23}
}
func (m *AssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsRequest.Merge(m, src)
}
func (m *AssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsRequest proto.InternalMessageInfo

func (m *AssetsRequest) GetFiltered() bool {
	if m != nil {
		return m.Filtered
	}
	return false
}

func (m *AssetsRequest) GetIncludeSpecificDenominations() []*v1alpha11.Denom {
	if m != nil {
		return m.IncludeSpecificDenominations
	}
	return nil
}

func (m *AssetsRequest) GetIncludeDelegationTokens() bool {
	if m != nil {
		return m.IncludeDelegationTokens
	}
	return false
}

func (m *AssetsRequest) GetIncludeUnbondingTokens() bool {
	if m != nil {
		return m.IncludeUnbondingTokens
	}
	return false
}

func (m *AssetsRequest) GetIncludeLpNfts() bool {
	if m != nil {
		return m.IncludeLpNfts
	}
	return false
}

func (m *AssetsRequest) GetIncludeProposalNfts() bool {
	if m != nil {
		return m.IncludeProposalNfts
	}
	return false
}

func (m *AssetsRequest) GetIncludeVotingReceiptTokens() bool {
	if m != nil {
		return m.IncludeVotingReceiptTokens
	}
	return false
}

// Requests all assets known to the view service.
type AssetsResponse struct {
	Asset *v1alpha11.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (m *AssetsResponse) Reset()         { *m = AssetsResponse{} }
func (m *AssetsResponse) String() string { return proto.CompactTextString(m) }
func (*AssetsResponse) ProtoMessage()    {}
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{24}
}
func (m *AssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsResponse.Merge(m, src)
}
func (m *AssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsResponse proto.InternalMessageInfo

func (m *AssetsResponse) GetAsset() *v1alpha11.Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

// Requests the current chain parameters from the view service.
type ChainParametersRequest struct {
}

func (m *ChainParametersRequest) Reset()         { *m = ChainParametersRequest{} }
func (m *ChainParametersRequest) String() string { return proto.CompactTextString(m) }
func (*ChainParametersRequest) ProtoMessage()    {}
func (*ChainParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{25}
}
func (m *ChainParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParametersRequest.Merge(m, src)
}
func (m *ChainParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChainParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParametersRequest proto.InternalMessageInfo

type ChainParametersResponse struct {
	Parameters *v1alpha12.ChainParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *ChainParametersResponse) Reset()         { *m = ChainParametersResponse{} }
func (m *ChainParametersResponse) String() string { return proto.CompactTextString(m) }
func (*ChainParametersResponse) ProtoMessage()    {}
func (*ChainParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{26}
}
func (m *ChainParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParametersResponse.Merge(m, src)
}
func (m *ChainParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChainParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParametersResponse proto.InternalMessageInfo

func (m *ChainParametersResponse) GetParameters() *v1alpha12.ChainParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// Requests the current FMD parameters from the view service.
type FMDParametersRequest struct {
}

func (m *FMDParametersRequest) Reset()         { *m = FMDParametersRequest{} }
func (m *FMDParametersRequest) String() string { return proto.CompactTextString(m) }
func (*FMDParametersRequest) ProtoMessage()    {}
func (*FMDParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{27}
}
func (m *FMDParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FMDParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FMDParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FMDParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FMDParametersRequest.Merge(m, src)
}
func (m *FMDParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *FMDParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FMDParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FMDParametersRequest proto.InternalMessageInfo

type FMDParametersResponse struct {
	Parameters *v1alpha12.FmdParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *FMDParametersResponse) Reset()         { *m = FMDParametersResponse{} }
func (m *FMDParametersResponse) String() string { return proto.CompactTextString(m) }
func (*FMDParametersResponse) ProtoMessage()    {}
func (*FMDParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{28}
}
func (m *FMDParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FMDParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FMDParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FMDParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FMDParametersResponse.Merge(m, src)
}
func (m *FMDParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *FMDParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FMDParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FMDParametersResponse proto.InternalMessageInfo

func (m *FMDParametersResponse) GetParameters() *v1alpha12.FmdParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type NoteByCommitmentRequest struct {
	NoteCommitment *v1alpha11.StateCommitment `protobuf:"bytes,2,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// If set to true, waits to return until the requested note is detected.
	AwaitDetection bool `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
	// Types that are valid to be assigned to XAccountId:
	//	*NoteByCommitmentRequest_AccountId
	XAccountId isNoteByCommitmentRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*NoteByCommitmentRequest_Token
	XToken isNoteByCommitmentRequest_XToken `protobuf_oneof:"_token"`
}

func (m *NoteByCommitmentRequest) Reset()         { *m = NoteByCommitmentRequest{} }
func (m *NoteByCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*NoteByCommitmentRequest) ProtoMessage()    {}
func (*NoteByCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{29}
}
func (m *NoteByCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoteByCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoteByCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoteByCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteByCommitmentRequest.Merge(m, src)
}
func (m *NoteByCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoteByCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteByCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoteByCommitmentRequest proto.InternalMessageInfo

type isNoteByCommitmentRequest_XAccountId interface {
	isNoteByCommitmentRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isNoteByCommitmentRequest_XToken interface {
	isNoteByCommitmentRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NoteByCommitmentRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type NoteByCommitmentRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*NoteByCommitmentRequest_AccountId) isNoteByCommitmentRequest_XAccountId() {}
func (*NoteByCommitmentRequest_Token) isNoteByCommitmentRequest_XToken()         {}

func (m *NoteByCommitmentRequest) GetXAccountId() isNoteByCommitmentRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *NoteByCommitmentRequest) GetXToken() isNoteByCommitmentRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *NoteByCommitmentRequest) GetNoteCommitment() *v1alpha11.StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

func (m *NoteByCommitmentRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

func (m *NoteByCommitmentRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*NoteByCommitmentRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *NoteByCommitmentRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*NoteByCommitmentRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NoteByCommitmentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NoteByCommitmentRequest_AccountId)(nil),
		(*NoteByCommitmentRequest_Token)(nil),
	}
}

type NoteByCommitmentResponse struct {
	SpendableNote *SpendableNoteRecord `protobuf:"bytes,1,opt,name=spendable_note,json=spendableNote,proto3" json:"spendable_note,omitempty"`
}

func (m *NoteByCommitmentResponse) Reset()         { *m = NoteByCommitmentResponse{} }
func (m *NoteByCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*NoteByCommitmentResponse) ProtoMessage()    {}
func (*NoteByCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{30}
}
func (m *NoteByCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoteByCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoteByCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoteByCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteByCommitmentResponse.Merge(m, src)
}
func (m *NoteByCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *NoteByCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteByCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NoteByCommitmentResponse proto.InternalMessageInfo

func (m *NoteByCommitmentResponse) GetSpendableNote() *SpendableNoteRecord {
	if m != nil {
		return m.SpendableNote
	}
	return nil
}

type SwapByCommitmentRequest struct {
	SwapCommitment *v1alpha11.StateCommitment `protobuf:"bytes,2,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
	// If set to true, waits to return until the requested swap is detected.
	AwaitDetection bool `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
	// Types that are valid to be assigned to XAccountId:
	//	*SwapByCommitmentRequest_AccountId
	XAccountId isSwapByCommitmentRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*SwapByCommitmentRequest_Token
	XToken isSwapByCommitmentRequest_XToken `protobuf_oneof:"_token"`
}

func (m *SwapByCommitmentRequest) Reset()         { *m = SwapByCommitmentRequest{} }
func (m *SwapByCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*SwapByCommitmentRequest) ProtoMessage()    {}
func (*SwapByCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{31}
}
func (m *SwapByCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapByCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapByCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapByCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapByCommitmentRequest.Merge(m, src)
}
func (m *SwapByCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwapByCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapByCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwapByCommitmentRequest proto.InternalMessageInfo

type isSwapByCommitmentRequest_XAccountId interface {
	isSwapByCommitmentRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSwapByCommitmentRequest_XToken interface {
	isSwapByCommitmentRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SwapByCommitmentRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type SwapByCommitmentRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*SwapByCommitmentRequest_AccountId) isSwapByCommitmentRequest_XAccountId() {}
func (*SwapByCommitmentRequest_Token) isSwapByCommitmentRequest_XToken()         {}

func (m *SwapByCommitmentRequest) GetXAccountId() isSwapByCommitmentRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *SwapByCommitmentRequest) GetXToken() isSwapByCommitmentRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *SwapByCommitmentRequest) GetSwapCommitment() *v1alpha11.StateCommitment {
	if m != nil {
		return m.SwapCommitment
	}
	return nil
}

func (m *SwapByCommitmentRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

func (m *SwapByCommitmentRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*SwapByCommitmentRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *SwapByCommitmentRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*SwapByCommitmentRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SwapByCommitmentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SwapByCommitmentRequest_AccountId)(nil),
		(*SwapByCommitmentRequest_Token)(nil),
	}
}

type SwapByCommitmentResponse struct {
	Swap *SwapRecord `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (m *SwapByCommitmentResponse) Reset()         { *m = SwapByCommitmentResponse{} }
func (m *SwapByCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*SwapByCommitmentResponse) ProtoMessage()    {}
func (*SwapByCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{32}
}
func (m *SwapByCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapByCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapByCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapByCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapByCommitmentResponse.Merge(m, src)
}
func (m *SwapByCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *SwapByCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapByCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwapByCommitmentResponse proto.InternalMessageInfo

func (m *SwapByCommitmentResponse) GetSwap() *SwapRecord {
	if m != nil {
		return m.Swap
	}
	return nil
}

type NullifierStatusRequest struct {
	Nullifier      *v1alpha11.Nullifier `protobuf:"bytes,2,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	AwaitDetection bool                 `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
	// Types that are valid to be assigned to XAccountId:
	//	*NullifierStatusRequest_AccountId
	XAccountId isNullifierStatusRequest_XAccountId `protobuf_oneof:"_account_id"`
	// Types that are valid to be assigned to XToken:
	//	*NullifierStatusRequest_Token
	XToken isNullifierStatusRequest_XToken `protobuf_oneof:"_token"`
}

func (m *NullifierStatusRequest) Reset()         { *m = NullifierStatusRequest{} }
func (m *NullifierStatusRequest) String() string { return proto.CompactTextString(m) }
func (*NullifierStatusRequest) ProtoMessage()    {}
func (*NullifierStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{33}
}
func (m *NullifierStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullifierStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullifierStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullifierStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullifierStatusRequest.Merge(m, src)
}
func (m *NullifierStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *NullifierStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NullifierStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NullifierStatusRequest proto.InternalMessageInfo

type isNullifierStatusRequest_XAccountId interface {
	isNullifierStatusRequest_XAccountId()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isNullifierStatusRequest_XToken interface {
	isNullifierStatusRequest_XToken()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NullifierStatusRequest_AccountId struct {
	AccountId *v1alpha11.AccountID `protobuf:"bytes,14,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
}
type NullifierStatusRequest_Token struct {
	Token *ViewAuthToken `protobuf:"bytes,15,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (*NullifierStatusRequest_AccountId) isNullifierStatusRequest_XAccountId() {}
func (*NullifierStatusRequest_Token) isNullifierStatusRequest_XToken()         {}

func (m *NullifierStatusRequest) GetXAccountId() isNullifierStatusRequest_XAccountId {
	if m != nil {
		return m.XAccountId
	}
	return nil
}
func (m *NullifierStatusRequest) GetXToken() isNullifierStatusRequest_XToken {
	if m != nil {
		return m.XToken
	}
	return nil
}

func (m *NullifierStatusRequest) GetNullifier() *v1alpha11.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *NullifierStatusRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

func (m *NullifierStatusRequest) GetAccountId() *v1alpha11.AccountID {
	if x, ok := m.GetXAccountId().(*NullifierStatusRequest_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (m *NullifierStatusRequest) GetToken() *ViewAuthToken {
	if x, ok := m.GetXToken().(*NullifierStatusRequest_Token); ok {
		return x.Token
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NullifierStatusRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NullifierStatusRequest_AccountId)(nil),
		(*NullifierStatusRequest_Token)(nil),
	}
}

type NullifierStatusResponse struct {
	Spent bool `protobuf:"varint,1,opt,name=spent,proto3" json:"spent,omitempty"`
}

func (m *NullifierStatusResponse) Reset()         { *m = NullifierStatusResponse{} }
func (m *NullifierStatusResponse) String() string { return proto.CompactTextString(m) }
func (*NullifierStatusResponse) ProtoMessage()    {}
func (*NullifierStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{34}
}
func (m *NullifierStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullifierStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullifierStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullifierStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullifierStatusResponse.Merge(m, src)
}
func (m *NullifierStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *NullifierStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NullifierStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NullifierStatusResponse proto.InternalMessageInfo

func (m *NullifierStatusResponse) GetSpent() bool {
	if m != nil {
		return m.Spent
	}
	return false
}

type TransactionHashesRequest struct {
	// Types that are valid to be assigned to XStartHeight:
	//	*TransactionHashesRequest_StartHeight
	XStartHeight isTransactionHashesRequest_XStartHeight `protobuf_oneof:"_start_height"`
	// Types that are valid to be assigned to XEndHeight:
	//	*TransactionHashesRequest_EndHeight
	XEndHeight isTransactionHashesRequest_XEndHeight `protobuf_oneof:"_end_height"`
}

func (m *TransactionHashesRequest) Reset()         { *m = TransactionHashesRequest{} }
func (m *TransactionHashesRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionHashesRequest) ProtoMessage()    {}
func (*TransactionHashesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{35}
}
func (m *TransactionHashesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionHashesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionHashesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionHashesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionHashesRequest.Merge(m, src)
}
func (m *TransactionHashesRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionHashesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionHashesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionHashesRequest proto.InternalMessageInfo

type isTransactionHashesRequest_XStartHeight interface {
	isTransactionHashesRequest_XStartHeight()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTransactionHashesRequest_XEndHeight interface {
	isTransactionHashesRequest_XEndHeight()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransactionHashesRequest_StartHeight struct {
	StartHeight uint64 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3,oneof" json:"start_height,omitempty"`
}
type TransactionHashesRequest_EndHeight struct {
	EndHeight uint64 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3,oneof" json:"end_height,omitempty"`
}

func (*TransactionHashesRequest_StartHeight) isTransactionHashesRequest_XStartHeight() {}
func (*TransactionHashesRequest_EndHeight) isTransactionHashesRequest_XEndHeight()     {}

func (m *TransactionHashesRequest) GetXStartHeight() isTransactionHashesRequest_XStartHeight {
	if m != nil {
		return m.XStartHeight
	}
	return nil
}
func (m *TransactionHashesRequest) GetXEndHeight() isTransactionHashesRequest_XEndHeight {
	if m != nil {
		return m.XEndHeight
	}
	return nil
}

func (m *TransactionHashesRequest) GetStartHeight() uint64 {
	if x, ok := m.GetXStartHeight().(*TransactionHashesRequest_StartHeight); ok {
		return x.StartHeight
	}
	return 0
}

func (m *TransactionHashesRequest) GetEndHeight() uint64 {
	if x, ok := m.GetXEndHeight().(*TransactionHashesRequest_EndHeight); ok {
		return x.EndHeight
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransactionHashesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransactionHashesRequest_StartHeight)(nil),
		(*TransactionHashesRequest_EndHeight)(nil),
	}
}

type TransactionHashesResponse struct {
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxHash      []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *TransactionHashesResponse) Reset()         { *m = TransactionHashesResponse{} }
func (m *TransactionHashesResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionHashesResponse) ProtoMessage()    {}
func (*TransactionHashesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{36}
}
func (m *TransactionHashesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionHashesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionHashesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionHashesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionHashesResponse.Merge(m, src)
}
func (m *TransactionHashesResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionHashesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionHashesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionHashesResponse proto.InternalMessageInfo

func (m *TransactionHashesResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TransactionHashesResponse) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

type TransactionByHashRequest struct {
	// The transaction hash to query for.
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *TransactionByHashRequest) Reset()         { *m = TransactionByHashRequest{} }
func (m *TransactionByHashRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionByHashRequest) ProtoMessage()    {}
func (*TransactionByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{37}
}
func (m *TransactionByHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionByHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionByHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionByHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionByHashRequest.Merge(m, src)
}
func (m *TransactionByHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionByHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionByHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionByHashRequest proto.InternalMessageInfo

func (m *TransactionByHashRequest) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

// A full transaction response
type TransactionByHashResponse struct {
	Tx *v1alpha1.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *TransactionByHashResponse) Reset()         { *m = TransactionByHashResponse{} }
func (m *TransactionByHashResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionByHashResponse) ProtoMessage()    {}
func (*TransactionByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{38}
}
func (m *TransactionByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionByHashResponse.Merge(m, src)
}
func (m *TransactionByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionByHashResponse proto.InternalMessageInfo

func (m *TransactionByHashResponse) GetTx() *v1alpha1.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type TransactionsRequest struct {
	// Types that are valid to be assigned to XStartHeight:
	//	*TransactionsRequest_StartHeight
	XStartHeight isTransactionsRequest_XStartHeight `protobuf_oneof:"_start_height"`
	// Types that are valid to be assigned to XEndHeight:
	//	*TransactionsRequest_EndHeight
	XEndHeight isTransactionsRequest_XEndHeight `protobuf_oneof:"_end_height"`
}

func (m *TransactionsRequest) Reset()         { *m = TransactionsRequest{} }
func (m *TransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionsRequest) ProtoMessage()    {}
func (*TransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{39}
}
func (m *TransactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionsRequest.Merge(m, src)
}
func (m *TransactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionsRequest proto.InternalMessageInfo

type isTransactionsRequest_XStartHeight interface {
	isTransactionsRequest_XStartHeight()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTransactionsRequest_XEndHeight interface {
	isTransactionsRequest_XEndHeight()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransactionsRequest_StartHeight struct {
	StartHeight uint64 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3,oneof" json:"start_height,omitempty"`
}
type TransactionsRequest_EndHeight struct {
	EndHeight uint64 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3,oneof" json:"end_height,omitempty"`
}

func (*TransactionsRequest_StartHeight) isTransactionsRequest_XStartHeight() {}
func (*TransactionsRequest_EndHeight) isTransactionsRequest_XEndHeight()     {}

func (m *TransactionsRequest) GetXStartHeight() isTransactionsRequest_XStartHeight {
	if m != nil {
		return m.XStartHeight
	}
	return nil
}
func (m *TransactionsRequest) GetXEndHeight() isTransactionsRequest_XEndHeight {
	if m != nil {
		return m.XEndHeight
	}
	return nil
}

func (m *TransactionsRequest) GetStartHeight() uint64 {
	if x, ok := m.GetXStartHeight().(*TransactionsRequest_StartHeight); ok {
		return x.StartHeight
	}
	return 0
}

func (m *TransactionsRequest) GetEndHeight() uint64 {
	if x, ok := m.GetXEndHeight().(*TransactionsRequest_EndHeight); ok {
		return x.EndHeight
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransactionsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransactionsRequest_StartHeight)(nil),
		(*TransactionsRequest_EndHeight)(nil),
	}
}

// A streaming full transaction response
type TransactionsResponse struct {
	BlockHeight uint64                `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxHash      []byte                `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Tx          *v1alpha1.Transaction `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *TransactionsResponse) Reset()         { *m = TransactionsResponse{} }
func (m *TransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionsResponse) ProtoMessage()    {}
func (*TransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{40}
}
func (m *TransactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionsResponse.Merge(m, src)
}
func (m *TransactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionsResponse proto.InternalMessageInfo

func (m *TransactionsResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TransactionsResponse) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *TransactionsResponse) GetTx() *v1alpha1.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type TransactionPerspectiveRequest struct {
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *TransactionPerspectiveRequest) Reset()         { *m = TransactionPerspectiveRequest{} }
func (m *TransactionPerspectiveRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionPerspectiveRequest) ProtoMessage()    {}
func (*TransactionPerspectiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{41}
}
func (m *TransactionPerspectiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPerspectiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPerspectiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPerspectiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPerspectiveRequest.Merge(m, src)
}
func (m *TransactionPerspectiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPerspectiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPerspectiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPerspectiveRequest proto.InternalMessageInfo

func (m *TransactionPerspectiveRequest) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

type TransactionPerspectiveResponse struct {
	Txp *v1alpha1.TransactionPerspective `protobuf:"bytes,1,opt,name=txp,proto3" json:"txp,omitempty"`
	Tx  *v1alpha1.Transaction            `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *TransactionPerspectiveResponse) Reset()         { *m = TransactionPerspectiveResponse{} }
func (m *TransactionPerspectiveResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionPerspectiveResponse) ProtoMessage()    {}
func (*TransactionPerspectiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{42}
}
func (m *TransactionPerspectiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPerspectiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPerspectiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPerspectiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPerspectiveResponse.Merge(m, src)
}
func (m *TransactionPerspectiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPerspectiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPerspectiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPerspectiveResponse proto.InternalMessageInfo

func (m *TransactionPerspectiveResponse) GetTxp() *v1alpha1.TransactionPerspective {
	if m != nil {
		return m.Txp
	}
	return nil
}

func (m *TransactionPerspectiveResponse) GetTx() *v1alpha1.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type NotesResponse struct {
	NoteRecord *SpendableNoteRecord `protobuf:"bytes,1,opt,name=note_record,json=noteRecord,proto3" json:"note_record,omitempty"`
}

func (m *NotesResponse) Reset()         { *m = NotesResponse{} }
func (m *NotesResponse) String() string { return proto.CompactTextString(m) }
func (*NotesResponse) ProtoMessage()    {}
func (*NotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{43}
}
func (m *NotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesResponse.Merge(m, src)
}
func (m *NotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotesResponse proto.InternalMessageInfo

func (m *NotesResponse) GetNoteRecord() *SpendableNoteRecord {
	if m != nil {
		return m.NoteRecord
	}
	return nil
}

type NotesForVotingResponse struct {
	NoteRecord  *SpendableNoteRecord   `protobuf:"bytes,1,opt,name=note_record,json=noteRecord,proto3" json:"note_record,omitempty"`
	IdentityKey *v1alpha11.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *NotesForVotingResponse) Reset()         { *m = NotesForVotingResponse{} }
func (m *NotesForVotingResponse) String() string { return proto.CompactTextString(m) }
func (*NotesForVotingResponse) ProtoMessage()    {}
func (*NotesForVotingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{44}
}
func (m *NotesForVotingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesForVotingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesForVotingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesForVotingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesForVotingResponse.Merge(m, src)
}
func (m *NotesForVotingResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotesForVotingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesForVotingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotesForVotingResponse proto.InternalMessageInfo

func (m *NotesForVotingResponse) GetNoteRecord() *SpendableNoteRecord {
	if m != nil {
		return m.NoteRecord
	}
	return nil
}

func (m *NotesForVotingResponse) GetIdentityKey() *v1alpha11.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

// A note plaintext with associated metadata about its status.
type SpendableNoteRecord struct {
	// The note commitment, identifying the note.
	NoteCommitment *v1alpha11.StateCommitment `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// The note plaintext itself.
	Note *v1alpha11.Note `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	// A precomputed decryption of the note's address incore.dex.v1alpha1.
	AddressIndex *v1alpha11.AddressIndex `protobuf:"bytes,3,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// The note's nullifier.
	Nullifier *v1alpha11.Nullifier `protobuf:"bytes,4,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The height at which the note was created.
	HeightCreated uint64 `protobuf:"varint,5,opt,name=height_created,json=heightCreated,proto3" json:"height_created,omitempty"`
	// Types that are valid to be assigned to XHeightSpent:
	//	*SpendableNoteRecord_HeightSpent
	XHeightSpent isSpendableNoteRecord_XHeightSpent `protobuf_oneof:"_height_spent"`
	// The note position.
	Position uint64 `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	// The source of the note (a tx hash or otherwise)
	Source *v1alpha12.NoteSource `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *SpendableNoteRecord) Reset()         { *m = SpendableNoteRecord{} }
func (m *SpendableNoteRecord) String() string { return proto.CompactTextString(m) }
func (*SpendableNoteRecord) ProtoMessage()    {}
func (*SpendableNoteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{45}
}
func (m *SpendableNoteRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendableNoteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendableNoteRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendableNoteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendableNoteRecord.Merge(m, src)
}
func (m *SpendableNoteRecord) XXX_Size() int {
	return m.Size()
}
func (m *SpendableNoteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendableNoteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SpendableNoteRecord proto.InternalMessageInfo

type isSpendableNoteRecord_XHeightSpent interface {
	isSpendableNoteRecord_XHeightSpent()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SpendableNoteRecord_HeightSpent struct {
	HeightSpent uint64 `protobuf:"varint,6,opt,name=height_spent,json=heightSpent,proto3,oneof" json:"height_spent,omitempty"`
}

func (*SpendableNoteRecord_HeightSpent) isSpendableNoteRecord_XHeightSpent() {}

func (m *SpendableNoteRecord) GetXHeightSpent() isSpendableNoteRecord_XHeightSpent {
	if m != nil {
		return m.XHeightSpent
	}
	return nil
}

func (m *SpendableNoteRecord) GetNoteCommitment() *v1alpha11.StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

func (m *SpendableNoteRecord) GetNote() *v1alpha11.Note {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *SpendableNoteRecord) GetAddressIndex() *v1alpha11.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *SpendableNoteRecord) GetNullifier() *v1alpha11.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *SpendableNoteRecord) GetHeightCreated() uint64 {
	if m != nil {
		return m.HeightCreated
	}
	return 0
}

func (m *SpendableNoteRecord) GetHeightSpent() uint64 {
	if x, ok := m.GetXHeightSpent().(*SpendableNoteRecord_HeightSpent); ok {
		return x.HeightSpent
	}
	return 0
}

func (m *SpendableNoteRecord) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SpendableNoteRecord) GetSource() *v1alpha12.NoteSource {
	if m != nil {
		return m.Source
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SpendableNoteRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SpendableNoteRecord_HeightSpent)(nil),
	}
}

type SwapRecord struct {
	SwapCommitment *v1alpha11.StateCommitment     `protobuf:"bytes,1,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
	Swap           *v1alpha13.SwapPlaintext       `protobuf:"bytes,2,opt,name=swap,proto3" json:"swap,omitempty"`
	Position       uint64                         `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Nullifier      *v1alpha11.Nullifier           `protobuf:"bytes,4,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	OutputData     *v1alpha13.BatchSwapOutputData `protobuf:"bytes,5,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	// Types that are valid to be assigned to XHeightClaimed:
	//	*SwapRecord_HeightClaimed
	XHeightClaimed isSwapRecord_XHeightClaimed `protobuf_oneof:"_height_claimed"`
	Source         *v1alpha12.NoteSource       `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *SwapRecord) Reset()         { *m = SwapRecord{} }
func (m *SwapRecord) String() string { return proto.CompactTextString(m) }
func (*SwapRecord) ProtoMessage()    {}
func (*SwapRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa947b204e6a7c2, []int{46}
}
func (m *SwapRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapRecord.Merge(m, src)
}
func (m *SwapRecord) XXX_Size() int {
	return m.Size()
}
func (m *SwapRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SwapRecord proto.InternalMessageInfo

type isSwapRecord_XHeightClaimed interface {
	isSwapRecord_XHeightClaimed()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SwapRecord_HeightClaimed struct {
	HeightClaimed uint64 `protobuf:"varint,6,opt,name=height_claimed,json=heightClaimed,proto3,oneof" json:"height_claimed,omitempty"`
}

func (*SwapRecord_HeightClaimed) isSwapRecord_XHeightClaimed() {}

func (m *SwapRecord) GetXHeightClaimed() isSwapRecord_XHeightClaimed {
	if m != nil {
		return m.XHeightClaimed
	}
	return nil
}

func (m *SwapRecord) GetSwapCommitment() *v1alpha11.StateCommitment {
	if m != nil {
		return m.SwapCommitment
	}
	return nil
}

func (m *SwapRecord) GetSwap() *v1alpha13.SwapPlaintext {
	if m != nil {
		return m.Swap
	}
	return nil
}

func (m *SwapRecord) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SwapRecord) GetNullifier() *v1alpha11.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *SwapRecord) GetOutputData() *v1alpha13.BatchSwapOutputData {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *SwapRecord) GetHeightClaimed() uint64 {
	if x, ok := m.GetXHeightClaimed().(*SwapRecord_HeightClaimed); ok {
		return x.HeightClaimed
	}
	return 0
}

func (m *SwapRecord) GetSource() *v1alpha12.NoteSource {
	if m != nil {
		return m.Source
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SwapRecord) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SwapRecord_HeightClaimed)(nil),
	}
}

func init() {
	proto.RegisterType((*BroadcastTransactionRequest)(nil), "penumbra.view.v1alpha1.BroadcastTransactionRequest")
	proto.RegisterType((*BroadcastTransactionResponse)(nil), "penumbra.view.v1alpha1.BroadcastTransactionResponse")
	proto.RegisterType((*TransactionPlannerRequest)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest")
	proto.RegisterType((*TransactionPlannerRequest_Output)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.Output")
	proto.RegisterType((*TransactionPlannerRequest_Swap)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.Swap")
	proto.RegisterType((*TransactionPlannerRequest_Delegate)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.Delegate")
	proto.RegisterType((*TransactionPlannerRequest_Undelegate)(nil), "penumbra.view.v1alpha1.TransactionPlannerRequest.Undelegate")
	proto.RegisterType((*TransactionPlannerResponse)(nil), "penumbra.view.v1alpha1.TransactionPlannerResponse")
	proto.RegisterType((*AddressByIndexRequest)(nil), "penumbra.view.v1alpha1.AddressByIndexRequest")
	proto.RegisterType((*AddressByIndexResponse)(nil), "penumbra.view.v1alpha1.AddressByIndexResponse")
	proto.RegisterType((*IndexByAddressRequest)(nil), "penumbra.view.v1alpha1.IndexByAddressRequest")
	proto.RegisterType((*IndexByAddressResponse)(nil), "penumbra.view.v1alpha1.IndexByAddressResponse")
	proto.RegisterType((*EphemeralAddressRequest)(nil), "penumbra.view.v1alpha1.EphemeralAddressRequest")
	proto.RegisterType((*EphemeralAddressResponse)(nil), "penumbra.view.v1alpha1.EphemeralAddressResponse")
	proto.RegisterType((*BalanceByAddressRequest)(nil), "penumbra.view.v1alpha1.BalanceByAddressRequest")
	proto.RegisterType((*BalanceByAddressResponse)(nil), "penumbra.view.v1alpha1.BalanceByAddressResponse")
	proto.RegisterType((*ViewAuthToken)(nil), "penumbra.view.v1alpha1.ViewAuthToken")
	proto.RegisterType((*ViewAuthRequest)(nil), "penumbra.view.v1alpha1.ViewAuthRequest")
	proto.RegisterType((*ViewAuthResponse)(nil), "penumbra.view.v1alpha1.ViewAuthResponse")
	proto.RegisterType((*StatusRequest)(nil), "penumbra.view.v1alpha1.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "penumbra.view.v1alpha1.StatusResponse")
	proto.RegisterType((*StatusStreamRequest)(nil), "penumbra.view.v1alpha1.StatusStreamRequest")
	proto.RegisterType((*StatusStreamResponse)(nil), "penumbra.view.v1alpha1.StatusStreamResponse")
	proto.RegisterType((*NotesRequest)(nil), "penumbra.view.v1alpha1.NotesRequest")
	proto.RegisterType((*NotesForVotingRequest)(nil), "penumbra.view.v1alpha1.NotesForVotingRequest")
	proto.RegisterType((*WitnessRequest)(nil), "penumbra.view.v1alpha1.WitnessRequest")
	proto.RegisterType((*WitnessResponse)(nil), "penumbra.view.v1alpha1.WitnessResponse")
	proto.RegisterType((*AssetsRequest)(nil), "penumbra.view.v1alpha1.AssetsRequest")
	proto.RegisterType((*AssetsResponse)(nil), "penumbra.view.v1alpha1.AssetsResponse")
	proto.RegisterType((*ChainParametersRequest)(nil), "penumbra.view.v1alpha1.ChainParametersRequest")
	proto.RegisterType((*ChainParametersResponse)(nil), "penumbra.view.v1alpha1.ChainParametersResponse")
	proto.RegisterType((*FMDParametersRequest)(nil), "penumbra.view.v1alpha1.FMDParametersRequest")
	proto.RegisterType((*FMDParametersResponse)(nil), "penumbra.view.v1alpha1.FMDParametersResponse")
	proto.RegisterType((*NoteByCommitmentRequest)(nil), "penumbra.view.v1alpha1.NoteByCommitmentRequest")
	proto.RegisterType((*NoteByCommitmentResponse)(nil), "penumbra.view.v1alpha1.NoteByCommitmentResponse")
	proto.RegisterType((*SwapByCommitmentRequest)(nil), "penumbra.view.v1alpha1.SwapByCommitmentRequest")
	proto.RegisterType((*SwapByCommitmentResponse)(nil), "penumbra.view.v1alpha1.SwapByCommitmentResponse")
	proto.RegisterType((*NullifierStatusRequest)(nil), "penumbra.view.v1alpha1.NullifierStatusRequest")
	proto.RegisterType((*NullifierStatusResponse)(nil), "penumbra.view.v1alpha1.NullifierStatusResponse")
	proto.RegisterType((*TransactionHashesRequest)(nil), "penumbra.view.v1alpha1.TransactionHashesRequest")
	proto.RegisterType((*TransactionHashesResponse)(nil), "penumbra.view.v1alpha1.TransactionHashesResponse")
	proto.RegisterType((*TransactionByHashRequest)(nil), "penumbra.view.v1alpha1.TransactionByHashRequest")
	proto.RegisterType((*TransactionByHashResponse)(nil), "penumbra.view.v1alpha1.TransactionByHashResponse")
	proto.RegisterType((*TransactionsRequest)(nil), "penumbra.view.v1alpha1.TransactionsRequest")
	proto.RegisterType((*TransactionsResponse)(nil), "penumbra.view.v1alpha1.TransactionsResponse")
	proto.RegisterType((*TransactionPerspectiveRequest)(nil), "penumbra.view.v1alpha1.TransactionPerspectiveRequest")
	proto.RegisterType((*TransactionPerspectiveResponse)(nil), "penumbra.view.v1alpha1.TransactionPerspectiveResponse")
	proto.RegisterType((*NotesResponse)(nil), "penumbra.view.v1alpha1.NotesResponse")
	proto.RegisterType((*NotesForVotingResponse)(nil), "penumbra.view.v1alpha1.NotesForVotingResponse")
	proto.RegisterType((*SpendableNoteRecord)(nil), "penumbra.view.v1alpha1.SpendableNoteRecord")
	proto.RegisterType((*SwapRecord)(nil), "penumbra.view.v1alpha1.SwapRecord")
}

func init() { proto.RegisterFile("penumbra/view/v1alpha1/view.proto", fileDescriptor_0aa947b204e6a7c2) }

var fileDescriptor_0aa947b204e6a7c2 = []byte{
	// 2512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xd7, 0x92, 0xfa, 0xa0, 0x1f, 0xbf, 0x94, 0xb1, 0x2c, 0xd1, 0x6c, 0xa2, 0x38, 0x1b, 0x5b,
	0x56, 0xed, 0x5a, 0x92, 0x65, 0xd7, 0x75, 0xdd, 0x04, 0xb1, 0x69, 0xd5, 0x95, 0xe0, 0x8f, 0xa8,
	0x2b, 0x7f, 0xc0, 0xa9, 0xd3, 0xc5, 0x68, 0x77, 0x24, 0x6e, 0xb5, 0xdc, 0xdd, 0xec, 0x0e, 0x45,
	0xaa, 0x3d, 0xf9, 0x92, 0xe6, 0x58, 0xa0, 0x87, 0x36, 0xff, 0x43, 0x81, 0x02, 0x05, 0x0a, 0xf4,
	0x94, 0x4b, 0x7b, 0x28, 0xd0, 0x4b, 0x8e, 0x05, 0x7a, 0x69, 0xed, 0x7f, 0xa1, 0xf7, 0x16, 0xf3,
	0xb1, 0xcb, 0x5d, 0x92, 0x6b, 0x92, 0x92, 0x8c, 0xd6, 0xb9, 0x71, 0x67, 0xde, 0xfb, 0xbd, 0x37,
	0xef, 0xcd, 0xbc, 0x79, 0xef, 0x0d, 0xe1, 0x3d, 0x8f, 0x38, 0xcd, 0xc6, 0xb6, 0x8f, 0x97, 0xf7,
	0x2d, 0xd2, 0x5a, 0xde, 0xbf, 0x8c, 0x6d, 0xaf, 0x8e, 0x2f, 0xf3, 0xaf, 0x25, 0xcf, 0x77, 0xa9,
	0x8b, 0x66, 0x43, 0x92, 0x25, 0x3e, 0x18, 0x92, 0x54, 0x17, 0x23, 0x56, 0xc3, 0xf5, 0xc9, 0xb2,
	0x51, 0xc7, 0x96, 0xd3, 0x01, 0xe0, 0x9f, 0x02, 0xa1, 0x7a, 0xa1, 0x8b, 0xd2, 0x3f, 0xf0, 0xa8,
	0x1b, 0x23, 0xe5, 0xdf, 0x92, 0xf6, 0x6c, 0x92, 0xd6, 0x24, 0xed, 0x0e, 0xa1, 0x49, 0xda, 0x92,
	0xea, 0x6a, 0x92, 0x8a, 0xfa, 0xd8, 0x09, 0xb0, 0x41, 0x2d, 0x37, 0xa6, 0x41, 0x6c, 0x50, 0x70,
	0xa9, 0x5f, 0x2a, 0xf0, 0xad, 0x9a, 0xef, 0x62, 0xd3, 0xc0, 0x01, 0x7d, 0xd8, 0x99, 0xd6, 0xc8,
	0x67, 0x4d, 0x12, 0x50, 0xf4, 0x63, 0xc8, 0xc7, 0x98, 0x2a, 0xca, 0x19, 0x65, 0x31, 0xbf, 0xba,
	0xbc, 0x14, 0xad, 0x9f, 0xc9, 0x5a, 0x8a, 0xc3, 0x86, 0xb2, 0x96, 0xe2, 0x60, 0x71, 0x0c, 0x74,
	0x1e, 0xca, 0xb8, 0x85, 0x2d, 0xaa, 0x9b, 0x84, 0x12, 0x01, 0x9b, 0x39, 0xa3, 0x2c, 0xe6, 0xb4,
	0x12, 0x1f, 0x5e, 0x0b, 0x47, 0xd5, 0xc7, 0xf0, 0x76, 0x7f, 0xd5, 0x02, 0xcf, 0x75, 0x02, 0x82,
	0xae, 0x41, 0xc6, 0x32, 0xa5, 0x4a, 0x0b, 0xc3, 0xa8, 0xb4, 0x61, 0x6a, 0x19, 0xcb, 0x54, 0xff,
	0x76, 0x02, 0x4e, 0xc7, 0xf0, 0x36, 0x6d, 0xec, 0x38, 0xc4, 0x0f, 0x57, 0xfc, 0x3e, 0x14, 0x49,
	0xdb, 0xb3, 0xfc, 0x03, 0xbd, 0x4e, 0xac, 0xdd, 0x3a, 0xe5, 0x02, 0xc6, 0xb5, 0x82, 0x18, 0x5c,
	0xe7, 0x63, 0xe8, 0x2a, 0x64, 0x77, 0x08, 0xe1, 0x7a, 0xe7, 0x57, 0xd5, 0x2e, 0xd9, 0xd2, 0x79,
	0x91, 0xd8, 0x3b, 0x84, 0x68, 0x8c, 0x1c, 0x21, 0x18, 0x6f, 0x90, 0x86, 0x5b, 0xc9, 0x9e, 0x51,
	0x16, 0x4f, 0x68, 0xfc, 0x37, 0xba, 0x07, 0x80, 0x0d, 0xc3, 0x6d, 0x3a, 0x54, 0xb7, 0xcc, 0x4a,
	0x89, 0x03, 0x2e, 0x0e, 0x00, 0xbc, 0x25, 0x18, 0x36, 0xd6, 0xd6, 0xc7, 0xb4, 0x13, 0x92, 0x7b,
	0xc3, 0xfc, 0x42, 0x51, 0xd0, 0x4d, 0x98, 0xa0, 0xee, 0x1e, 0x71, 0x2a, 0x65, 0x0e, 0x74, 0x6e,
	0xa9, 0xff, 0x46, 0x5d, 0x7a, 0x6c, 0x91, 0xd6, 0xad, 0x26, 0xad, 0x3f, 0x64, 0xc4, 0xeb, 0x8a,
	0x26, 0xb8, 0x18, 0x82, 0x06, 0x53, 0x6e, 0x93, 0x7a, 0x4d, 0x1a, 0x54, 0x66, 0xce, 0x64, 0x17,
	0xf3, 0xab, 0xd7, 0xd3, 0x30, 0x52, 0x4d, 0xb8, 0xf4, 0x31, 0x07, 0xd0, 0x42, 0x20, 0x74, 0x0f,
	0x26, 0x82, 0x16, 0xf6, 0x82, 0xca, 0x3c, 0x47, 0xbc, 0x36, 0x3a, 0xe2, 0x56, 0x0b, 0x7b, 0x9a,
	0x00, 0x41, 0xcf, 0x20, 0x6f, 0x12, 0x9b, 0xec, 0x62, 0x46, 0x17, 0x54, 0x16, 0x39, 0xe6, 0x8d,
	0xd1, 0x31, 0xd7, 0x04, 0x08, 0xd1, 0xe2, 0x70, 0x68, 0x1b, 0x8a, 0x4d, 0x27, 0x8e, 0xbf, 0xca,
	0xf1, 0x3f, 0x18, 0x1d, 0xff, 0x51, 0x08, 0x43, 0xb4, 0x24, 0x64, 0xf5, 0x73, 0x05, 0x26, 0x85,
	0x8d, 0xd0, 0x0d, 0x98, 0xd8, 0xc7, 0x76, 0x93, 0xc8, 0x6d, 0x7c, 0x76, 0x80, 0xe7, 0x1f, 0x33,
	0x5a, 0x4d, 0xb0, 0xa0, 0x9b, 0x30, 0x85, 0x4d, 0xd3, 0x27, 0x41, 0x20, 0x37, 0xe2, 0xc2, 0xa0,
	0x7d, 0x23, 0xa8, 0xb5, 0x90, 0xad, 0xfa, 0x67, 0x05, 0xc6, 0x99, 0x69, 0x8f, 0xa4, 0xc6, 0x06,
	0x14, 0x28, 0xf6, 0x77, 0x09, 0xd5, 0x71, 0x10, 0x10, 0x3a, 0xac, 0x2e, 0x8c, 0x76, 0xc3, 0xd4,
	0xf2, 0x82, 0x97, 0x7f, 0x86, 0xc7, 0x2a, 0x3b, 0xd2, 0xb1, 0xaa, 0xfe, 0x56, 0x81, 0x5c, 0xe8,
	0x4c, 0xf4, 0x21, 0x4c, 0xe2, 0x06, 0x3b, 0x10, 0x72, 0x29, 0xe7, 0x06, 0xe9, 0xc1, 0x89, 0x35,
	0xc9, 0x84, 0xee, 0x43, 0xc1, 0x32, 0x89, 0x43, 0x2d, 0x7a, 0xa0, 0xef, 0x91, 0x03, 0xb9, 0x98,
	0x0b, 0x03, 0x40, 0x36, 0x24, 0xcb, 0x5d, 0x72, 0xa0, 0xe5, 0xad, 0xce, 0x47, 0x75, 0x1d, 0xa0,
	0xb3, 0x0d, 0x8e, 0x62, 0xe5, 0x5a, 0x11, 0xf2, 0x7a, 0x27, 0x50, 0xd4, 0x72, 0x30, 0xa9, 0xf3,
	0x33, 0xab, 0x12, 0xa8, 0xf6, 0xdb, 0x83, 0x32, 0x46, 0xfe, 0x08, 0xc6, 0x3d, 0x1b, 0x87, 0x81,
	0xfb, 0xca, 0x88, 0x81, 0x9b, 0xa1, 0x69, 0x1c, 0x40, 0xb5, 0xe0, 0x94, 0xdc, 0x3e, 0xb5, 0x83,
	0x0d, 0xc7, 0x24, 0xed, 0x30, 0x5e, 0x6e, 0x42, 0x51, 0x6e, 0x27, 0xdd, 0x62, 0xe3, 0x52, 0xd4,
	0xc5, 0xe1, 0xf6, 0xa2, 0x80, 0x2a, 0xe0, 0xd8, 0x97, 0xfa, 0x09, 0xcc, 0x76, 0x8b, 0x92, 0xab,
	0x89, 0xed, 0x78, 0xe5, 0x50, 0x3b, 0x5e, 0x7d, 0x0a, 0xa7, 0x38, 0x64, 0xed, 0x20, 0x9c, 0x92,
	0xcb, 0x38, 0x3a, 0xf4, 0x73, 0x05, 0x66, 0xbb, 0xb1, 0xa5, 0xde, 0x8f, 0x8e, 0x6e, 0xa3, 0xf5,
	0xb1, 0xa4, 0x95, 0xbe, 0x50, 0x94, 0xda, 0x34, 0x94, 0xf4, 0x04, 0xae, 0xba, 0x07, 0x73, 0x3f,
	0xf4, 0xea, 0xa4, 0x41, 0x7c, 0x6c, 0x77, 0x2d, 0xf0, 0xf8, 0xfd, 0xf4, 0x0c, 0x2a, 0xbd, 0xc2,
	0x8e, 0xcd, 0x53, 0x3f, 0x81, 0xb9, 0x1a, 0xb6, 0xb1, 0x63, 0x90, 0xd7, 0xe0, 0xab, 0xdf, 0x28,
	0x50, 0xe9, 0x45, 0x97, 0xba, 0x7f, 0x00, 0x13, 0x22, 0x92, 0x29, 0x23, 0x45, 0x32, 0xc1, 0x14,
	0x0b, 0x40, 0x99, 0x43, 0x04, 0x20, 0xf5, 0x1c, 0x14, 0x13, 0x97, 0x33, 0x9a, 0x81, 0x09, 0x8b,
	0x1d, 0x69, 0xae, 0x4d, 0x41, 0x13, 0x1f, 0xaa, 0x06, 0xe5, 0x90, 0x2c, 0xb4, 0xca, 0x47, 0x90,
	0xdd, 0xd9, 0xdf, 0x93, 0x4a, 0x5f, 0x1a, 0x14, 0x3c, 0x9b, 0xb6, 0xcd, 0x00, 0x2c, 0x67, 0x97,
	0x05, 0x2d, 0xc6, 0xa9, 0x7e, 0x0c, 0xd3, 0x1d, 0x4c, 0x69, 0x8b, 0x1f, 0x84, 0x09, 0x85, 0x32,
	0x42, 0x42, 0x21, 0xd3, 0x09, 0xf5, 0x4f, 0x0a, 0x14, 0xb7, 0x28, 0xa6, 0xcd, 0xc8, 0x73, 0xff,
	0x67, 0xd9, 0x4e, 0x7a, 0x54, 0xd5, 0xa0, 0x14, 0x6a, 0x2e, 0x2d, 0xf1, 0x2e, 0xe4, 0x83, 0x03,
	0xc7, 0x48, 0x66, 0x85, 0xc0, 0x86, 0x64, 0x4e, 0xf8, 0x2e, 0xe4, 0x0d, 0x4c, 0x8d, 0xba, 0xe5,
	0xec, 0xea, 0x4d, 0x4f, 0xe6, 0xb4, 0x10, 0x0e, 0x3d, 0xf2, 0xd4, 0xaf, 0x14, 0x38, 0x29, 0x40,
	0xb7, 0xa8, 0x4f, 0x70, 0xe3, 0x8d, 0x33, 0x8a, 0x0f, 0x33, 0x49, 0xfd, 0xa5, 0x69, 0xbe, 0x0f,
	0xa7, 0x6d, 0x4c, 0x49, 0x40, 0xf5, 0x3d, 0xc7, 0x6d, 0x39, 0xfa, 0xb6, 0xed, 0x1a, 0x7b, 0x49,
	0x43, 0xcd, 0x0a, 0x82, 0xbb, 0x6c, 0xbe, 0xc6, 0xa6, 0x3b, 0x46, 0x8b, 0x5b, 0x35, 0xd3, 0x6d,
	0x55, 0xf5, 0xcb, 0x2c, 0x14, 0x1e, 0xb8, 0x94, 0x04, 0xb1, 0xfc, 0xdc, 0x72, 0x0c, 0xbb, 0x69,
	0x12, 0x3d, 0xf0, 0x88, 0x3c, 0x66, 0x39, 0xad, 0x20, 0x07, 0xb7, 0xd8, 0x18, 0xba, 0x05, 0x39,
	0x7e, 0x1a, 0x99, 0x41, 0xb3, 0x23, 0x9d, 0xe2, 0x29, 0x2c, 0x7e, 0xf4, 0xc6, 0xcb, 0xf1, 0x23,
	0xc6, 0x4b, 0xb4, 0x00, 0x65, 0x71, 0xc8, 0x75, 0xea, 0x72, 0xdd, 0xcd, 0xca, 0x04, 0x5f, 0x6f,
	0x51, 0x0c, 0x3f, 0x74, 0x99, 0xf2, 0xe6, 0x9b, 0xb3, 0x1f, 0xbe, 0xca, 0xc0, 0x29, 0xee, 0x9b,
	0x3b, 0xae, 0xff, 0xd8, 0xa5, 0x96, 0xb3, 0x1b, 0x3a, 0xe9, 0x02, 0xbc, 0xb5, 0xef, 0x52, 0xbc,
	0x6d, 0x13, 0x1d, 0xd3, 0xe4, 0x4e, 0x28, 0xcb, 0x89, 0x5b, 0x54, 0x6e, 0x81, 0x1e, 0x43, 0x67,
	0x8f, 0x6a, 0xe8, 0x37, 0xc6, 0x80, 0xff, 0xce, 0x40, 0xe9, 0x89, 0x45, 0x9d, 0xd8, 0xdd, 0xf6,
	0x14, 0xa6, 0x1d, 0x97, 0x12, 0xdd, 0x70, 0x1b, 0x0d, 0x8b, 0x36, 0x88, 0x43, 0x59, 0x76, 0xcf,
	0x4a, 0x90, 0xa5, 0x01, 0x2b, 0x60, 0x47, 0x93, 0xdc, 0x8e, 0xd8, 0xb4, 0x32, 0xc3, 0xe9, 0x7c,
	0x07, 0xe8, 0xa7, 0x30, 0x1d, 0x4b, 0xf8, 0x74, 0x9e, 0x17, 0x66, 0x0f, 0x9f, 0x17, 0x96, 0x69,
	0x72, 0xe0, 0xcd, 0x31, 0x3b, 0x81, 0x72, 0x64, 0x75, 0x19, 0xc2, 0x34, 0x28, 0xb4, 0xc4, 0x90,
	0x6e, 0x62, 0x8a, 0x47, 0x69, 0x74, 0x48, 0xa8, 0x35, 0x4c, 0xb1, 0x96, 0x6f, 0x75, 0x3e, 0xd4,
	0xdf, 0x65, 0xa1, 0xc8, 0xc3, 0x4a, 0xe4, 0xdc, 0x2a, 0xe4, 0x76, 0x2c, 0x9b, 0x12, 0x9f, 0x88,
	0xbe, 0x45, 0x4e, 0x8b, 0xbe, 0xd1, 0xcf, 0x60, 0x3e, 0x16, 0xd7, 0x0c, 0x6b, 0xc7, 0x32, 0x74,
	0x93, 0x38, 0x6e, 0xc3, 0x72, 0x64, 0x25, 0x2a, 0xb6, 0xc1, 0xa0, 0xaa, 0x61, 0x8d, 0xf1, 0x68,
	0x6f, 0x77, 0xc2, 0x21, 0x87, 0x5a, 0x8b, 0x23, 0xa1, 0x1b, 0x70, 0x3a, 0x94, 0xd5, 0xa9, 0x4b,
	0x85, 0x71, 0x02, 0xbe, 0x25, 0x72, 0xda, 0x9c, 0x24, 0x58, 0x8b, 0xe6, 0xb9, 0x81, 0x03, 0x74,
	0x1d, 0x2a, 0x21, 0x6f, 0xd3, 0xd9, 0x76, 0x1d, 0x93, 0xdd, 0x77, 0x92, 0x75, 0x9c, 0xb3, 0xce,
	0xca, 0xf9, 0x47, 0xe1, 0xb4, 0xe4, 0x5c, 0x80, 0x72, 0xc8, 0x69, 0x7b, 0xba, 0xb3, 0x43, 0x03,
	0x1e, 0xff, 0x72, 0x5a, 0x18, 0xd0, 0xef, 0x79, 0x0f, 0x76, 0x68, 0x80, 0x56, 0xe1, 0x54, 0x48,
	0xe7, 0xf9, 0xae, 0xe7, 0x06, 0xd8, 0x16, 0xd4, 0x93, 0x9c, 0xfa, 0xa4, 0x9c, 0xdc, 0x94, 0x73,
	0x9c, 0xe7, 0x16, 0xbc, 0x13, 0xf2, 0xec, 0xf3, 0x48, 0xa4, 0xfb, 0xc4, 0x20, 0x96, 0x47, 0x43,
	0xd5, 0xa6, 0x38, 0x6f, 0x55, 0x12, 0x85, 0xd1, 0x8a, 0x93, 0x08, 0xf5, 0xd4, 0x7b, 0x50, 0x0a,
	0xbd, 0x25, 0x37, 0xc5, 0x8d, 0x64, 0x22, 0x78, 0x76, 0x98, 0x2b, 0x44, 0xa6, 0x81, 0x6a, 0x05,
	0x66, 0x6f, 0xd7, 0xb1, 0xe5, 0x6c, 0x62, 0x1f, 0x37, 0x08, 0x25, 0x7e, 0xb8, 0x09, 0xd4, 0x3a,
	0xcc, 0xf5, 0xcc, 0x48, 0x81, 0xf7, 0x01, 0xbc, 0x68, 0x34, 0x2d, 0x93, 0xe3, 0x5d, 0xc4, 0x48,
	0x68, 0x37, 0x54, 0x0c, 0x40, 0x9d, 0x85, 0x99, 0x3b, 0xf7, 0xd7, 0x7a, 0x35, 0x30, 0xe1, 0x54,
	0xd7, 0xb8, 0x94, 0x7f, 0xb7, 0x8f, 0xfc, 0x8b, 0xaf, 0x96, 0x7f, 0xa7, 0x61, 0xa6, 0x48, 0xff,
	0x4b, 0x06, 0xe6, 0xd8, 0xed, 0x50, 0x3b, 0x88, 0x05, 0x25, 0x79, 0x10, 0x9e, 0x40, 0xb9, 0x2b,
	0xca, 0xc9, 0x6c, 0x79, 0xd4, 0x20, 0x57, 0x4a, 0x06, 0xb9, 0x7e, 0xcd, 0xc5, 0x6c, 0xbf, 0xe6,
	0xe2, 0x9b, 0x13, 0xac, 0x1c, 0xa8, 0xf4, 0x5a, 0x31, 0x8a, 0x5a, 0x25, 0x9e, 0x47, 0xf0, 0x8b,
	0x96, 0x59, 0xa2, 0xd7, 0x67, 0x49, 0xf9, 0x5b, 0x21, 0x35, 0x83, 0xd4, 0x88, 0xe1, 0xfa, 0xa6,
	0x56, 0x0c, 0xe2, 0x83, 0xdc, 0x6d, 0x5b, 0x2d, 0xec, 0xa5, 0xb8, 0x2d, 0x68, 0x61, 0xef, 0x18,
	0xdc, 0xc6, 0x60, 0xbe, 0xd1, 0x6e, 0xd3, 0xa0, 0xd2, 0x6b, 0xc5, 0xa8, 0x71, 0x3d, 0xce, 0xd6,
	0x2f, 0x9d, 0xa5, 0xa6, 0x3a, 0xab, 0x85, 0x3d, 0xe9, 0x23, 0x4e, 0xaf, 0xfe, 0x21, 0x03, 0xb3,
	0x0f, 0x9a, 0xb6, 0x6d, 0xed, 0x58, 0xc4, 0x4f, 0x16, 0x56, 0x77, 0xe0, 0x84, 0x13, 0xce, 0x48,
	0x9f, 0x0c, 0x32, 0x4b, 0x84, 0xa4, 0x75, 0x58, 0xbf, 0x81, 0x8e, 0x58, 0x86, 0xb9, 0x1e, 0x9b,
	0x49, 0x3f, 0xcc, 0xc0, 0x84, 0x28, 0x21, 0xc4, 0x5d, 0x2c, 0x3e, 0xd4, 0xcf, 0x15, 0xa8, 0xc4,
	0x72, 0x9d, 0x75, 0x1c, 0xd4, 0x3b, 0xd5, 0xc7, 0x02, 0x14, 0x02, 0x8a, 0xfd, 0x64, 0x4e, 0xbb,
	0x3e, 0xa6, 0xe5, 0xf9, 0xa8, 0xc8, 0x68, 0xd9, 0x82, 0x54, 0x00, 0xe2, 0x98, 0x89, 0xb2, 0x66,
	0x5d, 0xd1, 0x4e, 0x10, 0xc7, 0x8c, 0x68, 0x6a, 0x65, 0x28, 0xea, 0x71, 0x30, 0xbe, 0x86, 0x0e,
	0x97, 0xfa, 0x24, 0xf1, 0x4c, 0x11, 0xea, 0x21, 0x75, 0x7f, 0x0f, 0x0a, 0x7d, 0xca, 0xac, 0xfc,
	0x76, 0xac, 0xb6, 0x9a, 0x83, 0x29, 0xda, 0xd6, 0xeb, 0x38, 0xa8, 0x73, 0x05, 0x0a, 0xda, 0x24,
	0x6d, 0x33, 0x14, 0xf5, 0x4a, 0x62, 0x81, 0xb5, 0x03, 0x36, 0x18, 0x2e, 0x30, 0xc6, 0xa4, 0x24,
	0x98, 0x9e, 0x25, 0xb4, 0x09, 0x99, 0xa4, 0x36, 0x1f, 0x41, 0x86, 0xb6, 0x0f, 0xfb, 0x3a, 0x94,
	0xa1, 0x6d, 0xf5, 0xb9, 0x02, 0x27, 0x63, 0x63, 0xff, 0x13, 0x7b, 0xff, 0x5a, 0x81, 0x99, 0xa4,
	0x0e, 0x47, 0xb7, 0xb5, 0xb4, 0x4c, 0xf6, 0xf0, 0x96, 0xb9, 0x0e, 0xef, 0xc4, 0x33, 0x6f, 0xe2,
	0xb3, 0xec, 0x90, 0x5a, 0xfb, 0x64, 0xa0, 0xc7, 0x7e, 0xaf, 0xc0, 0x7c, 0x1a, 0xab, 0x5c, 0xd9,
	0x3d, 0xc8, 0xd2, 0x76, 0x18, 0x88, 0x6e, 0x8c, 0x5a, 0x05, 0xc4, 0x00, 0x19, 0x8c, 0x5c, 0x6b,
	0xe6, 0xf0, 0x6b, 0xfd, 0x14, 0x8a, 0xb2, 0xd6, 0x8f, 0xf4, 0xcb, 0xf3, 0x3c, 0xc1, 0xe7, 0x61,
	0xf0, 0x30, 0xb7, 0x1b, 0x38, 0xd1, 0x6f, 0xf5, 0x8f, 0x0a, 0xcc, 0x76, 0xd7, 0xab, 0xaf, 0x43,
	0xd0, 0x31, 0xbf, 0x22, 0xa8, 0xff, 0xc9, 0xc2, 0xc9, 0x3e, 0x22, 0xfb, 0x65, 0x51, 0xca, 0xb1,
	0x64, 0x51, 0xdf, 0x83, 0x71, 0x9e, 0x4d, 0x08, 0xbd, 0xdf, 0x1f, 0x74, 0x91, 0x30, 0x8d, 0x38,
	0xc3, 0x6b, 0xa8, 0xe5, 0x13, 0x17, 0xdb, 0xf8, 0xe1, 0x2f, 0xb6, 0x73, 0x50, 0x12, 0xa7, 0x57,
	0x37, 0x7c, 0x82, 0x29, 0x89, 0x7a, 0x2f, 0x62, 0xf4, 0xb6, 0x18, 0x64, 0xf1, 0x46, 0x92, 0x89,
	0x9b, 0x61, 0x32, 0x8c, 0x37, 0x62, 0x94, 0x77, 0x97, 0x58, 0xbc, 0xa9, 0x42, 0xce, 0x73, 0x03,
	0x8b, 0x5f, 0x90, 0x53, 0x1c, 0x28, 0xfa, 0x46, 0x37, 0x61, 0x32, 0x70, 0x9b, 0xbe, 0x41, 0x2a,
	0xb9, 0xfe, 0xfa, 0x26, 0x33, 0x68, 0x66, 0xbe, 0x2d, 0x4e, 0xaf, 0x49, 0x3e, 0x1e, 0xa9, 0xe2,
	0x6a, 0xa8, 0xff, 0xc8, 0x02, 0x74, 0xd2, 0x81, 0x7e, 0x79, 0x98, 0x72, 0x2c, 0x79, 0xd8, 0x87,
	0x32, 0x33, 0x11, 0x8e, 0xff, 0x76, 0x17, 0x9a, 0x49, 0xda, 0xc9, 0xec, 0x64, 0xd3, 0xc6, 0x96,
	0x43, 0x49, 0x9b, 0x8a, 0x04, 0x25, 0x61, 0x95, 0x6c, 0x97, 0x55, 0x8e, 0xcb, 0x91, 0x9b, 0x90,
	0x17, 0xef, 0xca, 0xa2, 0x50, 0x9f, 0xe8, 0x1b, 0x6d, 0x12, 0x9a, 0xd6, 0x30, 0x35, 0xea, 0x4c,
	0x5d, 0xf1, 0xe6, 0xca, 0x0b, 0x75, 0x70, 0xa3, 0xdf, 0xe8, 0x42, 0x67, 0x6b, 0xd8, 0xd8, 0x6a,
	0x10, 0x33, 0xf2, 0x7a, 0xb8, 0x39, 0xc4, 0xb0, 0x48, 0x54, 0x42, 0xdf, 0x4e, 0x1d, 0xd2, 0xb7,
	0x6f, 0x41, 0x59, 0x4f, 0x8a, 0x5b, 0xfd, 0x17, 0x82, 0x93, 0x2c, 0xb3, 0xd9, 0xf4, 0x5d, 0xea,
	0x1a, 0xae, 0xbd, 0x45, 0xfc, 0x7d, 0xcb, 0x20, 0xe8, 0x09, 0x4c, 0x8a, 0x8c, 0x05, 0xa5, 0x26,
	0x44, 0x89, 0x2c, 0xb0, 0xba, 0x30, 0x88, 0x4c, 0x46, 0xbb, 0x3d, 0x28, 0xc4, 0x1b, 0xb9, 0xe8,
	0xe2, 0xab, 0xf9, 0x12, 0xed, 0xea, 0xea, 0x77, 0x86, 0x23, 0x16, 0xa2, 0x56, 0x14, 0xf4, 0x18,
	0x26, 0x78, 0xd0, 0x45, 0x67, 0xd3, 0x18, 0xe3, 0xfd, 0xdd, 0xea, 0xb9, 0x01, 0x54, 0x11, 0xee,
	0x67, 0x50, 0x4a, 0x06, 0x73, 0x74, 0xe9, 0x95, 0xac, 0xdd, 0x4d, 0xca, 0xea, 0xd2, 0xb0, 0xe4,
	0x91, 0xc8, 0x4f, 0x60, 0x4a, 0x76, 0x7b, 0x50, 0xaa, 0xa9, 0x93, 0xfd, 0xbc, 0xea, 0xf9, 0x81,
	0x74, 0xd2, 0x27, 0x4f, 0x61, 0x52, 0xb4, 0x1f, 0xd2, 0x9d, 0x9d, 0x68, 0x26, 0xa5, 0x3b, 0x3b,
	0xd9, 0xc5, 0x58, 0x51, 0x90, 0x0f, 0xe5, 0xae, 0x36, 0x01, 0x4a, 0x5d, 0x7b, 0xff, 0xa6, 0x45,
	0x75, 0x79, 0x68, 0x7a, 0xb9, 0x1c, 0x1b, 0x8a, 0x89, 0x1e, 0x03, 0x4a, 0xdd, 0x36, 0xfd, 0x5a,
	0x14, 0xd5, 0x4b, 0x43, 0x52, 0x4b, 0x69, 0x2e, 0x94, 0x92, 0x4f, 0xc6, 0xe9, 0x7b, 0xa1, 0xef,
	0x2b, 0x76, 0xfa, 0x5e, 0x48, 0x79, 0x89, 0x76, 0xa1, 0x94, 0x7c, 0xeb, 0x4d, 0x17, 0xd8, 0xf7,
	0xbd, 0x39, 0x5d, 0x60, 0xca, 0x13, 0x72, 0x13, 0xa6, 0xbb, 0x1f, 0x5b, 0x51, 0xaa, 0x53, 0x52,
	0xde, 0x80, 0xab, 0x2b, 0xc3, 0x33, 0x48, 0xb1, 0x2d, 0x98, 0xee, 0x7e, 0x27, 0x4d, 0x17, 0x9b,
	0xf2, 0x5e, 0x9b, 0x2e, 0x36, 0xed, 0x09, 0x76, 0x45, 0x61, 0xeb, 0xed, 0x6e, 0x7b, 0xa4, 0x0b,
	0x4e, 0x69, 0x33, 0xa5, 0x0b, 0x4e, 0xed, 0xa8, 0x34, 0x61, 0xba, 0xbb, 0x6c, 0x4f, 0x17, 0x9b,
	0xd2, 0x26, 0x49, 0x17, 0x9b, 0xda, 0x11, 0xf0, 0xa1, 0xdc, 0x55, 0xa4, 0xa6, 0x9f, 0xd0, 0xfe,
	0x1d, 0x80, 0xf4, 0x13, 0x9a, 0x56, 0xfd, 0xfe, 0x1c, 0xde, 0xea, 0x29, 0x2f, 0xd1, 0xca, 0x10,
	0xff, 0x73, 0x4a, 0x54, 0xc4, 0xd5, 0xcb, 0x23, 0x70, 0x44, 0xde, 0x6d, 0x27, 0x64, 0x8b, 0x62,
	0x72, 0x28, 0xd9, 0x89, 0x62, 0x75, 0x28, 0xd9, 0x5d, 0x95, 0xea, 0x1e, 0x14, 0xe2, 0x35, 0x5e,
	0xfa, 0xd5, 0xd7, 0xa7, 0x1a, 0x4d, 0xbf, 0xfa, 0xfa, 0x95, 0x8d, 0x2b, 0x0a, 0xfa, 0xa5, 0x02,
	0xb3, 0xfd, 0x0b, 0x26, 0xf4, 0xdd, 0x61, 0xfe, 0x50, 0xd6, 0x53, 0xec, 0x55, 0xaf, 0x8d, 0xca,
	0x26, 0x97, 0xfd, 0x0b, 0x40, 0xbd, 0xff, 0x12, 0x42, 0x97, 0x47, 0xfe, 0x57, 0x5b, 0x75, 0x75,
	0x14, 0x16, 0x29, 0xfc, 0xb9, 0x02, 0x33, 0xfd, 0xfe, 0xc9, 0x89, 0xae, 0xa4, 0x06, 0x86, 0xf4,
	0xbf, 0xa4, 0x56, 0xaf, 0x8e, 0xc6, 0x24, 0x74, 0x58, 0xf5, 0x3a, 0x7f, 0x98, 0x08, 0xd3, 0xab,
	0x4f, 0x21, 0x17, 0x0e, 0xa1, 0xf3, 0x83, 0x3a, 0x4e, 0xa1, 0xf4, 0xc5, 0xc1, 0x84, 0x42, 0x62,
	0xad, 0xf2, 0xd7, 0x17, 0xf3, 0xca, 0xd7, 0x2f, 0xe6, 0x95, 0x7f, 0xbe, 0x98, 0x57, 0x7e, 0xf5,
	0x72, 0x7e, 0xec, 0xeb, 0x97, 0xf3, 0x63, 0x7f, 0x7f, 0x39, 0x3f, 0xb6, 0x3d, 0xc9, 0xff, 0x7b,
	0x7b, 0xe5, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x74, 0x11, 0x80, 0x6a, 0x2c, 0x00, 0x00,
}

func (m *BroadcastTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Undelegations) > 0 {
		for iNdEx := len(m.Undelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Undelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Swaps) > 0 {
		for iNdEx := len(m.Swaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Swaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintView(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExpiryHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ExpiryHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *TransactionPlannerRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *TransactionPlannerRequest_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Swap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Swap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Swap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TargetAsset != nil {
		{
			size, err := m.TargetAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Delegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Undelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Undelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Undelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Plan != nil {
		{
			size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XAddressIndex != nil {
		{
			size := m.XAddressIndex.Size()
			i -= size
			if _, err := m.XAddressIndex.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IndexByAddressResponse_AddressIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexByAddressResponse_AddressIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EphemeralAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EphemeralAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalanceByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalanceByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewAuthToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewAuthToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewAuthToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintView(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewAuthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewAuthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewAuthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fvk != nil {
		{
			size, err := m.Fvk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewAuthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewAuthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewAuthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatusRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *StatusRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CatchingUp {
		i--
		if m.CatchingUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SyncHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatusStreamRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusStreamRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *StatusStreamRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusStreamRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *StatusStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.SyncHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.LatestKnownBlockHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.LatestKnownBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AmountToSpend != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.AmountToSpend))
		i--
		dAtA[i] = 0x28
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IncludeSpent {
		i--
		if m.IncludeSpent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *NotesRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *NotesRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *NotesForVotingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesForVotingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesForVotingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VotableAtHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.VotableAtHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotesForVotingRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesForVotingRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *NotesForVotingRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesForVotingRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *WitnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TransactionPlan != nil {
		{
			size, err := m.TransactionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NoteCommitments) > 0 {
		for iNdEx := len(m.NoteCommitments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NoteCommitments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *WitnessRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *WitnessRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *WitnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WitnessData != nil {
		{
			size, err := m.WitnessData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeVotingReceiptTokens {
		i--
		if m.IncludeVotingReceiptTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IncludeProposalNfts {
		i--
		if m.IncludeProposalNfts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IncludeLpNfts {
		i--
		if m.IncludeLpNfts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IncludeUnbondingTokens {
		i--
		if m.IncludeUnbondingTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IncludeDelegationTokens {
		i--
		if m.IncludeDelegationTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.IncludeSpecificDenominations) > 0 {
		for iNdEx := len(m.IncludeSpecificDenominations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeSpecificDenominations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Filtered {
		i--
		if m.Filtered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChainParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FMDParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FMDParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FMDParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FMDParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FMDParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FMDParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoteByCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoteByCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteByCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *NoteByCommitmentRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteByCommitmentRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *NoteByCommitmentRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteByCommitmentRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *NoteByCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoteByCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteByCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpendableNote != nil {
		{
			size, err := m.SpendableNote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapByCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapByCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapByCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SwapCommitment != nil {
		{
			size, err := m.SwapCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SwapByCommitmentRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapByCommitmentRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *SwapByCommitmentRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapByCommitmentRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *SwapByCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapByCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapByCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NullifierStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullifierStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullifierStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XToken != nil {
		{
			size := m.XToken.Size()
			i -= size
			if _, err := m.XToken.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAccountId != nil {
		{
			size := m.XAccountId.Size()
			i -= size
			if _, err := m.XAccountId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *NullifierStatusRequest_AccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullifierStatusRequest_AccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccountId != nil {
		{
			size, err := m.AccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *NullifierStatusRequest_Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullifierStatusRequest_Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *NullifierStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullifierStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullifierStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spent {
		i--
		if m.Spent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionHashesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionHashesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionHashesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XEndHeight != nil {
		{
			size := m.XEndHeight.Size()
			i -= size
			if _, err := m.XEndHeight.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XStartHeight != nil {
		{
			size := m.XStartHeight.Size()
			i -= size
			if _, err := m.XStartHeight.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionHashesRequest_StartHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionHashesRequest_StartHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintView(dAtA, i, uint64(m.StartHeight))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *TransactionHashesRequest_EndHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionHashesRequest_EndHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintView(dAtA, i, uint64(m.EndHeight))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *TransactionHashesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionHashesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionHashesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintView(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionByHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionByHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionByHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintView(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XEndHeight != nil {
		{
			size := m.XEndHeight.Size()
			i -= size
			if _, err := m.XEndHeight.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XStartHeight != nil {
		{
			size := m.XStartHeight.Size()
			i -= size
			if _, err := m.XStartHeight.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionsRequest_StartHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsRequest_StartHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintView(dAtA, i, uint64(m.StartHeight))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *TransactionsRequest_EndHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsRequest_EndHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintView(dAtA, i, uint64(m.EndHeight))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *TransactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintView(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPerspectiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPerspectiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPerspectiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintView(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPerspectiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPerspectiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPerspectiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Txp != nil {
		{
			size, err := m.Txp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoteRecord != nil {
		{
			size, err := m.NoteRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotesForVotingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesForVotingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesForVotingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NoteRecord != nil {
		{
			size, err := m.NoteRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpendableNoteRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendableNoteRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendableNoteRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Position != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x38
	}
	if m.XHeightSpent != nil {
		{
			size := m.XHeightSpent.Size()
			i -= size
			if _, err := m.XHeightSpent.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HeightCreated != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.HeightCreated))
		i--
		dAtA[i] = 0x28
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Note != nil {
		{
			size, err := m.Note.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpendableNoteRecord_HeightSpent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendableNoteRecord_HeightSpent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintView(dAtA, i, uint64(m.HeightSpent))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *SwapRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.XHeightClaimed != nil {
		{
			size := m.XHeightClaimed.Size()
			i -= size
			if _, err := m.XHeightClaimed.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutputData != nil {
		{
			size, err := m.OutputData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Position != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SwapCommitment != nil {
		{
			size, err := m.SwapCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapRecord_HeightClaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapRecord_HeightClaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintView(dAtA, i, uint64(m.HeightClaimed))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func encodeVarintView(dAtA []byte, offset int, v uint64) int {
	offset -= sovView(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BroadcastTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *BroadcastTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpiryHeight != 0 {
		n += 1 + sovView(uint64(m.ExpiryHeight))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovView(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Swaps) > 0 {
		for _, e := range m.Swaps {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Undelegations) > 0 {
		for _, e := range m.Undelegations {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	return n
}

func (m *TransactionPlannerRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *TransactionPlannerRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *TransactionPlannerRequest_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Swap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.TargetAsset != nil {
		l = m.TargetAsset.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Undelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AddressByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AddressByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *IndexByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *IndexByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XAddressIndex != nil {
		n += m.XAddressIndex.Size()
	}
	return n
}

func (m *IndexByAddressResponse_AddressIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *EphemeralAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *EphemeralAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BalanceByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BalanceByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *ViewAuthToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *ViewAuthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fvk != nil {
		l = m.Fvk.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *ViewAuthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	return n
}

func (m *StatusRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *StatusRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncHeight != 0 {
		n += 1 + sovView(uint64(m.SyncHeight))
	}
	if m.CatchingUp {
		n += 2
	}
	return n
}

func (m *StatusStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	return n
}

func (m *StatusStreamRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *StatusStreamRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *StatusStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestKnownBlockHeight != 0 {
		n += 1 + sovView(uint64(m.LatestKnownBlockHeight))
	}
	if m.SyncHeight != 0 {
		n += 1 + sovView(uint64(m.SyncHeight))
	}
	return n
}

func (m *NotesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeSpent {
		n += 2
	}
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AmountToSpend != 0 {
		n += 1 + sovView(uint64(m.AmountToSpend))
	}
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	return n
}

func (m *NotesRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *NotesRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *NotesForVotingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotableAtHeight != 0 {
		n += 1 + sovView(uint64(m.VotableAtHeight))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	return n
}

func (m *NotesForVotingRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *NotesForVotingRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *WitnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NoteCommitments) > 0 {
		for _, e := range m.NoteCommitments {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.TransactionPlan != nil {
		l = m.TransactionPlan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	return n
}

func (m *WitnessRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *WitnessRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *WitnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WitnessData != nil {
		l = m.WitnessData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filtered {
		n += 2
	}
	if len(m.IncludeSpecificDenominations) > 0 {
		for _, e := range m.IncludeSpecificDenominations {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.IncludeDelegationTokens {
		n += 2
	}
	if m.IncludeUnbondingTokens {
		n += 2
	}
	if m.IncludeLpNfts {
		n += 2
	}
	if m.IncludeProposalNfts {
		n += 2
	}
	if m.IncludeVotingReceiptTokens {
		n += 2
	}
	return n
}

func (m *AssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *ChainParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChainParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *FMDParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FMDParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NoteByCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	return n
}

func (m *NoteByCommitmentRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *NoteByCommitmentRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *NoteByCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpendableNote != nil {
		l = m.SpendableNote.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SwapByCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapCommitment != nil {
		l = m.SwapCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	return n
}

func (m *SwapByCommitmentRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *SwapByCommitmentRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *SwapByCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NullifierStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	if m.XAccountId != nil {
		n += m.XAccountId.Size()
	}
	if m.XToken != nil {
		n += m.XToken.Size()
	}
	return n
}

func (m *NullifierStatusRequest_AccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != nil {
		l = m.AccountId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *NullifierStatusRequest_Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *NullifierStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spent {
		n += 2
	}
	return n
}

func (m *TransactionHashesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XStartHeight != nil {
		n += m.XStartHeight.Size()
	}
	if m.XEndHeight != nil {
		n += m.XEndHeight.Size()
	}
	return n
}

func (m *TransactionHashesRequest_StartHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovView(uint64(m.StartHeight))
	return n
}
func (m *TransactionHashesRequest_EndHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovView(uint64(m.EndHeight))
	return n
}
func (m *TransactionHashesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovView(uint64(m.BlockHeight))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionByHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XStartHeight != nil {
		n += m.XStartHeight.Size()
	}
	if m.XEndHeight != nil {
		n += m.XEndHeight.Size()
	}
	return n
}

func (m *TransactionsRequest_StartHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovView(uint64(m.StartHeight))
	return n
}
func (m *TransactionsRequest_EndHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovView(uint64(m.EndHeight))
	return n
}
func (m *TransactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovView(uint64(m.BlockHeight))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPerspectiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPerspectiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Txp != nil {
		l = m.Txp.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteRecord != nil {
		l = m.NoteRecord.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NotesForVotingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteRecord != nil {
		l = m.NoteRecord.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SpendableNoteRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Note != nil {
		l = m.Note.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.HeightCreated != 0 {
		n += 1 + sovView(uint64(m.HeightCreated))
	}
	if m.XHeightSpent != nil {
		n += m.XHeightSpent.Size()
	}
	if m.Position != 0 {
		n += 1 + sovView(uint64(m.Position))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SpendableNoteRecord_HeightSpent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovView(uint64(m.HeightSpent))
	return n
}
func (m *SwapRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapCommitment != nil {
		l = m.SwapCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovView(uint64(m.Position))
	}
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.OutputData != nil {
		l = m.OutputData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.XHeightClaimed != nil {
		n += m.XHeightClaimed.Size()
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SwapRecord_HeightClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovView(uint64(m.HeightClaimed))
	return n
}

func sovView(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozView(x uint64) (n int) {
	return sovView(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BroadcastTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1alpha1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v1alpha1.Id{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPlannerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPlannerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryHeight", wireType)
			}
			m.ExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &v1alpha11.Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &TransactionPlannerRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &TransactionPlannerRequest_Token{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &TransactionPlannerRequest_Output{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swaps = append(m.Swaps, &TransactionPlannerRequest_Swap{})
			if err := m.Swaps[len(m.Swaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &TransactionPlannerRequest_Delegate{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Undelegations = append(m.Undelegations, &TransactionPlannerRequest_Undelegate{})
			if err := m.Undelegations[len(m.Undelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v1alpha11.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha11.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Swap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Swap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Swap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v1alpha11.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetAsset == nil {
				m.TargetAsset = &v1alpha11.AssetId{}
			}
			if err := m.TargetAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &v1alpha11.Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Delegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &v1alpha11.Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v1alpha11.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Undelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Undelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Undelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v1alpha11.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPlannerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPlannerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &v1alpha1.TransactionPlan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha11.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha11.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha11.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AddressIndex{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAddressIndex = &IndexByAddressResponse_AddressIndex{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha11.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha11.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha11.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &v1alpha11.AssetId{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &v1alpha11.Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewAuthToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewAuthToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewAuthToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewAuthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewAuthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewAuthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fvk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fvk == nil {
				m.Fvk = &v1alpha11.FullViewingKey{}
			}
			if err := m.Fvk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewAuthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewAuthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewAuthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &ViewAuthToken{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &StatusRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &StatusRequest_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncHeight", wireType)
			}
			m.SyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchingUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CatchingUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &StatusStreamRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &StatusStreamRequest_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestKnownBlockHeight", wireType)
			}
			m.LatestKnownBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestKnownBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncHeight", wireType)
			}
			m.SyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSpent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSpent = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &v1alpha11.AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha11.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountToSpend", wireType)
			}
			m.AmountToSpend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountToSpend |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &NotesRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &NotesRequest_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesForVotingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesForVotingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesForVotingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotableAtHeight", wireType)
			}
			m.VotableAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotableAtHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha11.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &NotesForVotingRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &NotesForVotingRequest_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoteCommitments = append(m.NoteCommitments, &v1alpha11.StateCommitment{})
			if err := m.NoteCommitments[len(m.NoteCommitments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPlan == nil {
				m.TransactionPlan = &v1alpha1.TransactionPlan{}
			}
			if err := m.TransactionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &WitnessRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &WitnessRequest_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessData == nil {
				m.WitnessData = &v1alpha1.WitnessData{}
			}
			if err := m.WitnessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filtered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Filtered = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSpecificDenominations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeSpecificDenominations = append(m.IncludeSpecificDenominations, &v1alpha11.Denom{})
			if err := m.IncludeSpecificDenominations[len(m.IncludeSpecificDenominations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeDelegationTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeDelegationTokens = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeUnbondingTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeUnbondingTokens = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeLpNfts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeLpNfts = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeProposalNfts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeProposalNfts = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeVotingReceiptTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeVotingReceiptTokens = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &v1alpha11.Asset{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &v1alpha12.ChainParameters{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMDParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMDParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMDParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMDParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMDParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMDParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &v1alpha12.FmdParameters{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoteByCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoteByCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoteByCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &v1alpha11.StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &NoteByCommitmentRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &NoteByCommitmentRequest_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoteByCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoteByCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoteByCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendableNote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpendableNote == nil {
				m.SpendableNote = &SpendableNoteRecord{}
			}
			if err := m.SpendableNote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapByCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapByCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapByCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapCommitment == nil {
				m.SwapCommitment = &v1alpha11.StateCommitment{}
			}
			if err := m.SwapCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &SwapByCommitmentRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &SwapByCommitmentRequest_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapByCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapByCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapByCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &SwapRecord{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullifierStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullifierStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullifierStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v1alpha11.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v1alpha11.AccountID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XAccountId = &NullifierStatusRequest_AccountId{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewAuthToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XToken = &NullifierStatusRequest_Token{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullifierStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullifierStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullifierStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionHashesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionHashesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionHashesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XStartHeight = &TransactionHashesRequest_StartHeight{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XEndHeight = &TransactionHashesRequest_EndHeight{v}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionHashesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionHashesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionHashesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionByHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionByHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionByHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &v1alpha1.Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XStartHeight = &TransactionsRequest_StartHeight{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XEndHeight = &TransactionsRequest_EndHeight{v}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &v1alpha1.Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPerspectiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPerspectiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPerspectiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPerspectiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPerspectiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPerspectiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txp == nil {
				m.Txp = &v1alpha1.TransactionPerspective{}
			}
			if err := m.Txp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &v1alpha1.Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteRecord == nil {
				m.NoteRecord = &SpendableNoteRecord{}
			}
			if err := m.NoteRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesForVotingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesForVotingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesForVotingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteRecord == nil {
				m.NoteRecord = &SpendableNoteRecord{}
			}
			if err := m.NoteRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v1alpha11.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendableNoteRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendableNoteRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendableNoteRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &v1alpha11.StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Note == nil {
				m.Note = &v1alpha11.Note{}
			}
			if err := m.Note.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v1alpha11.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v1alpha11.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightCreated", wireType)
			}
			m.HeightCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightCreated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightSpent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XHeightSpent = &SpendableNoteRecord_HeightSpent{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &v1alpha12.NoteSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapCommitment == nil {
				m.SwapCommitment = &v1alpha11.StateCommitment{}
			}
			if err := m.SwapCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &v1alpha13.SwapPlaintext{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v1alpha11.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputData == nil {
				m.OutputData = &v1alpha13.BatchSwapOutputData{}
			}
			if err := m.OutputData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightClaimed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XHeightClaimed = &SwapRecord_HeightClaimed{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &v1alpha12.NoteSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipView(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowView
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthView
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupView
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthView
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthView        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowView          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupView = fmt.Errorf("proto: unexpected end of group")
)

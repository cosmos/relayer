// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/view/v1/view.proto

package viewv1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	v111 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/app/v1"
	v16 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/asset/v1"
	v110 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/dex/v1"
	v14 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/fee/v1"
	v13 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/ibc/v1"
	v15 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/sct/v1"
	v112 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/shielded_pool/v1"
	v19 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/stake/v1"
	v12 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/keys/v1"
	v18 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/num/v1"
	v1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/transaction/v1"
	v11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/txhash/v1"
	v17 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/crypto/tct/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationsByAddressIndexRequest_Filter int32

const (
	// By default, returns delegations for all active validators. For validators
	// that the given address index has no delegation tokens for, a `ValueView`
	// with a balance of `0` will be returned.
	DelegationsByAddressIndexRequest_FILTER_UNSPECIFIED DelegationsByAddressIndexRequest_Filter = 0
	// Returns only delegations to active validators that the given address
	// index holds delegation tokens for.
	DelegationsByAddressIndexRequest_FILTER_ALL_ACTIVE_WITH_NONZERO_BALANCES DelegationsByAddressIndexRequest_Filter = 1
	// Return delegations for all validators, whether active or not. For
	// validators that the given address index has no delegation tokens for, a
	// `ValueView` with a balance of `0` will be returned.
	DelegationsByAddressIndexRequest_FILTER_ALL DelegationsByAddressIndexRequest_Filter = 2
)

var DelegationsByAddressIndexRequest_Filter_name = map[int32]string{
	0: "FILTER_UNSPECIFIED",
	1: "FILTER_ALL_ACTIVE_WITH_NONZERO_BALANCES",
	2: "FILTER_ALL",
}

var DelegationsByAddressIndexRequest_Filter_value = map[string]int32{
	"FILTER_UNSPECIFIED":                      0,
	"FILTER_ALL_ACTIVE_WITH_NONZERO_BALANCES": 1,
	"FILTER_ALL":                              2,
}

func (x DelegationsByAddressIndexRequest_Filter) String() string {
	return proto.EnumName(DelegationsByAddressIndexRequest_Filter_name, int32(x))
}

func (DelegationsByAddressIndexRequest_Filter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{55, 0}
}

type AuthorizeAndBuildRequest struct {
	// The transaction plan to authorize and build.
	TransactionPlan *v1.TransactionPlan `protobuf:"bytes,1,opt,name=transaction_plan,json=transactionPlan,proto3" json:"transaction_plan,omitempty"`
}

func (m *AuthorizeAndBuildRequest) Reset()         { *m = AuthorizeAndBuildRequest{} }
func (m *AuthorizeAndBuildRequest) String() string { return proto.CompactTextString(m) }
func (*AuthorizeAndBuildRequest) ProtoMessage()    {}
func (*AuthorizeAndBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{0}
}
func (m *AuthorizeAndBuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeAndBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeAndBuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeAndBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeAndBuildRequest.Merge(m, src)
}
func (m *AuthorizeAndBuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeAndBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeAndBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeAndBuildRequest proto.InternalMessageInfo

func (m *AuthorizeAndBuildRequest) GetTransactionPlan() *v1.TransactionPlan {
	if m != nil {
		return m.TransactionPlan
	}
	return nil
}

type AuthorizeAndBuildResponse struct {
	// Types that are valid to be assigned to Status:
	//	*AuthorizeAndBuildResponse_BuildProgress_
	//	*AuthorizeAndBuildResponse_Complete_
	Status isAuthorizeAndBuildResponse_Status `protobuf_oneof:"status"`
}

func (m *AuthorizeAndBuildResponse) Reset()         { *m = AuthorizeAndBuildResponse{} }
func (m *AuthorizeAndBuildResponse) String() string { return proto.CompactTextString(m) }
func (*AuthorizeAndBuildResponse) ProtoMessage()    {}
func (*AuthorizeAndBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{1}
}
func (m *AuthorizeAndBuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeAndBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeAndBuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeAndBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeAndBuildResponse.Merge(m, src)
}
func (m *AuthorizeAndBuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeAndBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeAndBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeAndBuildResponse proto.InternalMessageInfo

type isAuthorizeAndBuildResponse_Status interface {
	isAuthorizeAndBuildResponse_Status()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthorizeAndBuildResponse_BuildProgress_ struct {
	BuildProgress *AuthorizeAndBuildResponse_BuildProgress `protobuf:"bytes,1,opt,name=build_progress,json=buildProgress,proto3,oneof" json:"build_progress,omitempty"`
}
type AuthorizeAndBuildResponse_Complete_ struct {
	Complete *AuthorizeAndBuildResponse_Complete `protobuf:"bytes,2,opt,name=complete,proto3,oneof" json:"complete,omitempty"`
}

func (*AuthorizeAndBuildResponse_BuildProgress_) isAuthorizeAndBuildResponse_Status() {}
func (*AuthorizeAndBuildResponse_Complete_) isAuthorizeAndBuildResponse_Status()      {}

func (m *AuthorizeAndBuildResponse) GetStatus() isAuthorizeAndBuildResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AuthorizeAndBuildResponse) GetBuildProgress() *AuthorizeAndBuildResponse_BuildProgress {
	if x, ok := m.GetStatus().(*AuthorizeAndBuildResponse_BuildProgress_); ok {
		return x.BuildProgress
	}
	return nil
}

func (m *AuthorizeAndBuildResponse) GetComplete() *AuthorizeAndBuildResponse_Complete {
	if x, ok := m.GetStatus().(*AuthorizeAndBuildResponse_Complete_); ok {
		return x.Complete
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthorizeAndBuildResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthorizeAndBuildResponse_BuildProgress_)(nil),
		(*AuthorizeAndBuildResponse_Complete_)(nil),
	}
}

// Signals that building is in progress.
type AuthorizeAndBuildResponse_BuildProgress struct {
	// An approximate progress of the build, from 0 to 1.
	Progress float32 `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *AuthorizeAndBuildResponse_BuildProgress) Reset() {
	*m = AuthorizeAndBuildResponse_BuildProgress{}
}
func (m *AuthorizeAndBuildResponse_BuildProgress) String() string { return proto.CompactTextString(m) }
func (*AuthorizeAndBuildResponse_BuildProgress) ProtoMessage()    {}
func (*AuthorizeAndBuildResponse_BuildProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{1, 0}
}
func (m *AuthorizeAndBuildResponse_BuildProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeAndBuildResponse_BuildProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeAndBuildResponse_BuildProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeAndBuildResponse_BuildProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeAndBuildResponse_BuildProgress.Merge(m, src)
}
func (m *AuthorizeAndBuildResponse_BuildProgress) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeAndBuildResponse_BuildProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeAndBuildResponse_BuildProgress.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeAndBuildResponse_BuildProgress proto.InternalMessageInfo

func (m *AuthorizeAndBuildResponse_BuildProgress) GetProgress() float32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

// Signals that the transaction is complete.
type AuthorizeAndBuildResponse_Complete struct {
	// The finished transaction.
	Transaction *v1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *AuthorizeAndBuildResponse_Complete) Reset()         { *m = AuthorizeAndBuildResponse_Complete{} }
func (m *AuthorizeAndBuildResponse_Complete) String() string { return proto.CompactTextString(m) }
func (*AuthorizeAndBuildResponse_Complete) ProtoMessage()    {}
func (*AuthorizeAndBuildResponse_Complete) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{1, 1}
}
func (m *AuthorizeAndBuildResponse_Complete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeAndBuildResponse_Complete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeAndBuildResponse_Complete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeAndBuildResponse_Complete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeAndBuildResponse_Complete.Merge(m, src)
}
func (m *AuthorizeAndBuildResponse_Complete) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeAndBuildResponse_Complete) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeAndBuildResponse_Complete.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeAndBuildResponse_Complete proto.InternalMessageInfo

func (m *AuthorizeAndBuildResponse_Complete) GetTransaction() *v1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type BroadcastTransactionRequest struct {
	// The transaction to broadcast.
	Transaction *v1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// If true, wait for the view service to detect the transaction during sync.
	AwaitDetection bool `protobuf:"varint,2,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *BroadcastTransactionRequest) Reset()         { *m = BroadcastTransactionRequest{} }
func (m *BroadcastTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastTransactionRequest) ProtoMessage()    {}
func (*BroadcastTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{2}
}
func (m *BroadcastTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTransactionRequest.Merge(m, src)
}
func (m *BroadcastTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTransactionRequest proto.InternalMessageInfo

func (m *BroadcastTransactionRequest) GetTransaction() *v1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *BroadcastTransactionRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type BroadcastTransactionResponse struct {
	// Types that are valid to be assigned to Status:
	//	*BroadcastTransactionResponse_BroadcastSuccess_
	//	*BroadcastTransactionResponse_Confirmed_
	Status isBroadcastTransactionResponse_Status `protobuf_oneof:"status"`
}

func (m *BroadcastTransactionResponse) Reset()         { *m = BroadcastTransactionResponse{} }
func (m *BroadcastTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastTransactionResponse) ProtoMessage()    {}
func (*BroadcastTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{3}
}
func (m *BroadcastTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTransactionResponse.Merge(m, src)
}
func (m *BroadcastTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTransactionResponse proto.InternalMessageInfo

type isBroadcastTransactionResponse_Status interface {
	isBroadcastTransactionResponse_Status()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BroadcastTransactionResponse_BroadcastSuccess_ struct {
	BroadcastSuccess *BroadcastTransactionResponse_BroadcastSuccess `protobuf:"bytes,1,opt,name=broadcast_success,json=broadcastSuccess,proto3,oneof" json:"broadcast_success,omitempty"`
}
type BroadcastTransactionResponse_Confirmed_ struct {
	Confirmed *BroadcastTransactionResponse_Confirmed `protobuf:"bytes,2,opt,name=confirmed,proto3,oneof" json:"confirmed,omitempty"`
}

func (*BroadcastTransactionResponse_BroadcastSuccess_) isBroadcastTransactionResponse_Status() {}
func (*BroadcastTransactionResponse_Confirmed_) isBroadcastTransactionResponse_Status()        {}

func (m *BroadcastTransactionResponse) GetStatus() isBroadcastTransactionResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BroadcastTransactionResponse) GetBroadcastSuccess() *BroadcastTransactionResponse_BroadcastSuccess {
	if x, ok := m.GetStatus().(*BroadcastTransactionResponse_BroadcastSuccess_); ok {
		return x.BroadcastSuccess
	}
	return nil
}

func (m *BroadcastTransactionResponse) GetConfirmed() *BroadcastTransactionResponse_Confirmed {
	if x, ok := m.GetStatus().(*BroadcastTransactionResponse_Confirmed_); ok {
		return x.Confirmed
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BroadcastTransactionResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BroadcastTransactionResponse_BroadcastSuccess_)(nil),
		(*BroadcastTransactionResponse_Confirmed_)(nil),
	}
}

// Signals that the transaction was broadcast successfully (but has not been confirmed).
type BroadcastTransactionResponse_BroadcastSuccess struct {
	// The hash of the transaction that was broadcast.
	Id *v11.TransactionId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BroadcastTransactionResponse_BroadcastSuccess) Reset() {
	*m = BroadcastTransactionResponse_BroadcastSuccess{}
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) String() string {
	return proto.CompactTextString(m)
}
func (*BroadcastTransactionResponse_BroadcastSuccess) ProtoMessage() {}
func (*BroadcastTransactionResponse_BroadcastSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{3, 0}
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTransactionResponse_BroadcastSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTransactionResponse_BroadcastSuccess.Merge(m, src)
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTransactionResponse_BroadcastSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTransactionResponse_BroadcastSuccess proto.InternalMessageInfo

func (m *BroadcastTransactionResponse_BroadcastSuccess) GetId() *v11.TransactionId {
	if m != nil {
		return m.Id
	}
	return nil
}

// Signals that the transaction has been confirmed on-chain and detected by the view server.
//
// Will not be sent unless await_detection was true.
type BroadcastTransactionResponse_Confirmed struct {
	// The hash of the transaction that was broadcast.
	Id *v11.TransactionId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The height in which the transaction was detected as included in the chain, if any.
	DetectionHeight uint64 `protobuf:"varint,2,opt,name=detection_height,json=detectionHeight,proto3" json:"detection_height,omitempty"`
}

func (m *BroadcastTransactionResponse_Confirmed) Reset() {
	*m = BroadcastTransactionResponse_Confirmed{}
}
func (m *BroadcastTransactionResponse_Confirmed) String() string { return proto.CompactTextString(m) }
func (*BroadcastTransactionResponse_Confirmed) ProtoMessage()    {}
func (*BroadcastTransactionResponse_Confirmed) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{3, 1}
}
func (m *BroadcastTransactionResponse_Confirmed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastTransactionResponse_Confirmed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastTransactionResponse_Confirmed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastTransactionResponse_Confirmed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastTransactionResponse_Confirmed.Merge(m, src)
}
func (m *BroadcastTransactionResponse_Confirmed) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastTransactionResponse_Confirmed) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastTransactionResponse_Confirmed.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastTransactionResponse_Confirmed proto.InternalMessageInfo

func (m *BroadcastTransactionResponse_Confirmed) GetId() *v11.TransactionId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BroadcastTransactionResponse_Confirmed) GetDetectionHeight() uint64 {
	if m != nil {
		return m.DetectionHeight
	}
	return 0
}

type TransactionPlannerRequest struct {
	// The expiry height for the requested TransactionPlan
	ExpiryHeight uint64 `protobuf:"varint,1,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	// The memo for the requested TransactionPlan.
	// The memo must be unspecified unless `outputs` is nonempty.
	Memo *v1.MemoPlaintext `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// If present, only spends funds from the given account.
	Source *v12.AddressIndex `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Request contents
	Outputs            []*TransactionPlannerRequest_Output           `protobuf:"bytes,20,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Swaps              []*TransactionPlannerRequest_Swap             `protobuf:"bytes,30,rep,name=swaps,proto3" json:"swaps,omitempty"`
	SwapClaims         []*TransactionPlannerRequest_SwapClaim        `protobuf:"bytes,31,rep,name=swap_claims,json=swapClaims,proto3" json:"swap_claims,omitempty"`
	Delegations        []*TransactionPlannerRequest_Delegate         `protobuf:"bytes,40,rep,name=delegations,proto3" json:"delegations,omitempty"`
	Undelegations      []*TransactionPlannerRequest_Undelegate       `protobuf:"bytes,50,rep,name=undelegations,proto3" json:"undelegations,omitempty"`
	UndelegationClaims []*TransactionPlannerRequest_UndelegateClaim  `protobuf:"bytes,51,rep,name=undelegation_claims,json=undelegationClaims,proto3" json:"undelegation_claims,omitempty"`
	IbcRelayActions    []*v13.IbcRelay                               `protobuf:"bytes,60,rep,name=ibc_relay_actions,json=ibcRelayActions,proto3" json:"ibc_relay_actions,omitempty"`
	Ics20Withdrawals   []*v13.Ics20Withdrawal                        `protobuf:"bytes,61,rep,name=ics20_withdrawals,json=ics20Withdrawals,proto3" json:"ics20_withdrawals,omitempty"`
	PositionOpens      []*TransactionPlannerRequest_PositionOpen     `protobuf:"bytes,70,rep,name=position_opens,json=positionOpens,proto3" json:"position_opens,omitempty"`
	PositionCloses     []*TransactionPlannerRequest_PositionClose    `protobuf:"bytes,71,rep,name=position_closes,json=positionCloses,proto3" json:"position_closes,omitempty"`
	PositionWithdraws  []*TransactionPlannerRequest_PositionWithdraw `protobuf:"bytes,72,rep,name=position_withdraws,json=positionWithdraws,proto3" json:"position_withdraws,omitempty"`
	// Specifies either that the planner should compute fees automatically or that it should use a fixed fee amount.
	//
	// Types that are valid to be assigned to FeeMode:
	//	*TransactionPlannerRequest_AutoFee
	//	*TransactionPlannerRequest_ManualFee
	FeeMode isTransactionPlannerRequest_FeeMode `protobuf_oneof:"fee_mode"`
	// The epoch index of the transaction being planned.
	EpochIndex uint64 `protobuf:"varint,200,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"` // Deprecated: Do not use.
	// The epoch of the transaction being planned.
	Epoch *v15.Epoch `protobuf:"bytes,201,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *TransactionPlannerRequest) Reset()         { *m = TransactionPlannerRequest{} }
func (m *TransactionPlannerRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest) ProtoMessage()    {}
func (*TransactionPlannerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4}
}
func (m *TransactionPlannerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest.Merge(m, src)
}
func (m *TransactionPlannerRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest proto.InternalMessageInfo

type isTransactionPlannerRequest_FeeMode interface {
	isTransactionPlannerRequest_FeeMode()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransactionPlannerRequest_AutoFee struct {
	AutoFee *v14.FeeTier `protobuf:"bytes,100,opt,name=auto_fee,json=autoFee,proto3,oneof" json:"auto_fee,omitempty"`
}
type TransactionPlannerRequest_ManualFee struct {
	ManualFee *v14.Fee `protobuf:"bytes,101,opt,name=manual_fee,json=manualFee,proto3,oneof" json:"manual_fee,omitempty"`
}

func (*TransactionPlannerRequest_AutoFee) isTransactionPlannerRequest_FeeMode()   {}
func (*TransactionPlannerRequest_ManualFee) isTransactionPlannerRequest_FeeMode() {}

func (m *TransactionPlannerRequest) GetFeeMode() isTransactionPlannerRequest_FeeMode {
	if m != nil {
		return m.FeeMode
	}
	return nil
}

func (m *TransactionPlannerRequest) GetExpiryHeight() uint64 {
	if m != nil {
		return m.ExpiryHeight
	}
	return 0
}

func (m *TransactionPlannerRequest) GetMemo() *v1.MemoPlaintext {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *TransactionPlannerRequest) GetSource() *v12.AddressIndex {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *TransactionPlannerRequest) GetOutputs() []*TransactionPlannerRequest_Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TransactionPlannerRequest) GetSwaps() []*TransactionPlannerRequest_Swap {
	if m != nil {
		return m.Swaps
	}
	return nil
}

func (m *TransactionPlannerRequest) GetSwapClaims() []*TransactionPlannerRequest_SwapClaim {
	if m != nil {
		return m.SwapClaims
	}
	return nil
}

func (m *TransactionPlannerRequest) GetDelegations() []*TransactionPlannerRequest_Delegate {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *TransactionPlannerRequest) GetUndelegations() []*TransactionPlannerRequest_Undelegate {
	if m != nil {
		return m.Undelegations
	}
	return nil
}

func (m *TransactionPlannerRequest) GetUndelegationClaims() []*TransactionPlannerRequest_UndelegateClaim {
	if m != nil {
		return m.UndelegationClaims
	}
	return nil
}

func (m *TransactionPlannerRequest) GetIbcRelayActions() []*v13.IbcRelay {
	if m != nil {
		return m.IbcRelayActions
	}
	return nil
}

func (m *TransactionPlannerRequest) GetIcs20Withdrawals() []*v13.Ics20Withdrawal {
	if m != nil {
		return m.Ics20Withdrawals
	}
	return nil
}

func (m *TransactionPlannerRequest) GetPositionOpens() []*TransactionPlannerRequest_PositionOpen {
	if m != nil {
		return m.PositionOpens
	}
	return nil
}

func (m *TransactionPlannerRequest) GetPositionCloses() []*TransactionPlannerRequest_PositionClose {
	if m != nil {
		return m.PositionCloses
	}
	return nil
}

func (m *TransactionPlannerRequest) GetPositionWithdraws() []*TransactionPlannerRequest_PositionWithdraw {
	if m != nil {
		return m.PositionWithdraws
	}
	return nil
}

func (m *TransactionPlannerRequest) GetAutoFee() *v14.FeeTier {
	if x, ok := m.GetFeeMode().(*TransactionPlannerRequest_AutoFee); ok {
		return x.AutoFee
	}
	return nil
}

func (m *TransactionPlannerRequest) GetManualFee() *v14.Fee {
	if x, ok := m.GetFeeMode().(*TransactionPlannerRequest_ManualFee); ok {
		return x.ManualFee
	}
	return nil
}

// Deprecated: Do not use.
func (m *TransactionPlannerRequest) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

func (m *TransactionPlannerRequest) GetEpoch() *v15.Epoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransactionPlannerRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransactionPlannerRequest_AutoFee)(nil),
		(*TransactionPlannerRequest_ManualFee)(nil),
	}
}

// Request message subtypes
type TransactionPlannerRequest_Output struct {
	// The amount and denomination in which the Output is issued.
	Value *v16.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The address to which Output will be sent.
	Address *v12.Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *TransactionPlannerRequest_Output) Reset()         { *m = TransactionPlannerRequest_Output{} }
func (m *TransactionPlannerRequest_Output) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Output) ProtoMessage()    {}
func (*TransactionPlannerRequest_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 0}
}
func (m *TransactionPlannerRequest_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Output.Merge(m, src)
}
func (m *TransactionPlannerRequest_Output) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Output proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Output) GetValue() *v16.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionPlannerRequest_Output) GetAddress() *v12.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type TransactionPlannerRequest_Swap struct {
	// The input amount and denomination to be traded in the Swap.
	Value *v16.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The denomination to be received as a Output of the Swap.
	TargetAsset *v16.AssetId `protobuf:"bytes,2,opt,name=target_asset,json=targetAsset,proto3" json:"target_asset,omitempty"`
	// The pre-paid fee to be paid for claiming the Swap outputs.
	Fee *v14.Fee `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// The address to which swap claim output will be sent.
	ClaimAddress *v12.Address `protobuf:"bytes,4,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
}

func (m *TransactionPlannerRequest_Swap) Reset()         { *m = TransactionPlannerRequest_Swap{} }
func (m *TransactionPlannerRequest_Swap) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Swap) ProtoMessage()    {}
func (*TransactionPlannerRequest_Swap) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 1}
}
func (m *TransactionPlannerRequest_Swap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Swap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Swap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Swap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Swap.Merge(m, src)
}
func (m *TransactionPlannerRequest_Swap) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Swap) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Swap.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Swap proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Swap) GetValue() *v16.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionPlannerRequest_Swap) GetTargetAsset() *v16.AssetId {
	if m != nil {
		return m.TargetAsset
	}
	return nil
}

func (m *TransactionPlannerRequest_Swap) GetFee() *v14.Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *TransactionPlannerRequest_Swap) GetClaimAddress() *v12.Address {
	if m != nil {
		return m.ClaimAddress
	}
	return nil
}

type TransactionPlannerRequest_SwapClaim struct {
	// SwapCommitment to identify the Swap to be claimed.
	// Use the commitment from the Swap message:
	// penumbra.core.component.dex.v1.Swap.body.payload.commitment.
	SwapCommitment *v17.StateCommitment `protobuf:"bytes,1,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
}

func (m *TransactionPlannerRequest_SwapClaim) Reset()         { *m = TransactionPlannerRequest_SwapClaim{} }
func (m *TransactionPlannerRequest_SwapClaim) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_SwapClaim) ProtoMessage()    {}
func (*TransactionPlannerRequest_SwapClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 2}
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_SwapClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_SwapClaim.Merge(m, src)
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_SwapClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_SwapClaim.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_SwapClaim proto.InternalMessageInfo

func (m *TransactionPlannerRequest_SwapClaim) GetSwapCommitment() *v17.StateCommitment {
	if m != nil {
		return m.SwapCommitment
	}
	return nil
}

type TransactionPlannerRequest_Delegate struct {
	Amount   *v18.Amount   `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	RateData *v19.RateData `protobuf:"bytes,3,opt,name=rate_data,json=rateData,proto3" json:"rate_data,omitempty"`
}

func (m *TransactionPlannerRequest_Delegate) Reset()         { *m = TransactionPlannerRequest_Delegate{} }
func (m *TransactionPlannerRequest_Delegate) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Delegate) ProtoMessage()    {}
func (*TransactionPlannerRequest_Delegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 3}
}
func (m *TransactionPlannerRequest_Delegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Delegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Delegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Delegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Delegate.Merge(m, src)
}
func (m *TransactionPlannerRequest_Delegate) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Delegate) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Delegate.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Delegate proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Delegate) GetAmount() *v18.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransactionPlannerRequest_Delegate) GetRateData() *v19.RateData {
	if m != nil {
		return m.RateData
	}
	return nil
}

type TransactionPlannerRequest_Undelegate struct {
	Value    *v16.Value    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	RateData *v19.RateData `protobuf:"bytes,2,opt,name=rate_data,json=rateData,proto3" json:"rate_data,omitempty"`
}

func (m *TransactionPlannerRequest_Undelegate) Reset()         { *m = TransactionPlannerRequest_Undelegate{} }
func (m *TransactionPlannerRequest_Undelegate) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_Undelegate) ProtoMessage()    {}
func (*TransactionPlannerRequest_Undelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 4}
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_Undelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_Undelegate.Merge(m, src)
}
func (m *TransactionPlannerRequest_Undelegate) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_Undelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_Undelegate.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_Undelegate proto.InternalMessageInfo

func (m *TransactionPlannerRequest_Undelegate) GetValue() *v16.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransactionPlannerRequest_Undelegate) GetRateData() *v19.RateData {
	if m != nil {
		return m.RateData
	}
	return nil
}

type TransactionPlannerRequest_UndelegateClaim struct {
	// The identity key of the validator to finish undelegating from.
	ValidatorIdentity *v12.IdentityKey `protobuf:"bytes,1,opt,name=validator_identity,json=validatorIdentity,proto3" json:"validator_identity,omitempty"`
	// The epoch in which unbonding began, used to verify the penalty.
	StartEpochIndex uint64 `protobuf:"varint,2,opt,name=start_epoch_index,json=startEpochIndex,proto3" json:"start_epoch_index,omitempty"` // Deprecated: Do not use.
	// The penalty applied to undelegation, in bps^2 (10e-8).
	// In the happy path (no slashing), this is 0.
	Penalty *v19.Penalty `protobuf:"bytes,3,opt,name=penalty,proto3" json:"penalty,omitempty"`
	// The amount of unbonding tokens to claim.
	// This is a bare number because its denom is determined by the preceding data.
	UnbondingAmount *v18.Amount `protobuf:"bytes,4,opt,name=unbonding_amount,json=unbondingAmount,proto3" json:"unbonding_amount,omitempty"`
	// The height at which unbonding began.
	UnbondingStartHeight uint64 `protobuf:"varint,5,opt,name=unbonding_start_height,json=unbondingStartHeight,proto3" json:"unbonding_start_height,omitempty"`
}

func (m *TransactionPlannerRequest_UndelegateClaim) Reset() {
	*m = TransactionPlannerRequest_UndelegateClaim{}
}
func (m *TransactionPlannerRequest_UndelegateClaim) String() string {
	return proto.CompactTextString(m)
}
func (*TransactionPlannerRequest_UndelegateClaim) ProtoMessage() {}
func (*TransactionPlannerRequest_UndelegateClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 5}
}
func (m *TransactionPlannerRequest_UndelegateClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_UndelegateClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_UndelegateClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_UndelegateClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_UndelegateClaim.Merge(m, src)
}
func (m *TransactionPlannerRequest_UndelegateClaim) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_UndelegateClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_UndelegateClaim.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_UndelegateClaim proto.InternalMessageInfo

func (m *TransactionPlannerRequest_UndelegateClaim) GetValidatorIdentity() *v12.IdentityKey {
	if m != nil {
		return m.ValidatorIdentity
	}
	return nil
}

// Deprecated: Do not use.
func (m *TransactionPlannerRequest_UndelegateClaim) GetStartEpochIndex() uint64 {
	if m != nil {
		return m.StartEpochIndex
	}
	return 0
}

func (m *TransactionPlannerRequest_UndelegateClaim) GetPenalty() *v19.Penalty {
	if m != nil {
		return m.Penalty
	}
	return nil
}

func (m *TransactionPlannerRequest_UndelegateClaim) GetUnbondingAmount() *v18.Amount {
	if m != nil {
		return m.UnbondingAmount
	}
	return nil
}

func (m *TransactionPlannerRequest_UndelegateClaim) GetUnbondingStartHeight() uint64 {
	if m != nil {
		return m.UnbondingStartHeight
	}
	return 0
}

type TransactionPlannerRequest_PositionOpen struct {
	// Contains the data defining the position, sufficient to compute its `PositionId`.
	//
	// Positions are immutable, so the `PositionData` (and hence the `PositionId`)
	// are unchanged over the entire lifetime of the position.
	Position *v110.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *TransactionPlannerRequest_PositionOpen) Reset() {
	*m = TransactionPlannerRequest_PositionOpen{}
}
func (m *TransactionPlannerRequest_PositionOpen) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_PositionOpen) ProtoMessage()    {}
func (*TransactionPlannerRequest_PositionOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 6}
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_PositionOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_PositionOpen.Merge(m, src)
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_PositionOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_PositionOpen.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_PositionOpen proto.InternalMessageInfo

func (m *TransactionPlannerRequest_PositionOpen) GetPosition() *v110.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

type TransactionPlannerRequest_PositionClose struct {
	// The position to close.
	PositionId *v110.PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *TransactionPlannerRequest_PositionClose) Reset() {
	*m = TransactionPlannerRequest_PositionClose{}
}
func (m *TransactionPlannerRequest_PositionClose) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerRequest_PositionClose) ProtoMessage()    {}
func (*TransactionPlannerRequest_PositionClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 7}
}
func (m *TransactionPlannerRequest_PositionClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_PositionClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_PositionClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_PositionClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_PositionClose.Merge(m, src)
}
func (m *TransactionPlannerRequest_PositionClose) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_PositionClose) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_PositionClose.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_PositionClose proto.InternalMessageInfo

func (m *TransactionPlannerRequest_PositionClose) GetPositionId() *v110.PositionId {
	if m != nil {
		return m.PositionId
	}
	return nil
}

type TransactionPlannerRequest_PositionWithdraw struct {
	// The position to withdraw.
	PositionId *v110.PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// The position's final reserves.
	Reserves *v110.Reserves `protobuf:"bytes,2,opt,name=reserves,proto3" json:"reserves,omitempty"`
	// The trading pair of the position.
	TradingPair *v110.TradingPair `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *TransactionPlannerRequest_PositionWithdraw) Reset() {
	*m = TransactionPlannerRequest_PositionWithdraw{}
}
func (m *TransactionPlannerRequest_PositionWithdraw) String() string {
	return proto.CompactTextString(m)
}
func (*TransactionPlannerRequest_PositionWithdraw) ProtoMessage() {}
func (*TransactionPlannerRequest_PositionWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{4, 8}
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerRequest_PositionWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerRequest_PositionWithdraw.Merge(m, src)
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerRequest_PositionWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerRequest_PositionWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerRequest_PositionWithdraw proto.InternalMessageInfo

func (m *TransactionPlannerRequest_PositionWithdraw) GetPositionId() *v110.PositionId {
	if m != nil {
		return m.PositionId
	}
	return nil
}

func (m *TransactionPlannerRequest_PositionWithdraw) GetReserves() *v110.Reserves {
	if m != nil {
		return m.Reserves
	}
	return nil
}

func (m *TransactionPlannerRequest_PositionWithdraw) GetTradingPair() *v110.TradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type TransactionPlannerResponse struct {
	Plan *v1.TransactionPlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *TransactionPlannerResponse) Reset()         { *m = TransactionPlannerResponse{} }
func (m *TransactionPlannerResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionPlannerResponse) ProtoMessage()    {}
func (*TransactionPlannerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{5}
}
func (m *TransactionPlannerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionPlannerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionPlannerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionPlannerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPlannerResponse.Merge(m, src)
}
func (m *TransactionPlannerResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionPlannerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPlannerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPlannerResponse proto.InternalMessageInfo

func (m *TransactionPlannerResponse) GetPlan() *v1.TransactionPlan {
	if m != nil {
		return m.Plan
	}
	return nil
}

type AddressByIndexRequest struct {
	AddressIndex *v12.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *AddressByIndexRequest) Reset()         { *m = AddressByIndexRequest{} }
func (m *AddressByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*AddressByIndexRequest) ProtoMessage()    {}
func (*AddressByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{6}
}
func (m *AddressByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressByIndexRequest.Merge(m, src)
}
func (m *AddressByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddressByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddressByIndexRequest proto.InternalMessageInfo

func (m *AddressByIndexRequest) GetAddressIndex() *v12.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type AddressByIndexResponse struct {
	Address *v12.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AddressByIndexResponse) Reset()         { *m = AddressByIndexResponse{} }
func (m *AddressByIndexResponse) String() string { return proto.CompactTextString(m) }
func (*AddressByIndexResponse) ProtoMessage()    {}
func (*AddressByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{7}
}
func (m *AddressByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressByIndexResponse.Merge(m, src)
}
func (m *AddressByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddressByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddressByIndexResponse proto.InternalMessageInfo

func (m *AddressByIndexResponse) GetAddress() *v12.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type WalletIdRequest struct {
}

func (m *WalletIdRequest) Reset()         { *m = WalletIdRequest{} }
func (m *WalletIdRequest) String() string { return proto.CompactTextString(m) }
func (*WalletIdRequest) ProtoMessage()    {}
func (*WalletIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{8}
}
func (m *WalletIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletIdRequest.Merge(m, src)
}
func (m *WalletIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *WalletIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WalletIdRequest proto.InternalMessageInfo

type WalletIdResponse struct {
	WalletId *v12.WalletId `protobuf:"bytes,1,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (m *WalletIdResponse) Reset()         { *m = WalletIdResponse{} }
func (m *WalletIdResponse) String() string { return proto.CompactTextString(m) }
func (*WalletIdResponse) ProtoMessage()    {}
func (*WalletIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{9}
}
func (m *WalletIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletIdResponse.Merge(m, src)
}
func (m *WalletIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *WalletIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WalletIdResponse proto.InternalMessageInfo

func (m *WalletIdResponse) GetWalletId() *v12.WalletId {
	if m != nil {
		return m.WalletId
	}
	return nil
}

type IndexByAddressRequest struct {
	Address *v12.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *IndexByAddressRequest) Reset()         { *m = IndexByAddressRequest{} }
func (m *IndexByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*IndexByAddressRequest) ProtoMessage()    {}
func (*IndexByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{10}
}
func (m *IndexByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexByAddressRequest.Merge(m, src)
}
func (m *IndexByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *IndexByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndexByAddressRequest proto.InternalMessageInfo

func (m *IndexByAddressRequest) GetAddress() *v12.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type IndexByAddressResponse struct {
	// Will be absent if given an address not viewable by this viewing service
	AddressIndex *v12.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *IndexByAddressResponse) Reset()         { *m = IndexByAddressResponse{} }
func (m *IndexByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*IndexByAddressResponse) ProtoMessage()    {}
func (*IndexByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{11}
}
func (m *IndexByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexByAddressResponse.Merge(m, src)
}
func (m *IndexByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *IndexByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IndexByAddressResponse proto.InternalMessageInfo

func (m *IndexByAddressResponse) GetAddressIndex() *v12.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type EphemeralAddressRequest struct {
	AddressIndex *v12.AddressIndex `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *EphemeralAddressRequest) Reset()         { *m = EphemeralAddressRequest{} }
func (m *EphemeralAddressRequest) String() string { return proto.CompactTextString(m) }
func (*EphemeralAddressRequest) ProtoMessage()    {}
func (*EphemeralAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{12}
}
func (m *EphemeralAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EphemeralAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EphemeralAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralAddressRequest.Merge(m, src)
}
func (m *EphemeralAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralAddressRequest proto.InternalMessageInfo

func (m *EphemeralAddressRequest) GetAddressIndex() *v12.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type EphemeralAddressResponse struct {
	Address *v12.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EphemeralAddressResponse) Reset()         { *m = EphemeralAddressResponse{} }
func (m *EphemeralAddressResponse) String() string { return proto.CompactTextString(m) }
func (*EphemeralAddressResponse) ProtoMessage()    {}
func (*EphemeralAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{13}
}
func (m *EphemeralAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EphemeralAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EphemeralAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EphemeralAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EphemeralAddressResponse.Merge(m, src)
}
func (m *EphemeralAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *EphemeralAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EphemeralAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EphemeralAddressResponse proto.InternalMessageInfo

func (m *EphemeralAddressResponse) GetAddress() *v12.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type BalancesRequest struct {
	// If present, filter balances to only include the account specified by the `AddressIndex`.
	AccountFilter *v12.AddressIndex `protobuf:"bytes,1,opt,name=account_filter,json=accountFilter,proto3" json:"account_filter,omitempty"`
	// If present, filter balances to only include the specified asset ID.
	AssetIdFilter *v16.AssetId `protobuf:"bytes,2,opt,name=asset_id_filter,json=assetIdFilter,proto3" json:"asset_id_filter,omitempty"`
}

func (m *BalancesRequest) Reset()         { *m = BalancesRequest{} }
func (m *BalancesRequest) String() string { return proto.CompactTextString(m) }
func (*BalancesRequest) ProtoMessage()    {}
func (*BalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{14}
}
func (m *BalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalancesRequest.Merge(m, src)
}
func (m *BalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *BalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BalancesRequest proto.InternalMessageInfo

func (m *BalancesRequest) GetAccountFilter() *v12.AddressIndex {
	if m != nil {
		return m.AccountFilter
	}
	return nil
}

func (m *BalancesRequest) GetAssetIdFilter() *v16.AssetId {
	if m != nil {
		return m.AssetIdFilter
	}
	return nil
}

type BalancesResponse struct {
	// Deprecated: use `account_address` instead.
	Account *v12.AddressIndex `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"` // Deprecated: Do not use.
	// Deprecated: use `balance_view` instead.
	Balance *v16.Value `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"` // Deprecated: Do not use.
	// The default address for the account.
	//
	// Note that the returned balance is for all funds sent to the account,
	// not just funds sent to its default address.
	AccountAddress *v12.AddressView `protobuf:"bytes,3,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// The account's balance, with metadata.
	BalanceView *v16.ValueView `protobuf:"bytes,4,opt,name=balance_view,json=balanceView,proto3" json:"balance_view,omitempty"`
}

func (m *BalancesResponse) Reset()         { *m = BalancesResponse{} }
func (m *BalancesResponse) String() string { return proto.CompactTextString(m) }
func (*BalancesResponse) ProtoMessage()    {}
func (*BalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{15}
}
func (m *BalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalancesResponse.Merge(m, src)
}
func (m *BalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *BalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BalancesResponse proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *BalancesResponse) GetAccount() *v12.AddressIndex {
	if m != nil {
		return m.Account
	}
	return nil
}

// Deprecated: Do not use.
func (m *BalancesResponse) GetBalance() *v16.Value {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *BalancesResponse) GetAccountAddress() *v12.AddressView {
	if m != nil {
		return m.AccountAddress
	}
	return nil
}

func (m *BalancesResponse) GetBalanceView() *v16.ValueView {
	if m != nil {
		return m.BalanceView
	}
	return nil
}

// Requests sync status of the view service.
type StatusRequest struct {
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{16}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

// Returns the status of the view service and whether it is synchronized with the chain state.
type StatusResponse struct {
	// The height the view service has synchronized to so far when doing a full linear sync
	FullSyncHeight uint64 `protobuf:"varint,1,opt,name=full_sync_height,json=fullSyncHeight,proto3" json:"full_sync_height,omitempty"`
	// The height the view service has synchronized to so far when doing a partial sync
	PartialSyncHeight uint64 `protobuf:"varint,2,opt,name=partial_sync_height,json=partialSyncHeight,proto3" json:"partial_sync_height,omitempty"`
	// Whether the view service is catching up with the chain state
	CatchingUp bool `protobuf:"varint,3,opt,name=catching_up,json=catchingUp,proto3" json:"catching_up,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{17}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetFullSyncHeight() uint64 {
	if m != nil {
		return m.FullSyncHeight
	}
	return 0
}

func (m *StatusResponse) GetPartialSyncHeight() uint64 {
	if m != nil {
		return m.PartialSyncHeight
	}
	return 0
}

func (m *StatusResponse) GetCatchingUp() bool {
	if m != nil {
		return m.CatchingUp
	}
	return false
}

// Requests streaming updates on the sync height until the view service is synchronized.
type StatusStreamRequest struct {
}

func (m *StatusStreamRequest) Reset()         { *m = StatusStreamRequest{} }
func (m *StatusStreamRequest) String() string { return proto.CompactTextString(m) }
func (*StatusStreamRequest) ProtoMessage()    {}
func (*StatusStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{18}
}
func (m *StatusStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusStreamRequest.Merge(m, src)
}
func (m *StatusStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusStreamRequest proto.InternalMessageInfo

// A streaming sync status update
type StatusStreamResponse struct {
	// The latest known block height
	LatestKnownBlockHeight uint64 `protobuf:"varint,1,opt,name=latest_known_block_height,json=latestKnownBlockHeight,proto3" json:"latest_known_block_height,omitempty"`
	// The height the view service has synchronized to so far when doing a full linear sync
	FullSyncHeight uint64 `protobuf:"varint,2,opt,name=full_sync_height,json=fullSyncHeight,proto3" json:"full_sync_height,omitempty"`
	// The height the view service has synchronized to so far when doing a partial sync
	PartialSyncHeight uint64 `protobuf:"varint,3,opt,name=partial_sync_height,json=partialSyncHeight,proto3" json:"partial_sync_height,omitempty"`
}

func (m *StatusStreamResponse) Reset()         { *m = StatusStreamResponse{} }
func (m *StatusStreamResponse) String() string { return proto.CompactTextString(m) }
func (*StatusStreamResponse) ProtoMessage()    {}
func (*StatusStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{19}
}
func (m *StatusStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusStreamResponse.Merge(m, src)
}
func (m *StatusStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusStreamResponse proto.InternalMessageInfo

func (m *StatusStreamResponse) GetLatestKnownBlockHeight() uint64 {
	if m != nil {
		return m.LatestKnownBlockHeight
	}
	return 0
}

func (m *StatusStreamResponse) GetFullSyncHeight() uint64 {
	if m != nil {
		return m.FullSyncHeight
	}
	return 0
}

func (m *StatusStreamResponse) GetPartialSyncHeight() uint64 {
	if m != nil {
		return m.PartialSyncHeight
	}
	return 0
}

// A query for notes known by the view service.
//
// This message uses the fact that all proto fields are optional
// to allow various filtering on the returned notes.
type NotesRequest struct {
	// If set, return spent notes as well as unspent notes.
	IncludeSpent bool `protobuf:"varint,2,opt,name=include_spent,json=includeSpent,proto3" json:"include_spent,omitempty"`
	// If set, only return notes with the specified asset id.
	AssetId *v16.AssetId `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// If set, only return notes with the specified address incore.component.dex.v1.
	AddressIndex *v12.AddressIndex `protobuf:"bytes,4,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// If set, stop returning notes once the total exceeds this amount.
	//
	// Ignored if `asset_id` is unset or if `include_spent` is set.
	AmountToSpend *v18.Amount `protobuf:"bytes,6,opt,name=amount_to_spend,json=amountToSpend,proto3" json:"amount_to_spend,omitempty"`
}

func (m *NotesRequest) Reset()         { *m = NotesRequest{} }
func (m *NotesRequest) String() string { return proto.CompactTextString(m) }
func (*NotesRequest) ProtoMessage()    {}
func (*NotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{20}
}
func (m *NotesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesRequest.Merge(m, src)
}
func (m *NotesRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotesRequest proto.InternalMessageInfo

func (m *NotesRequest) GetIncludeSpent() bool {
	if m != nil {
		return m.IncludeSpent
	}
	return false
}

func (m *NotesRequest) GetAssetId() *v16.AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

func (m *NotesRequest) GetAddressIndex() *v12.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *NotesRequest) GetAmountToSpend() *v18.Amount {
	if m != nil {
		return m.AmountToSpend
	}
	return nil
}

// A query for notes to be used for voting on a proposal.
type NotesForVotingRequest struct {
	// The starting height of the proposal.
	VotableAtHeight uint64 `protobuf:"varint,1,opt,name=votable_at_height,json=votableAtHeight,proto3" json:"votable_at_height,omitempty"`
	// If set, only return notes with the specified asset id.
	AddressIndex *v12.AddressIndex `protobuf:"bytes,3,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
}

func (m *NotesForVotingRequest) Reset()         { *m = NotesForVotingRequest{} }
func (m *NotesForVotingRequest) String() string { return proto.CompactTextString(m) }
func (*NotesForVotingRequest) ProtoMessage()    {}
func (*NotesForVotingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{21}
}
func (m *NotesForVotingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesForVotingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesForVotingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesForVotingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesForVotingRequest.Merge(m, src)
}
func (m *NotesForVotingRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotesForVotingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesForVotingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotesForVotingRequest proto.InternalMessageInfo

func (m *NotesForVotingRequest) GetVotableAtHeight() uint64 {
	if m != nil {
		return m.VotableAtHeight
	}
	return 0
}

func (m *NotesForVotingRequest) GetAddressIndex() *v12.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

type WitnessRequest struct {
	// The transaction plan to witness
	TransactionPlan *v1.TransactionPlan `protobuf:"bytes,3,opt,name=transaction_plan,json=transactionPlan,proto3" json:"transaction_plan,omitempty"`
}

func (m *WitnessRequest) Reset()         { *m = WitnessRequest{} }
func (m *WitnessRequest) String() string { return proto.CompactTextString(m) }
func (*WitnessRequest) ProtoMessage()    {}
func (*WitnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{22}
}
func (m *WitnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessRequest.Merge(m, src)
}
func (m *WitnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *WitnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessRequest proto.InternalMessageInfo

func (m *WitnessRequest) GetTransactionPlan() *v1.TransactionPlan {
	if m != nil {
		return m.TransactionPlan
	}
	return nil
}

type WitnessResponse struct {
	WitnessData *v1.WitnessData `protobuf:"bytes,1,opt,name=witness_data,json=witnessData,proto3" json:"witness_data,omitempty"`
}

func (m *WitnessResponse) Reset()         { *m = WitnessResponse{} }
func (m *WitnessResponse) String() string { return proto.CompactTextString(m) }
func (*WitnessResponse) ProtoMessage()    {}
func (*WitnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{23}
}
func (m *WitnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessResponse.Merge(m, src)
}
func (m *WitnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *WitnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessResponse proto.InternalMessageInfo

func (m *WitnessResponse) GetWitnessData() *v1.WitnessData {
	if m != nil {
		return m.WitnessData
	}
	return nil
}

type WitnessAndBuildRequest struct {
	TransactionPlan   *v1.TransactionPlan   `protobuf:"bytes,1,opt,name=transaction_plan,json=transactionPlan,proto3" json:"transaction_plan,omitempty"`
	AuthorizationData *v1.AuthorizationData `protobuf:"bytes,2,opt,name=authorization_data,json=authorizationData,proto3" json:"authorization_data,omitempty"`
}

func (m *WitnessAndBuildRequest) Reset()         { *m = WitnessAndBuildRequest{} }
func (m *WitnessAndBuildRequest) String() string { return proto.CompactTextString(m) }
func (*WitnessAndBuildRequest) ProtoMessage()    {}
func (*WitnessAndBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{24}
}
func (m *WitnessAndBuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessAndBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessAndBuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessAndBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessAndBuildRequest.Merge(m, src)
}
func (m *WitnessAndBuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *WitnessAndBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessAndBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessAndBuildRequest proto.InternalMessageInfo

func (m *WitnessAndBuildRequest) GetTransactionPlan() *v1.TransactionPlan {
	if m != nil {
		return m.TransactionPlan
	}
	return nil
}

func (m *WitnessAndBuildRequest) GetAuthorizationData() *v1.AuthorizationData {
	if m != nil {
		return m.AuthorizationData
	}
	return nil
}

type WitnessAndBuildResponse struct {
	// Types that are valid to be assigned to Status:
	//	*WitnessAndBuildResponse_BuildProgress_
	//	*WitnessAndBuildResponse_Complete_
	Status isWitnessAndBuildResponse_Status `protobuf_oneof:"status"`
}

func (m *WitnessAndBuildResponse) Reset()         { *m = WitnessAndBuildResponse{} }
func (m *WitnessAndBuildResponse) String() string { return proto.CompactTextString(m) }
func (*WitnessAndBuildResponse) ProtoMessage()    {}
func (*WitnessAndBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{25}
}
func (m *WitnessAndBuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessAndBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessAndBuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessAndBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessAndBuildResponse.Merge(m, src)
}
func (m *WitnessAndBuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *WitnessAndBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessAndBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessAndBuildResponse proto.InternalMessageInfo

type isWitnessAndBuildResponse_Status interface {
	isWitnessAndBuildResponse_Status()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WitnessAndBuildResponse_BuildProgress_ struct {
	BuildProgress *WitnessAndBuildResponse_BuildProgress `protobuf:"bytes,1,opt,name=build_progress,json=buildProgress,proto3,oneof" json:"build_progress,omitempty"`
}
type WitnessAndBuildResponse_Complete_ struct {
	Complete *WitnessAndBuildResponse_Complete `protobuf:"bytes,2,opt,name=complete,proto3,oneof" json:"complete,omitempty"`
}

func (*WitnessAndBuildResponse_BuildProgress_) isWitnessAndBuildResponse_Status() {}
func (*WitnessAndBuildResponse_Complete_) isWitnessAndBuildResponse_Status()      {}

func (m *WitnessAndBuildResponse) GetStatus() isWitnessAndBuildResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *WitnessAndBuildResponse) GetBuildProgress() *WitnessAndBuildResponse_BuildProgress {
	if x, ok := m.GetStatus().(*WitnessAndBuildResponse_BuildProgress_); ok {
		return x.BuildProgress
	}
	return nil
}

func (m *WitnessAndBuildResponse) GetComplete() *WitnessAndBuildResponse_Complete {
	if x, ok := m.GetStatus().(*WitnessAndBuildResponse_Complete_); ok {
		return x.Complete
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WitnessAndBuildResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WitnessAndBuildResponse_BuildProgress_)(nil),
		(*WitnessAndBuildResponse_Complete_)(nil),
	}
}

// Signals that building is in progress.
type WitnessAndBuildResponse_BuildProgress struct {
	// An approximate progress of the build, from 0 to 1.
	Progress float32 `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *WitnessAndBuildResponse_BuildProgress) Reset()         { *m = WitnessAndBuildResponse_BuildProgress{} }
func (m *WitnessAndBuildResponse_BuildProgress) String() string { return proto.CompactTextString(m) }
func (*WitnessAndBuildResponse_BuildProgress) ProtoMessage()    {}
func (*WitnessAndBuildResponse_BuildProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{25, 0}
}
func (m *WitnessAndBuildResponse_BuildProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessAndBuildResponse_BuildProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessAndBuildResponse_BuildProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessAndBuildResponse_BuildProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessAndBuildResponse_BuildProgress.Merge(m, src)
}
func (m *WitnessAndBuildResponse_BuildProgress) XXX_Size() int {
	return m.Size()
}
func (m *WitnessAndBuildResponse_BuildProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessAndBuildResponse_BuildProgress.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessAndBuildResponse_BuildProgress proto.InternalMessageInfo

func (m *WitnessAndBuildResponse_BuildProgress) GetProgress() float32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

// Signals that the transaction is complete.
type WitnessAndBuildResponse_Complete struct {
	// The finished transaction.
	Transaction *v1.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *WitnessAndBuildResponse_Complete) Reset()         { *m = WitnessAndBuildResponse_Complete{} }
func (m *WitnessAndBuildResponse_Complete) String() string { return proto.CompactTextString(m) }
func (*WitnessAndBuildResponse_Complete) ProtoMessage()    {}
func (*WitnessAndBuildResponse_Complete) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{25, 1}
}
func (m *WitnessAndBuildResponse_Complete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WitnessAndBuildResponse_Complete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WitnessAndBuildResponse_Complete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WitnessAndBuildResponse_Complete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WitnessAndBuildResponse_Complete.Merge(m, src)
}
func (m *WitnessAndBuildResponse_Complete) XXX_Size() int {
	return m.Size()
}
func (m *WitnessAndBuildResponse_Complete) XXX_DiscardUnknown() {
	xxx_messageInfo_WitnessAndBuildResponse_Complete.DiscardUnknown(m)
}

var xxx_messageInfo_WitnessAndBuildResponse_Complete proto.InternalMessageInfo

func (m *WitnessAndBuildResponse_Complete) GetTransaction() *v1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// Requests all assets known to the view service.
type AssetsRequest struct {
	// If set to false (default), returns all assets, regardless of whether the rest of the fields of
	// the request indicate a filter.
	Filtered bool `protobuf:"varint,1,opt,name=filtered,proto3" json:"filtered,omitempty"`
	// Include these specific denominations in the response.
	IncludeSpecificDenominations []*v16.Denom `protobuf:"bytes,2,rep,name=include_specific_denominations,json=includeSpecificDenominations,proto3" json:"include_specific_denominations,omitempty"`
	// Include all delegation tokens, to any validator, in the response.
	IncludeDelegationTokens bool `protobuf:"varint,3,opt,name=include_delegation_tokens,json=includeDelegationTokens,proto3" json:"include_delegation_tokens,omitempty"`
	// Include all unbonding tokens, from any validator, in the response.
	IncludeUnbondingTokens bool `protobuf:"varint,4,opt,name=include_unbonding_tokens,json=includeUnbondingTokens,proto3" json:"include_unbonding_tokens,omitempty"`
	// Include all LP NFTs in the response.
	IncludeLpNfts bool `protobuf:"varint,5,opt,name=include_lp_nfts,json=includeLpNfts,proto3" json:"include_lp_nfts,omitempty"`
	// Include all proposal NFTs in the response.
	IncludeProposalNfts bool `protobuf:"varint,6,opt,name=include_proposal_nfts,json=includeProposalNfts,proto3" json:"include_proposal_nfts,omitempty"`
	// Include all voting receipt tokens in the response.
	IncludeVotingReceiptTokens bool `protobuf:"varint,7,opt,name=include_voting_receipt_tokens,json=includeVotingReceiptTokens,proto3" json:"include_voting_receipt_tokens,omitempty"`
}

func (m *AssetsRequest) Reset()         { *m = AssetsRequest{} }
func (m *AssetsRequest) String() string { return proto.CompactTextString(m) }
func (*AssetsRequest) ProtoMessage()    {}
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{26}
}
func (m *AssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsRequest.Merge(m, src)
}
func (m *AssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsRequest proto.InternalMessageInfo

func (m *AssetsRequest) GetFiltered() bool {
	if m != nil {
		return m.Filtered
	}
	return false
}

func (m *AssetsRequest) GetIncludeSpecificDenominations() []*v16.Denom {
	if m != nil {
		return m.IncludeSpecificDenominations
	}
	return nil
}

func (m *AssetsRequest) GetIncludeDelegationTokens() bool {
	if m != nil {
		return m.IncludeDelegationTokens
	}
	return false
}

func (m *AssetsRequest) GetIncludeUnbondingTokens() bool {
	if m != nil {
		return m.IncludeUnbondingTokens
	}
	return false
}

func (m *AssetsRequest) GetIncludeLpNfts() bool {
	if m != nil {
		return m.IncludeLpNfts
	}
	return false
}

func (m *AssetsRequest) GetIncludeProposalNfts() bool {
	if m != nil {
		return m.IncludeProposalNfts
	}
	return false
}

func (m *AssetsRequest) GetIncludeVotingReceiptTokens() bool {
	if m != nil {
		return m.IncludeVotingReceiptTokens
	}
	return false
}

// Requests all assets known to the view service.
type AssetsResponse struct {
	DenomMetadata *v16.Metadata `protobuf:"bytes,2,opt,name=denom_metadata,json=denomMetadata,proto3" json:"denom_metadata,omitempty"`
}

func (m *AssetsResponse) Reset()         { *m = AssetsResponse{} }
func (m *AssetsResponse) String() string { return proto.CompactTextString(m) }
func (*AssetsResponse) ProtoMessage()    {}
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{27}
}
func (m *AssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsResponse.Merge(m, src)
}
func (m *AssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsResponse proto.InternalMessageInfo

func (m *AssetsResponse) GetDenomMetadata() *v16.Metadata {
	if m != nil {
		return m.DenomMetadata
	}
	return nil
}

// Requests the current app parameters from the view service.
type AppParametersRequest struct {
}

func (m *AppParametersRequest) Reset()         { *m = AppParametersRequest{} }
func (m *AppParametersRequest) String() string { return proto.CompactTextString(m) }
func (*AppParametersRequest) ProtoMessage()    {}
func (*AppParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{28}
}
func (m *AppParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParametersRequest.Merge(m, src)
}
func (m *AppParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppParametersRequest proto.InternalMessageInfo

type AppParametersResponse struct {
	Parameters *v111.AppParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *AppParametersResponse) Reset()         { *m = AppParametersResponse{} }
func (m *AppParametersResponse) String() string { return proto.CompactTextString(m) }
func (*AppParametersResponse) ProtoMessage()    {}
func (*AppParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{29}
}
func (m *AppParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParametersResponse.Merge(m, src)
}
func (m *AppParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *AppParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppParametersResponse proto.InternalMessageInfo

func (m *AppParametersResponse) GetParameters() *v111.AppParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// Requests the current gas prices from the view service.
type GasPricesRequest struct {
}

func (m *GasPricesRequest) Reset()         { *m = GasPricesRequest{} }
func (m *GasPricesRequest) String() string { return proto.CompactTextString(m) }
func (*GasPricesRequest) ProtoMessage()    {}
func (*GasPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{30}
}
func (m *GasPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasPricesRequest.Merge(m, src)
}
func (m *GasPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GasPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GasPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GasPricesRequest proto.InternalMessageInfo

type GasPricesResponse struct {
	GasPrices *v14.GasPrices `protobuf:"bytes,1,opt,name=gas_prices,json=gasPrices,proto3" json:"gas_prices,omitempty"`
}

func (m *GasPricesResponse) Reset()         { *m = GasPricesResponse{} }
func (m *GasPricesResponse) String() string { return proto.CompactTextString(m) }
func (*GasPricesResponse) ProtoMessage()    {}
func (*GasPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{31}
}
func (m *GasPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasPricesResponse.Merge(m, src)
}
func (m *GasPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GasPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GasPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GasPricesResponse proto.InternalMessageInfo

func (m *GasPricesResponse) GetGasPrices() *v14.GasPrices {
	if m != nil {
		return m.GasPrices
	}
	return nil
}

// Requests the current FMD parameters from the view service.
type FMDParametersRequest struct {
}

func (m *FMDParametersRequest) Reset()         { *m = FMDParametersRequest{} }
func (m *FMDParametersRequest) String() string { return proto.CompactTextString(m) }
func (*FMDParametersRequest) ProtoMessage()    {}
func (*FMDParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{32}
}
func (m *FMDParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FMDParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FMDParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FMDParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FMDParametersRequest.Merge(m, src)
}
func (m *FMDParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *FMDParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FMDParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FMDParametersRequest proto.InternalMessageInfo

type FMDParametersResponse struct {
	Parameters *v112.FmdParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *FMDParametersResponse) Reset()         { *m = FMDParametersResponse{} }
func (m *FMDParametersResponse) String() string { return proto.CompactTextString(m) }
func (*FMDParametersResponse) ProtoMessage()    {}
func (*FMDParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{33}
}
func (m *FMDParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FMDParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FMDParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FMDParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FMDParametersResponse.Merge(m, src)
}
func (m *FMDParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *FMDParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FMDParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FMDParametersResponse proto.InternalMessageInfo

func (m *FMDParametersResponse) GetParameters() *v112.FmdParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type NoteByCommitmentRequest struct {
	NoteCommitment *v17.StateCommitment `protobuf:"bytes,2,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// If set to true, waits to return until the requested note is detected.
	AwaitDetection bool `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *NoteByCommitmentRequest) Reset()         { *m = NoteByCommitmentRequest{} }
func (m *NoteByCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*NoteByCommitmentRequest) ProtoMessage()    {}
func (*NoteByCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{34}
}
func (m *NoteByCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoteByCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoteByCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoteByCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteByCommitmentRequest.Merge(m, src)
}
func (m *NoteByCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoteByCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteByCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoteByCommitmentRequest proto.InternalMessageInfo

func (m *NoteByCommitmentRequest) GetNoteCommitment() *v17.StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

func (m *NoteByCommitmentRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type NoteByCommitmentResponse struct {
	SpendableNote *SpendableNoteRecord `protobuf:"bytes,1,opt,name=spendable_note,json=spendableNote,proto3" json:"spendable_note,omitempty"`
}

func (m *NoteByCommitmentResponse) Reset()         { *m = NoteByCommitmentResponse{} }
func (m *NoteByCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*NoteByCommitmentResponse) ProtoMessage()    {}
func (*NoteByCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{35}
}
func (m *NoteByCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoteByCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoteByCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoteByCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteByCommitmentResponse.Merge(m, src)
}
func (m *NoteByCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *NoteByCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteByCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NoteByCommitmentResponse proto.InternalMessageInfo

func (m *NoteByCommitmentResponse) GetSpendableNote() *SpendableNoteRecord {
	if m != nil {
		return m.SpendableNote
	}
	return nil
}

type SwapByCommitmentRequest struct {
	SwapCommitment *v17.StateCommitment `protobuf:"bytes,2,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
	// If set to true, waits to return until the requested swap is detected.
	AwaitDetection bool `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *SwapByCommitmentRequest) Reset()         { *m = SwapByCommitmentRequest{} }
func (m *SwapByCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*SwapByCommitmentRequest) ProtoMessage()    {}
func (*SwapByCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{36}
}
func (m *SwapByCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapByCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapByCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapByCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapByCommitmentRequest.Merge(m, src)
}
func (m *SwapByCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *SwapByCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapByCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SwapByCommitmentRequest proto.InternalMessageInfo

func (m *SwapByCommitmentRequest) GetSwapCommitment() *v17.StateCommitment {
	if m != nil {
		return m.SwapCommitment
	}
	return nil
}

func (m *SwapByCommitmentRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type SwapByCommitmentResponse struct {
	Swap *SwapRecord `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (m *SwapByCommitmentResponse) Reset()         { *m = SwapByCommitmentResponse{} }
func (m *SwapByCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*SwapByCommitmentResponse) ProtoMessage()    {}
func (*SwapByCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{37}
}
func (m *SwapByCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapByCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapByCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapByCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapByCommitmentResponse.Merge(m, src)
}
func (m *SwapByCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *SwapByCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapByCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwapByCommitmentResponse proto.InternalMessageInfo

func (m *SwapByCommitmentResponse) GetSwap() *SwapRecord {
	if m != nil {
		return m.Swap
	}
	return nil
}

type UnclaimedSwapsRequest struct {
}

func (m *UnclaimedSwapsRequest) Reset()         { *m = UnclaimedSwapsRequest{} }
func (m *UnclaimedSwapsRequest) String() string { return proto.CompactTextString(m) }
func (*UnclaimedSwapsRequest) ProtoMessage()    {}
func (*UnclaimedSwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{38}
}
func (m *UnclaimedSwapsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnclaimedSwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnclaimedSwapsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnclaimedSwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnclaimedSwapsRequest.Merge(m, src)
}
func (m *UnclaimedSwapsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnclaimedSwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnclaimedSwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnclaimedSwapsRequest proto.InternalMessageInfo

type UnclaimedSwapsResponse struct {
	Swap *SwapRecord `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (m *UnclaimedSwapsResponse) Reset()         { *m = UnclaimedSwapsResponse{} }
func (m *UnclaimedSwapsResponse) String() string { return proto.CompactTextString(m) }
func (*UnclaimedSwapsResponse) ProtoMessage()    {}
func (*UnclaimedSwapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{39}
}
func (m *UnclaimedSwapsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnclaimedSwapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnclaimedSwapsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnclaimedSwapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnclaimedSwapsResponse.Merge(m, src)
}
func (m *UnclaimedSwapsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnclaimedSwapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnclaimedSwapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnclaimedSwapsResponse proto.InternalMessageInfo

func (m *UnclaimedSwapsResponse) GetSwap() *SwapRecord {
	if m != nil {
		return m.Swap
	}
	return nil
}

type NullifierStatusRequest struct {
	Nullifier      *v15.Nullifier `protobuf:"bytes,2,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	AwaitDetection bool           `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (m *NullifierStatusRequest) Reset()         { *m = NullifierStatusRequest{} }
func (m *NullifierStatusRequest) String() string { return proto.CompactTextString(m) }
func (*NullifierStatusRequest) ProtoMessage()    {}
func (*NullifierStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{40}
}
func (m *NullifierStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullifierStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullifierStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullifierStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullifierStatusRequest.Merge(m, src)
}
func (m *NullifierStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *NullifierStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NullifierStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NullifierStatusRequest proto.InternalMessageInfo

func (m *NullifierStatusRequest) GetNullifier() *v15.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *NullifierStatusRequest) GetAwaitDetection() bool {
	if m != nil {
		return m.AwaitDetection
	}
	return false
}

type NullifierStatusResponse struct {
	Spent bool `protobuf:"varint,1,opt,name=spent,proto3" json:"spent,omitempty"`
}

func (m *NullifierStatusResponse) Reset()         { *m = NullifierStatusResponse{} }
func (m *NullifierStatusResponse) String() string { return proto.CompactTextString(m) }
func (*NullifierStatusResponse) ProtoMessage()    {}
func (*NullifierStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{41}
}
func (m *NullifierStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullifierStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullifierStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullifierStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullifierStatusResponse.Merge(m, src)
}
func (m *NullifierStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *NullifierStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NullifierStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NullifierStatusResponse proto.InternalMessageInfo

func (m *NullifierStatusResponse) GetSpent() bool {
	if m != nil {
		return m.Spent
	}
	return false
}

type TransactionInfoByHashRequest struct {
	// The transaction hash to query for.
	Id *v11.TransactionId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TransactionInfoByHashRequest) Reset()         { *m = TransactionInfoByHashRequest{} }
func (m *TransactionInfoByHashRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionInfoByHashRequest) ProtoMessage()    {}
func (*TransactionInfoByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{42}
}
func (m *TransactionInfoByHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfoByHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfoByHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfoByHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfoByHashRequest.Merge(m, src)
}
func (m *TransactionInfoByHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfoByHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfoByHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfoByHashRequest proto.InternalMessageInfo

func (m *TransactionInfoByHashRequest) GetId() *v11.TransactionId {
	if m != nil {
		return m.Id
	}
	return nil
}

type TransactionInfoRequest struct {
	// If present, return only transactions after this height.
	StartHeight uint64 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// If present, return only transactions before this height.
	EndHeight uint64 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (m *TransactionInfoRequest) Reset()         { *m = TransactionInfoRequest{} }
func (m *TransactionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionInfoRequest) ProtoMessage()    {}
func (*TransactionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{43}
}
func (m *TransactionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfoRequest.Merge(m, src)
}
func (m *TransactionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfoRequest proto.InternalMessageInfo

func (m *TransactionInfoRequest) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *TransactionInfoRequest) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type TransactionInfo struct {
	// The height the transaction was included in a block, if known.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The hash of the transaction.
	Id *v11.TransactionId `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The transaction data itself.
	Transaction *v1.Transaction `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// The transaction perspective, as seen by this view server.
	Perspective *v1.TransactionPerspective `protobuf:"bytes,4,opt,name=perspective,proto3" json:"perspective,omitempty"`
	// A precomputed transaction view of `transaction` from `perspective`, included for convenience of clients that don't have support for viewing transactions on their own.
	View *v1.TransactionView `protobuf:"bytes,5,opt,name=view,proto3" json:"view,omitempty"`
}

func (m *TransactionInfo) Reset()         { *m = TransactionInfo{} }
func (m *TransactionInfo) String() string { return proto.CompactTextString(m) }
func (*TransactionInfo) ProtoMessage()    {}
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{44}
}
func (m *TransactionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfo.Merge(m, src)
}
func (m *TransactionInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfo proto.InternalMessageInfo

func (m *TransactionInfo) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TransactionInfo) GetId() *v11.TransactionId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TransactionInfo) GetTransaction() *v1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionInfo) GetPerspective() *v1.TransactionPerspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *TransactionInfo) GetView() *v1.TransactionView {
	if m != nil {
		return m.View
	}
	return nil
}

type TransactionInfoResponse struct {
	TxInfo *TransactionInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
}

func (m *TransactionInfoResponse) Reset()         { *m = TransactionInfoResponse{} }
func (m *TransactionInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionInfoResponse) ProtoMessage()    {}
func (*TransactionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{45}
}
func (m *TransactionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfoResponse.Merge(m, src)
}
func (m *TransactionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfoResponse proto.InternalMessageInfo

func (m *TransactionInfoResponse) GetTxInfo() *TransactionInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

type TransactionInfoByHashResponse struct {
	TxInfo *TransactionInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
}

func (m *TransactionInfoByHashResponse) Reset()         { *m = TransactionInfoByHashResponse{} }
func (m *TransactionInfoByHashResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionInfoByHashResponse) ProtoMessage()    {}
func (*TransactionInfoByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{46}
}
func (m *TransactionInfoByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfoByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfoByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfoByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfoByHashResponse.Merge(m, src)
}
func (m *TransactionInfoByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfoByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfoByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfoByHashResponse proto.InternalMessageInfo

func (m *TransactionInfoByHashResponse) GetTxInfo() *TransactionInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

type NotesResponse struct {
	NoteRecord *SpendableNoteRecord `protobuf:"bytes,1,opt,name=note_record,json=noteRecord,proto3" json:"note_record,omitempty"`
}

func (m *NotesResponse) Reset()         { *m = NotesResponse{} }
func (m *NotesResponse) String() string { return proto.CompactTextString(m) }
func (*NotesResponse) ProtoMessage()    {}
func (*NotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{47}
}
func (m *NotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesResponse.Merge(m, src)
}
func (m *NotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotesResponse proto.InternalMessageInfo

func (m *NotesResponse) GetNoteRecord() *SpendableNoteRecord {
	if m != nil {
		return m.NoteRecord
	}
	return nil
}

type NotesForVotingResponse struct {
	NoteRecord  *SpendableNoteRecord `protobuf:"bytes,1,opt,name=note_record,json=noteRecord,proto3" json:"note_record,omitempty"`
	IdentityKey *v12.IdentityKey     `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *NotesForVotingResponse) Reset()         { *m = NotesForVotingResponse{} }
func (m *NotesForVotingResponse) String() string { return proto.CompactTextString(m) }
func (*NotesForVotingResponse) ProtoMessage()    {}
func (*NotesForVotingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{48}
}
func (m *NotesForVotingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotesForVotingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotesForVotingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotesForVotingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotesForVotingResponse.Merge(m, src)
}
func (m *NotesForVotingResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotesForVotingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotesForVotingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotesForVotingResponse proto.InternalMessageInfo

func (m *NotesForVotingResponse) GetNoteRecord() *SpendableNoteRecord {
	if m != nil {
		return m.NoteRecord
	}
	return nil
}

func (m *NotesForVotingResponse) GetIdentityKey() *v12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

// A note plaintext with associated metadata about its status.
type SpendableNoteRecord struct {
	// The note commitment, identifying the note.
	NoteCommitment *v17.StateCommitment `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// The note plaintext itself.
	Note *v112.Note `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	// A precomputed decryption of the note's address incore.component.dex.v1.
	AddressIndex *v12.AddressIndex `protobuf:"bytes,3,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// The note's nullifier.
	Nullifier *v15.Nullifier `protobuf:"bytes,4,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The height at which the note was created.
	HeightCreated uint64 `protobuf:"varint,5,opt,name=height_created,json=heightCreated,proto3" json:"height_created,omitempty"`
	// Records whether the note was spent (and if so, at what height).
	HeightSpent uint64 `protobuf:"varint,6,opt,name=height_spent,json=heightSpent,proto3" json:"height_spent,omitempty"`
	// The note position.
	Position uint64 `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	// The source of the note
	Source *v15.CommitmentSource `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	// The sender's return address, if known.
	ReturnAddress *v12.AddressView `protobuf:"bytes,9,opt,name=return_address,json=returnAddress,proto3" json:"return_address,omitempty"`
}

func (m *SpendableNoteRecord) Reset()         { *m = SpendableNoteRecord{} }
func (m *SpendableNoteRecord) String() string { return proto.CompactTextString(m) }
func (*SpendableNoteRecord) ProtoMessage()    {}
func (*SpendableNoteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{49}
}
func (m *SpendableNoteRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendableNoteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendableNoteRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendableNoteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendableNoteRecord.Merge(m, src)
}
func (m *SpendableNoteRecord) XXX_Size() int {
	return m.Size()
}
func (m *SpendableNoteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendableNoteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SpendableNoteRecord proto.InternalMessageInfo

func (m *SpendableNoteRecord) GetNoteCommitment() *v17.StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

func (m *SpendableNoteRecord) GetNote() *v112.Note {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *SpendableNoteRecord) GetAddressIndex() *v12.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *SpendableNoteRecord) GetNullifier() *v15.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *SpendableNoteRecord) GetHeightCreated() uint64 {
	if m != nil {
		return m.HeightCreated
	}
	return 0
}

func (m *SpendableNoteRecord) GetHeightSpent() uint64 {
	if m != nil {
		return m.HeightSpent
	}
	return 0
}

func (m *SpendableNoteRecord) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SpendableNoteRecord) GetSource() *v15.CommitmentSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *SpendableNoteRecord) GetReturnAddress() *v12.AddressView {
	if m != nil {
		return m.ReturnAddress
	}
	return nil
}

type SwapRecord struct {
	SwapCommitment *v17.StateCommitment      `protobuf:"bytes,1,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
	Swap           *v110.SwapPlaintext       `protobuf:"bytes,2,opt,name=swap,proto3" json:"swap,omitempty"`
	Position       uint64                    `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Nullifier      *v15.Nullifier            `protobuf:"bytes,4,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	OutputData     *v110.BatchSwapOutputData `protobuf:"bytes,5,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	HeightClaimed  uint64                    `protobuf:"varint,6,opt,name=height_claimed,json=heightClaimed,proto3" json:"height_claimed,omitempty"`
	Source         *v15.CommitmentSource     `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *SwapRecord) Reset()         { *m = SwapRecord{} }
func (m *SwapRecord) String() string { return proto.CompactTextString(m) }
func (*SwapRecord) ProtoMessage()    {}
func (*SwapRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{50}
}
func (m *SwapRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapRecord.Merge(m, src)
}
func (m *SwapRecord) XXX_Size() int {
	return m.Size()
}
func (m *SwapRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SwapRecord proto.InternalMessageInfo

func (m *SwapRecord) GetSwapCommitment() *v17.StateCommitment {
	if m != nil {
		return m.SwapCommitment
	}
	return nil
}

func (m *SwapRecord) GetSwap() *v110.SwapPlaintext {
	if m != nil {
		return m.Swap
	}
	return nil
}

func (m *SwapRecord) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SwapRecord) GetNullifier() *v15.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *SwapRecord) GetOutputData() *v110.BatchSwapOutputData {
	if m != nil {
		return m.OutputData
	}
	return nil
}

func (m *SwapRecord) GetHeightClaimed() uint64 {
	if m != nil {
		return m.HeightClaimed
	}
	return 0
}

func (m *SwapRecord) GetSource() *v15.CommitmentSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type OwnedPositionIdsRequest struct {
	// If present, return only positions with this position state.
	PositionState *v110.PositionState `protobuf:"bytes,1,opt,name=position_state,json=positionState,proto3" json:"position_state,omitempty"`
	// If present, return only positions for this trading pair.
	TradingPair *v110.TradingPair `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (m *OwnedPositionIdsRequest) Reset()         { *m = OwnedPositionIdsRequest{} }
func (m *OwnedPositionIdsRequest) String() string { return proto.CompactTextString(m) }
func (*OwnedPositionIdsRequest) ProtoMessage()    {}
func (*OwnedPositionIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{51}
}
func (m *OwnedPositionIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnedPositionIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnedPositionIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnedPositionIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnedPositionIdsRequest.Merge(m, src)
}
func (m *OwnedPositionIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OwnedPositionIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnedPositionIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OwnedPositionIdsRequest proto.InternalMessageInfo

func (m *OwnedPositionIdsRequest) GetPositionState() *v110.PositionState {
	if m != nil {
		return m.PositionState
	}
	return nil
}

func (m *OwnedPositionIdsRequest) GetTradingPair() *v110.TradingPair {
	if m != nil {
		return m.TradingPair
	}
	return nil
}

type OwnedPositionIdsResponse struct {
	PositionId *v110.PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *OwnedPositionIdsResponse) Reset()         { *m = OwnedPositionIdsResponse{} }
func (m *OwnedPositionIdsResponse) String() string { return proto.CompactTextString(m) }
func (*OwnedPositionIdsResponse) ProtoMessage()    {}
func (*OwnedPositionIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{52}
}
func (m *OwnedPositionIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnedPositionIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnedPositionIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnedPositionIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnedPositionIdsResponse.Merge(m, src)
}
func (m *OwnedPositionIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OwnedPositionIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnedPositionIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OwnedPositionIdsResponse proto.InternalMessageInfo

func (m *OwnedPositionIdsResponse) GetPositionId() *v110.PositionId {
	if m != nil {
		return m.PositionId
	}
	return nil
}

// Requests information on an asset by asset id
type AssetMetadataByIdRequest struct {
	// The asset id to request information on.
	AssetId *v16.AssetId `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *AssetMetadataByIdRequest) Reset()         { *m = AssetMetadataByIdRequest{} }
func (m *AssetMetadataByIdRequest) String() string { return proto.CompactTextString(m) }
func (*AssetMetadataByIdRequest) ProtoMessage()    {}
func (*AssetMetadataByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{53}
}
func (m *AssetMetadataByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetMetadataByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetMetadataByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetMetadataByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetMetadataByIdRequest.Merge(m, src)
}
func (m *AssetMetadataByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssetMetadataByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetMetadataByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetMetadataByIdRequest proto.InternalMessageInfo

func (m *AssetMetadataByIdRequest) GetAssetId() *v16.AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

type AssetMetadataByIdResponse struct {
	// If present, information on the requested asset.
	//
	// If the requested asset was unknown, this field will not be present.
	DenomMetadata *v16.Metadata `protobuf:"bytes,1,opt,name=denom_metadata,json=denomMetadata,proto3" json:"denom_metadata,omitempty"`
}

func (m *AssetMetadataByIdResponse) Reset()         { *m = AssetMetadataByIdResponse{} }
func (m *AssetMetadataByIdResponse) String() string { return proto.CompactTextString(m) }
func (*AssetMetadataByIdResponse) ProtoMessage()    {}
func (*AssetMetadataByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{54}
}
func (m *AssetMetadataByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetMetadataByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetMetadataByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetMetadataByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetMetadataByIdResponse.Merge(m, src)
}
func (m *AssetMetadataByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssetMetadataByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetMetadataByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetMetadataByIdResponse proto.InternalMessageInfo

func (m *AssetMetadataByIdResponse) GetDenomMetadata() *v16.Metadata {
	if m != nil {
		return m.DenomMetadata
	}
	return nil
}

// Requests `ValueView`s of delegation tokens for the given address index. The
// returned `ValueView`s will include the `ValidatorInfo` for the delegated
// validator in their `extended_metadata` fields.
type DelegationsByAddressIndexRequest struct {
	// The address index to fetch delegation balances for.
	AddressIndex *v12.AddressIndex                       `protobuf:"bytes,1,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	Filter       DelegationsByAddressIndexRequest_Filter `protobuf:"varint,2,opt,name=filter,proto3,enum=penumbra.view.v1.DelegationsByAddressIndexRequest_Filter" json:"filter,omitempty"`
}

func (m *DelegationsByAddressIndexRequest) Reset()         { *m = DelegationsByAddressIndexRequest{} }
func (m *DelegationsByAddressIndexRequest) String() string { return proto.CompactTextString(m) }
func (*DelegationsByAddressIndexRequest) ProtoMessage()    {}
func (*DelegationsByAddressIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{55}
}
func (m *DelegationsByAddressIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationsByAddressIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationsByAddressIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationsByAddressIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationsByAddressIndexRequest.Merge(m, src)
}
func (m *DelegationsByAddressIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *DelegationsByAddressIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationsByAddressIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationsByAddressIndexRequest proto.InternalMessageInfo

func (m *DelegationsByAddressIndexRequest) GetAddressIndex() *v12.AddressIndex {
	if m != nil {
		return m.AddressIndex
	}
	return nil
}

func (m *DelegationsByAddressIndexRequest) GetFilter() DelegationsByAddressIndexRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return DelegationsByAddressIndexRequest_FILTER_UNSPECIFIED
}

// Contains a `ValueView` of delegation tokens for the requested address index.
// The `ValueView` includes the `ValidatorInfo` for the delegated validator in
// cits `extended_metadata` field.
type DelegationsByAddressIndexResponse struct {
	ValueView *v16.ValueView `protobuf:"bytes,1,opt,name=value_view,json=valueView,proto3" json:"value_view,omitempty"`
}

func (m *DelegationsByAddressIndexResponse) Reset()         { *m = DelegationsByAddressIndexResponse{} }
func (m *DelegationsByAddressIndexResponse) String() string { return proto.CompactTextString(m) }
func (*DelegationsByAddressIndexResponse) ProtoMessage()    {}
func (*DelegationsByAddressIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba93d04e42ddfc3, []int{56}
}
func (m *DelegationsByAddressIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationsByAddressIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationsByAddressIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationsByAddressIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationsByAddressIndexResponse.Merge(m, src)
}
func (m *DelegationsByAddressIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationsByAddressIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationsByAddressIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationsByAddressIndexResponse proto.InternalMessageInfo

func (m *DelegationsByAddressIndexResponse) GetValueView() *v16.ValueView {
	if m != nil {
		return m.ValueView
	}
	return nil
}

func init() {
	proto.RegisterEnum("penumbra.view.v1.DelegationsByAddressIndexRequest_Filter", DelegationsByAddressIndexRequest_Filter_name, DelegationsByAddressIndexRequest_Filter_value)
	proto.RegisterType((*AuthorizeAndBuildRequest)(nil), "penumbra.view.v1.AuthorizeAndBuildRequest")
	proto.RegisterType((*AuthorizeAndBuildResponse)(nil), "penumbra.view.v1.AuthorizeAndBuildResponse")
	proto.RegisterType((*AuthorizeAndBuildResponse_BuildProgress)(nil), "penumbra.view.v1.AuthorizeAndBuildResponse.BuildProgress")
	proto.RegisterType((*AuthorizeAndBuildResponse_Complete)(nil), "penumbra.view.v1.AuthorizeAndBuildResponse.Complete")
	proto.RegisterType((*BroadcastTransactionRequest)(nil), "penumbra.view.v1.BroadcastTransactionRequest")
	proto.RegisterType((*BroadcastTransactionResponse)(nil), "penumbra.view.v1.BroadcastTransactionResponse")
	proto.RegisterType((*BroadcastTransactionResponse_BroadcastSuccess)(nil), "penumbra.view.v1.BroadcastTransactionResponse.BroadcastSuccess")
	proto.RegisterType((*BroadcastTransactionResponse_Confirmed)(nil), "penumbra.view.v1.BroadcastTransactionResponse.Confirmed")
	proto.RegisterType((*TransactionPlannerRequest)(nil), "penumbra.view.v1.TransactionPlannerRequest")
	proto.RegisterType((*TransactionPlannerRequest_Output)(nil), "penumbra.view.v1.TransactionPlannerRequest.Output")
	proto.RegisterType((*TransactionPlannerRequest_Swap)(nil), "penumbra.view.v1.TransactionPlannerRequest.Swap")
	proto.RegisterType((*TransactionPlannerRequest_SwapClaim)(nil), "penumbra.view.v1.TransactionPlannerRequest.SwapClaim")
	proto.RegisterType((*TransactionPlannerRequest_Delegate)(nil), "penumbra.view.v1.TransactionPlannerRequest.Delegate")
	proto.RegisterType((*TransactionPlannerRequest_Undelegate)(nil), "penumbra.view.v1.TransactionPlannerRequest.Undelegate")
	proto.RegisterType((*TransactionPlannerRequest_UndelegateClaim)(nil), "penumbra.view.v1.TransactionPlannerRequest.UndelegateClaim")
	proto.RegisterType((*TransactionPlannerRequest_PositionOpen)(nil), "penumbra.view.v1.TransactionPlannerRequest.PositionOpen")
	proto.RegisterType((*TransactionPlannerRequest_PositionClose)(nil), "penumbra.view.v1.TransactionPlannerRequest.PositionClose")
	proto.RegisterType((*TransactionPlannerRequest_PositionWithdraw)(nil), "penumbra.view.v1.TransactionPlannerRequest.PositionWithdraw")
	proto.RegisterType((*TransactionPlannerResponse)(nil), "penumbra.view.v1.TransactionPlannerResponse")
	proto.RegisterType((*AddressByIndexRequest)(nil), "penumbra.view.v1.AddressByIndexRequest")
	proto.RegisterType((*AddressByIndexResponse)(nil), "penumbra.view.v1.AddressByIndexResponse")
	proto.RegisterType((*WalletIdRequest)(nil), "penumbra.view.v1.WalletIdRequest")
	proto.RegisterType((*WalletIdResponse)(nil), "penumbra.view.v1.WalletIdResponse")
	proto.RegisterType((*IndexByAddressRequest)(nil), "penumbra.view.v1.IndexByAddressRequest")
	proto.RegisterType((*IndexByAddressResponse)(nil), "penumbra.view.v1.IndexByAddressResponse")
	proto.RegisterType((*EphemeralAddressRequest)(nil), "penumbra.view.v1.EphemeralAddressRequest")
	proto.RegisterType((*EphemeralAddressResponse)(nil), "penumbra.view.v1.EphemeralAddressResponse")
	proto.RegisterType((*BalancesRequest)(nil), "penumbra.view.v1.BalancesRequest")
	proto.RegisterType((*BalancesResponse)(nil), "penumbra.view.v1.BalancesResponse")
	proto.RegisterType((*StatusRequest)(nil), "penumbra.view.v1.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "penumbra.view.v1.StatusResponse")
	proto.RegisterType((*StatusStreamRequest)(nil), "penumbra.view.v1.StatusStreamRequest")
	proto.RegisterType((*StatusStreamResponse)(nil), "penumbra.view.v1.StatusStreamResponse")
	proto.RegisterType((*NotesRequest)(nil), "penumbra.view.v1.NotesRequest")
	proto.RegisterType((*NotesForVotingRequest)(nil), "penumbra.view.v1.NotesForVotingRequest")
	proto.RegisterType((*WitnessRequest)(nil), "penumbra.view.v1.WitnessRequest")
	proto.RegisterType((*WitnessResponse)(nil), "penumbra.view.v1.WitnessResponse")
	proto.RegisterType((*WitnessAndBuildRequest)(nil), "penumbra.view.v1.WitnessAndBuildRequest")
	proto.RegisterType((*WitnessAndBuildResponse)(nil), "penumbra.view.v1.WitnessAndBuildResponse")
	proto.RegisterType((*WitnessAndBuildResponse_BuildProgress)(nil), "penumbra.view.v1.WitnessAndBuildResponse.BuildProgress")
	proto.RegisterType((*WitnessAndBuildResponse_Complete)(nil), "penumbra.view.v1.WitnessAndBuildResponse.Complete")
	proto.RegisterType((*AssetsRequest)(nil), "penumbra.view.v1.AssetsRequest")
	proto.RegisterType((*AssetsResponse)(nil), "penumbra.view.v1.AssetsResponse")
	proto.RegisterType((*AppParametersRequest)(nil), "penumbra.view.v1.AppParametersRequest")
	proto.RegisterType((*AppParametersResponse)(nil), "penumbra.view.v1.AppParametersResponse")
	proto.RegisterType((*GasPricesRequest)(nil), "penumbra.view.v1.GasPricesRequest")
	proto.RegisterType((*GasPricesResponse)(nil), "penumbra.view.v1.GasPricesResponse")
	proto.RegisterType((*FMDParametersRequest)(nil), "penumbra.view.v1.FMDParametersRequest")
	proto.RegisterType((*FMDParametersResponse)(nil), "penumbra.view.v1.FMDParametersResponse")
	proto.RegisterType((*NoteByCommitmentRequest)(nil), "penumbra.view.v1.NoteByCommitmentRequest")
	proto.RegisterType((*NoteByCommitmentResponse)(nil), "penumbra.view.v1.NoteByCommitmentResponse")
	proto.RegisterType((*SwapByCommitmentRequest)(nil), "penumbra.view.v1.SwapByCommitmentRequest")
	proto.RegisterType((*SwapByCommitmentResponse)(nil), "penumbra.view.v1.SwapByCommitmentResponse")
	proto.RegisterType((*UnclaimedSwapsRequest)(nil), "penumbra.view.v1.UnclaimedSwapsRequest")
	proto.RegisterType((*UnclaimedSwapsResponse)(nil), "penumbra.view.v1.UnclaimedSwapsResponse")
	proto.RegisterType((*NullifierStatusRequest)(nil), "penumbra.view.v1.NullifierStatusRequest")
	proto.RegisterType((*NullifierStatusResponse)(nil), "penumbra.view.v1.NullifierStatusResponse")
	proto.RegisterType((*TransactionInfoByHashRequest)(nil), "penumbra.view.v1.TransactionInfoByHashRequest")
	proto.RegisterType((*TransactionInfoRequest)(nil), "penumbra.view.v1.TransactionInfoRequest")
	proto.RegisterType((*TransactionInfo)(nil), "penumbra.view.v1.TransactionInfo")
	proto.RegisterType((*TransactionInfoResponse)(nil), "penumbra.view.v1.TransactionInfoResponse")
	proto.RegisterType((*TransactionInfoByHashResponse)(nil), "penumbra.view.v1.TransactionInfoByHashResponse")
	proto.RegisterType((*NotesResponse)(nil), "penumbra.view.v1.NotesResponse")
	proto.RegisterType((*NotesForVotingResponse)(nil), "penumbra.view.v1.NotesForVotingResponse")
	proto.RegisterType((*SpendableNoteRecord)(nil), "penumbra.view.v1.SpendableNoteRecord")
	proto.RegisterType((*SwapRecord)(nil), "penumbra.view.v1.SwapRecord")
	proto.RegisterType((*OwnedPositionIdsRequest)(nil), "penumbra.view.v1.OwnedPositionIdsRequest")
	proto.RegisterType((*OwnedPositionIdsResponse)(nil), "penumbra.view.v1.OwnedPositionIdsResponse")
	proto.RegisterType((*AssetMetadataByIdRequest)(nil), "penumbra.view.v1.AssetMetadataByIdRequest")
	proto.RegisterType((*AssetMetadataByIdResponse)(nil), "penumbra.view.v1.AssetMetadataByIdResponse")
	proto.RegisterType((*DelegationsByAddressIndexRequest)(nil), "penumbra.view.v1.DelegationsByAddressIndexRequest")
	proto.RegisterType((*DelegationsByAddressIndexResponse)(nil), "penumbra.view.v1.DelegationsByAddressIndexResponse")
}

func init() { proto.RegisterFile("penumbra/view/v1/view.proto", fileDescriptor_dba93d04e42ddfc3) }

var fileDescriptor_dba93d04e42ddfc3 = []byte{
	// 3847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3b, 0x4d, 0x6f, 0x1b, 0x49,
	0x76, 0x6a, 0x4a, 0x96, 0xa8, 0x27, 0xf1, 0x43, 0x65, 0x4b, 0xa2, 0xb9, 0x1e, 0xd9, 0xee, 0xd9,
	0x19, 0x7f, 0xed, 0x52, 0x1f, 0xf6, 0xee, 0xce, 0x78, 0x1c, 0x6c, 0x44, 0x7d, 0x58, 0x9a, 0xf1,
	0xc8, 0x9c, 0x96, 0x2c, 0x4f, 0x26, 0x9e, 0x74, 0x8a, 0xdd, 0x25, 0xa9, 0x63, 0xb2, 0xbb, 0xd3,
	0x5d, 0xa4, 0xa4, 0xfc, 0x80, 0x00, 0xd9, 0x20, 0x40, 0x80, 0xe4, 0x9c, 0x43, 0x80, 0x4d, 0x82,
	0x04, 0xc8, 0x2d, 0x87, 0x9c, 0x72, 0xdd, 0x0d, 0x10, 0x60, 0x91, 0xd3, 0x5e, 0x02, 0x0c, 0x66,
	0x6e, 0xb9, 0xe7, 0x94, 0x43, 0x82, 0xfa, 0xe8, 0x66, 0x77, 0xb3, 0x5b, 0x24, 0x65, 0x25, 0xc0,
	0x9e, 0x58, 0xf5, 0xea, 0x7d, 0xd5, 0xab, 0xaa, 0x57, 0xaf, 0xde, 0x6b, 0xc2, 0xf7, 0x5c, 0x62,
	0x77, 0xda, 0x4d, 0x0f, 0x2f, 0x77, 0x2d, 0x72, 0xba, 0xdc, 0x5d, 0xe5, 0xbf, 0x35, 0xd7, 0x73,
	0xa8, 0x83, 0xca, 0xc1, 0x60, 0x8d, 0x03, 0xbb, 0xab, 0xd5, 0xa5, 0x10, 0xdd, 0x70, 0x3c, 0xb2,
	0x8c, 0x5d, 0x97, 0x91, 0x60, 0xd7, 0x15, 0x14, 0x55, 0x35, 0x31, 0xee, 0xfb, 0x84, 0x72, 0x0c,
	0xd6, 0x90, 0x38, 0xf7, 0xe3, 0x38, 0x86, 0xd3, 0x76, 0x1d, 0x9b, 0xd8, 0x74, 0xd9, 0x24, 0x67,
	0x0c, 0xd7, 0x24, 0x67, 0x83, 0x30, 0x8f, 0x08, 0x61, 0x98, 0x47, 0x84, 0x0c, 0xc2, 0xb4, 0x9a,
	0x06, 0xc3, 0xb4, 0x9a, 0xc6, 0x20, 0x4c, 0xdf, 0xe0, 0x9a, 0xfa, 0x46, 0xa0, 0xe7, 0xb3, 0x4c,
	0xcc, 0x13, 0x8b, 0xb4, 0x4c, 0x62, 0xea, 0xae, 0xe3, 0xb4, 0x38, 0x4d, 0x14, 0x20, 0xa9, 0x7f,
	0x90, 0x49, 0x4d, 0xf1, 0x5b, 0xae, 0x3d, 0x6f, 0x48, 0xec, 0x3b, 0x71, 0xec, 0xb7, 0xe4, 0xdc,
	0x67, 0x28, 0xec, 0x57, 0x62, 0x24, 0x2c, 0x6f, 0x77, 0xda, 0x0c, 0xc1, 0xee, 0xb4, 0xe5, 0x78,
	0x2d, 0x3e, 0x4e, 0x3d, 0x6c, 0xfb, 0xd8, 0xa0, 0x96, 0x63, 0x33, 0xbc, 0x48, 0x57, 0xe2, 0x7f,
	0x3f, 0x81, 0x7f, 0x76, 0x82, 0xfd, 0x13, 0x8e, 0xca, 0x5b, 0xfd, 0x7a, 0x79, 0xe7, 0x2e, 0x75,
	0x96, 0xa9, 0xb0, 0x12, 0x0d, 0xac, 0xa4, 0x52, 0xa8, 0xac, 0x77, 0xe8, 0x89, 0xe3, 0x59, 0x7f,
	0x44, 0xd6, 0x6d, 0xb3, 0xde, 0xb1, 0x5a, 0xa6, 0x46, 0xfe, 0xb0, 0x43, 0x7c, 0x8a, 0xbe, 0x84,
	0x72, 0x44, 0xb0, 0xee, 0xb6, 0xb0, 0x5d, 0x51, 0xee, 0x28, 0xf7, 0x67, 0xd6, 0x7e, 0x18, 0xaa,
	0x5b, 0x63, 0xe2, 0x6b, 0x51, 0xfd, 0xba, 0xab, 0xb5, 0x83, 0x5e, 0xb7, 0xd1, 0xc2, 0xb6, 0x56,
	0xa2, 0x71, 0x80, 0xfa, 0x5d, 0x0e, 0x6e, 0xa6, 0x88, 0xf5, 0x5d, 0xc7, 0xf6, 0x09, 0x6a, 0x42,
	0xb1, 0xc9, 0x00, 0xba, 0xeb, 0x39, 0xc7, 0x1e, 0xf1, 0x7d, 0x29, 0xf5, 0xe3, 0x5a, 0x72, 0x43,
	0xd7, 0x32, 0x99, 0xd4, 0x78, 0xaf, 0x21, 0x19, 0xec, 0x8c, 0x69, 0x85, 0x66, 0x14, 0x80, 0x34,
	0xc8, 0xb3, 0x35, 0x6d, 0x11, 0x4a, 0x2a, 0x39, 0xce, 0xfd, 0xc9, 0x28, 0xdc, 0x37, 0x24, 0xed,
	0xce, 0x98, 0x16, 0xf2, 0xa9, 0x3e, 0x82, 0x42, 0x4c, 0x2a, 0xaa, 0x42, 0x3e, 0x36, 0x85, 0x9c,
	0x16, 0xf6, 0xab, 0xaf, 0x21, 0x1f, 0x30, 0x41, 0x9f, 0xc1, 0x4c, 0xc4, 0x42, 0x72, 0xb6, 0x0f,
	0x86, 0xb6, 0xb1, 0x16, 0xa5, 0xae, 0xe7, 0x61, 0xd2, 0xa7, 0x98, 0x76, 0x7c, 0xf5, 0x2f, 0x14,
	0xf8, 0x5e, 0xdd, 0x73, 0xb0, 0x69, 0x60, 0x9f, 0x46, 0xf1, 0xe5, 0xfa, 0x5e, 0xa5, 0x58, 0x74,
	0x0f, 0x4a, 0xf8, 0x14, 0x5b, 0x54, 0x37, 0x09, 0x25, 0x82, 0x21, 0xb3, 0x6b, 0x5e, 0x2b, 0x72,
	0xf0, 0x66, 0x00, 0x55, 0xff, 0x71, 0x1c, 0x6e, 0xa5, 0x6b, 0x25, 0x97, 0xdf, 0x86, 0xb9, 0x66,
	0x30, 0xae, 0xfb, 0x1d, 0xc3, 0xe8, 0xed, 0x80, 0x9f, 0xf6, 0xaf, 0xd1, 0x45, 0xac, 0x7a, 0x83,
	0xfb, 0x82, 0xcd, 0xce, 0x98, 0x56, 0x6e, 0x26, 0x60, 0xe8, 0x4b, 0x98, 0x36, 0x1c, 0xfb, 0xc8,
	0xf2, 0xda, 0xc4, 0x94, 0x7b, 0xe1, 0xa3, 0x11, 0xe5, 0x6c, 0x04, 0xf4, 0x3b, 0x63, 0x5a, 0x8f,
	0x59, 0xf5, 0x53, 0x28, 0x27, 0x35, 0x40, 0x3f, 0x86, 0x9c, 0x65, 0xca, 0xe9, 0x7c, 0x98, 0xb4,
	0xb5, 0x38, 0xbb, 0x71, 0x33, 0xef, 0x9a, 0x5a, 0xce, 0x32, 0xab, 0x36, 0x4c, 0x87, 0x52, 0x2e,
	0xcb, 0x04, 0x3d, 0x80, 0x72, 0xb8, 0x3c, 0xfa, 0x09, 0xb1, 0x8e, 0x4f, 0x28, 0x9f, 0xf1, 0x84,
	0x56, 0x0a, 0xe1, 0x3b, 0x1c, 0x1c, 0xd9, 0x46, 0x7f, 0xb7, 0x08, 0x37, 0x13, 0x27, 0xda, 0x26,
	0x5e, 0xb0, 0x89, 0xde, 0x87, 0x02, 0x39, 0x73, 0x2d, 0xef, 0x3c, 0xe0, 0xa7, 0x70, 0x7e, 0xb3,
	0x02, 0x28, 0x98, 0xa1, 0x9f, 0xc2, 0x44, 0x9b, 0xb4, 0x9d, 0xca, 0x38, 0xd7, 0xf8, 0xd1, 0xc5,
	0x5b, 0xec, 0x73, 0xd2, 0x76, 0x1a, 0x2d, 0x6c, 0xd9, 0x94, 0x9c, 0x51, 0x8d, 0x13, 0xa2, 0x4f,
	0x60, 0xd2, 0x77, 0x3a, 0x9e, 0x41, 0x2a, 0x13, 0x9c, 0xc5, 0xfb, 0x09, 0x16, 0xdc, 0xd3, 0xb2,
	0x13, 0x6b, 0x9a, 0xec, 0x74, 0xed, 0xda, 0x26, 0x39, 0xd3, 0x24, 0x09, 0x7a, 0x01, 0x53, 0x4e,
	0x87, 0xba, 0x1d, 0xea, 0x57, 0x6e, 0xdc, 0x19, 0xbf, 0x3f, 0xb3, 0xb6, 0xd6, 0xbf, 0xbc, 0x99,
	0x13, 0xac, 0xbd, 0xe4, 0xa4, 0x5a, 0xc0, 0x02, 0x6d, 0xc3, 0x35, 0xff, 0x14, 0xbb, 0x7e, 0x65,
	0x89, 0xf3, 0x5a, 0x19, 0x85, 0xd7, 0xfe, 0x29, 0x76, 0x35, 0x41, 0x8e, 0x0e, 0x61, 0x86, 0x35,
	0x74, 0xa3, 0x85, 0xad, 0xb6, 0x5f, 0xb9, 0xcd, 0xb9, 0xfd, 0x68, 0x54, 0x6e, 0x1b, 0x8c, 0x5a,
	0x03, 0x3f, 0x68, 0x72, 0xbe, 0x26, 0x69, 0x91, 0x63, 0xcc, 0x28, 0xfc, 0xca, 0x7d, 0xce, 0xf7,
	0xc9, 0x28, 0x7c, 0x37, 0x05, 0x39, 0xd1, 0xa2, 0x8c, 0xd0, 0x1b, 0x28, 0x74, 0xec, 0x28, 0xe7,
	0x35, 0xce, 0xf9, 0xc7, 0xa3, 0x70, 0x7e, 0x15, 0x30, 0x20, 0x5a, 0x9c, 0x19, 0x6a, 0xc1, 0xf5,
	0x28, 0x20, 0xb0, 0xca, 0x63, 0x2e, 0xe3, 0x93, 0xcb, 0xc9, 0x10, 0xb6, 0x41, 0x51, 0xbe, 0xd2,
	0x46, 0x07, 0x30, 0x67, 0x35, 0x0d, 0xdd, 0x23, 0x2d, 0x7c, 0xae, 0x0b, 0x2e, 0x7e, 0xe5, 0x19,
	0x97, 0x75, 0x3f, 0xb1, 0xb3, 0xc2, 0x9b, 0xbf, 0xc6, 0x82, 0x90, 0xee, 0x6a, 0x6d, 0xb7, 0x69,
	0x68, 0x8c, 0x4e, 0x2b, 0x59, 0xb2, 0xb5, 0x6e, 0x04, 0x16, 0x9a, 0xb3, 0x0c, 0x7f, 0x6d, 0x45,
	0x3f, 0xb5, 0xe8, 0x89, 0xe9, 0xe1, 0x53, 0xdc, 0xf2, 0x2b, 0xbf, 0xc5, 0xb9, 0x2e, 0x0f, 0xe4,
	0xca, 0x08, 0x5f, 0x87, 0x74, 0x5a, 0xd9, 0x8a, 0x03, 0x7c, 0xa4, 0x43, 0xd1, 0x75, 0x7c, 0x8b,
	0x5b, 0xc7, 0x71, 0x89, 0xed, 0x57, 0xb6, 0x39, 0xeb, 0x8f, 0x46, 0x31, 0x4e, 0x43, 0x72, 0x78,
	0xe9, 0x12, 0x5b, 0x2b, 0xb8, 0x91, 0x9e, 0x8f, 0x9a, 0x50, 0x0a, 0x05, 0x18, 0x2d, 0xc7, 0x27,
	0x7e, 0xe5, 0x39, 0x97, 0xf0, 0xf1, 0x65, 0x24, 0x6c, 0x30, 0x0e, 0x5a, 0xa8, 0x32, 0xef, 0xfa,
	0xe8, 0x2d, 0xa0, 0x50, 0x46, 0x60, 0x25, 0xbf, 0xb2, 0xc3, 0xc5, 0x3c, 0xbb, 0x8c, 0x98, 0xc0,
	0x42, 0xda, 0x9c, 0x9b, 0x80, 0xf8, 0x68, 0x13, 0xf2, 0xb8, 0x43, 0x1d, 0xfd, 0x88, 0x90, 0x8a,
	0xc9, 0xdd, 0xc6, 0xbd, 0xcc, 0x65, 0x60, 0xb1, 0x68, 0x77, 0xb5, 0xb6, 0x4d, 0xc8, 0x81, 0x45,
	0xbc, 0x9d, 0x31, 0x6d, 0x8a, 0x91, 0x6e, 0x13, 0x82, 0x36, 0x01, 0xda, 0xd8, 0xee, 0xe0, 0x16,
	0xe7, 0x43, 0x52, 0xdd, 0x4f, 0x1a, 0x1f, 0x76, 0x15, 0x08, 0x42, 0xc6, 0xe5, 0xfb, 0x30, 0x43,
	0x5c, 0xc7, 0x38, 0xd1, 0x2d, 0xe6, 0x9a, 0x2a, 0xbf, 0xe0, 0x5e, 0xb2, 0x9e, 0xab, 0x28, 0x1a,
	0x70, 0x38, 0xf7, 0x58, 0xe8, 0x19, 0x5c, 0xe3, 0xbd, 0xca, 0x2f, 0x85, 0x6f, 0xff, 0x20, 0x53,
	0x0e, 0x8b, 0x73, 0xbb, 0xab, 0xb5, 0x2d, 0x86, 0xad, 0x09, 0xa2, 0xea, 0x29, 0x4c, 0x0a, 0x67,
	0x85, 0x1e, 0xc3, 0xb5, 0x2e, 0x6e, 0x75, 0x88, 0xbc, 0x22, 0xde, 0x4b, 0xb0, 0x11, 0xe1, 0x7c,
	0x77, 0xb5, 0x76, 0xc8, 0x90, 0x34, 0x81, 0x8b, 0x3e, 0x82, 0x29, 0x2c, 0xdc, 0xa7, 0xbc, 0x05,
	0x97, 0x2e, 0x76, 0xb2, 0x5a, 0x80, 0x5e, 0xfd, 0x6f, 0x05, 0x26, 0x98, 0x33, 0xba, 0x9c, 0xdc,
	0x3a, 0xcc, 0x52, 0xec, 0x1d, 0x13, 0xaa, 0xf3, 0x71, 0x29, 0xfc, 0x76, 0x16, 0xed, 0x3a, 0x6b,
	0xec, 0x9a, 0xda, 0x8c, 0x20, 0xe2, 0x5d, 0xf4, 0x23, 0x18, 0x67, 0xab, 0x33, 0x3e, 0xf4, 0xea,
	0x68, 0x0c, 0x1f, 0x6d, 0x40, 0x81, 0x3b, 0x1a, 0x3d, 0x98, 0xf8, 0xc4, 0x50, 0x13, 0x9f, 0xe5,
	0x44, 0xb2, 0x57, 0xfd, 0x1a, 0xa6, 0x43, 0x4f, 0x8c, 0x1a, 0x50, 0x12, 0x5e, 0xdd, 0x69, 0xb7,
	0x2d, 0xda, 0x26, 0x36, 0x95, 0xb6, 0x88, 0x6e, 0x3d, 0x1e, 0x8b, 0xd7, 0xa8, 0x58, 0xc2, 0x7d,
	0xca, 0x5c, 0x55, 0x88, 0xae, 0x15, 0xb9, 0x2f, 0x0f, 0xfb, 0xd5, 0x3f, 0x51, 0x20, 0x1f, 0x78,
	0x64, 0xf4, 0x04, 0x26, 0x71, 0xdb, 0xe9, 0x84, 0x5c, 0x6f, 0x25, 0x34, 0x65, 0x0f, 0x0a, 0xa6,
	0x28, 0xc7, 0xd1, 0x24, 0x2e, 0x7a, 0x0e, 0xd3, 0x1e, 0xa6, 0x44, 0x37, 0x31, 0xc5, 0xd2, 0x46,
	0x0f, 0xb3, 0x77, 0x16, 0x7f, 0xd7, 0x74, 0x57, 0x6b, 0x1a, 0xa6, 0x64, 0x13, 0x53, 0xac, 0xe5,
	0x3d, 0xd9, 0xaa, 0xfe, 0x4c, 0x01, 0xe8, 0xf9, 0xd7, 0xcb, 0x2d, 0x77, 0x4c, 0x99, 0xdc, 0x3b,
	0x28, 0xf3, 0xeb, 0x1c, 0x94, 0x12, 0xce, 0x1e, 0x7d, 0x01, 0xa8, 0x8b, 0x5b, 0x96, 0x89, 0xa9,
	0xe3, 0xe9, 0x96, 0x49, 0x6c, 0x6a, 0xd1, 0x73, 0xa9, 0x9e, 0x9a, 0xb1, 0xaa, 0xbb, 0x12, 0xed,
	0x33, 0x72, 0xae, 0xcd, 0x85, 0xd4, 0x01, 0x14, 0xd5, 0x60, 0xce, 0xa7, 0xd8, 0xa3, 0x7a, 0xf4,
	0xfc, 0xe6, 0xc2, 0xe3, 0x5b, 0xe2, 0x83, 0x5b, 0xbd, 0x33, 0xbc, 0x01, 0x53, 0x2e, 0xb1, 0x71,
	0x8b, 0x9e, 0x4b, 0x53, 0x3f, 0x18, 0x3c, 0xbb, 0x86, 0x20, 0xd0, 0x02, 0x4a, 0xf4, 0x1c, 0xca,
	0x1d, 0xbb, 0xe9, 0xd8, 0xa6, 0x65, 0x1f, 0xeb, 0x72, 0xc5, 0x27, 0x86, 0x58, 0xf1, 0x52, 0x48,
	0x25, 0x00, 0xe8, 0x09, 0x2c, 0xf4, 0x18, 0x89, 0x79, 0xc8, 0x38, 0xed, 0x1a, 0x8f, 0xd3, 0x6e,
	0x84, 0xa3, 0xfb, 0x6c, 0x50, 0xc4, 0x6b, 0xd5, 0x03, 0x98, 0x8d, 0xde, 0x14, 0xcc, 0x93, 0x06,
	0xee, 0x55, 0x1a, 0x33, 0xfb, 0x9a, 0x64, 0xef, 0x7f, 0x36, 0x25, 0x89, 0xaf, 0x85, 0x94, 0xd5,
	0x37, 0x50, 0x88, 0xdd, 0x0e, 0xec, 0x01, 0x12, 0xde, 0x06, 0x61, 0x3c, 0xfb, 0x70, 0x58, 0xce,
	0xbb, 0xa6, 0x06, 0x6e, 0xd8, 0xae, 0xfe, 0x97, 0x02, 0xe5, 0xe4, 0xad, 0x70, 0xa5, 0x12, 0x98,
	0x15, 0x3c, 0xe2, 0x13, 0xaf, 0x4b, 0x02, 0x0f, 0x39, 0xd0, 0x0a, 0x9a, 0xc4, 0xd7, 0x42, 0x4a,
	0xb4, 0x07, 0xb3, 0xd4, 0xc3, 0x7c, 0x3d, 0x5c, 0x6c, 0x79, 0x19, 0x31, 0x71, 0x1f, 0xa7, 0x03,
	0x41, 0xd3, 0xc0, 0x96, 0xc7, 0x1f, 0x5e, 0x41, 0xa7, 0x0e, 0x90, 0x3f, 0x22, 0x44, 0x6f, 0x3b,
	0x26, 0x51, 0x75, 0xa8, 0xa6, 0x5d, 0x99, 0xf2, 0x61, 0xb5, 0x0e, 0x13, 0x97, 0x7f, 0xc3, 0x73,
	0x52, 0x15, 0xc3, 0xbc, 0x74, 0x7b, 0xf5, 0x73, 0x11, 0x64, 0xcb, 0x67, 0xc0, 0x0e, 0x14, 0xa4,
	0x0f, 0x95, 0x27, 0x44, 0x19, 0x3e, 0x4e, 0x9f, 0xc5, 0x91, 0x9e, 0xaa, 0xc1, 0x42, 0x52, 0x84,
	0xd4, 0x3f, 0x72, 0x41, 0x29, 0x23, 0x5d, 0x50, 0xea, 0x1c, 0x94, 0x5e, 0xe3, 0x56, 0x8b, 0xdf,
	0x1b, 0x42, 0x61, 0xb5, 0x01, 0xe5, 0x1e, 0x48, 0x0a, 0x78, 0x06, 0xd3, 0xa7, 0x1c, 0xd6, 0xdb,
	0x2b, 0xb7, 0x33, 0x44, 0x84, 0xb4, 0xf9, 0x53, 0xd9, 0x52, 0xbf, 0x80, 0x79, 0xae, 0x6f, 0xfd,
	0x3c, 0x90, 0x2f, 0x6d, 0x73, 0x79, 0xbd, 0x9b, 0xb0, 0x90, 0x64, 0x29, 0x55, 0xbd, 0x3a, 0x7b,
	0x1b, 0xb0, 0xb8, 0xe5, 0x9e, 0x90, 0x36, 0xf1, 0x70, 0x2b, 0xa1, 0xf8, 0xd5, 0x09, 0x39, 0x80,
	0x4a, 0xbf, 0x90, 0x77, 0x5e, 0xd6, 0xbf, 0x51, 0xa0, 0x54, 0xc7, 0x2d, 0x6c, 0x1b, 0x24, 0xd4,
	0xf9, 0x53, 0x28, 0x62, 0xc3, 0x60, 0xbe, 0x4f, 0x3f, 0xb2, 0x5a, 0x94, 0x78, 0xa3, 0x28, 0x5d,
	0x90, 0xa4, 0xdb, 0x9c, 0x12, 0x3d, 0x87, 0x12, 0xbf, 0xc3, 0x74, 0xcb, 0x0c, 0x98, 0x0d, 0x19,
	0x9c, 0x14, 0xb0, 0x68, 0x08, 0x46, 0xea, 0xcf, 0x73, 0x50, 0xee, 0x29, 0x1a, 0x1e, 0xc7, 0x29,
	0x29, 0x6e, 0x04, 0x15, 0xf9, 0x9d, 0x13, 0xd0, 0xa1, 0x4f, 0x60, 0xaa, 0x29, 0xd8, 0x4a, 0xc5,
	0x2e, 0xbe, 0x82, 0x05, 0xb1, 0xa4, 0x40, 0x9f, 0x41, 0x29, 0xb0, 0x54, 0x60, 0xff, 0xf1, 0x0b,
	0x2f, 0x4a, 0xa9, 0xc7, 0xa1, 0x45, 0x4e, 0xb5, 0xc0, 0xc8, 0x12, 0x86, 0x36, 0x61, 0x56, 0xf2,
	0xd5, 0x59, 0xf0, 0x2e, 0x2f, 0xab, 0xbb, 0x17, 0xaa, 0xc3, 0x19, 0xcd, 0x48, 0x32, 0xd6, 0x51,
	0x4b, 0x50, 0xd8, 0xe7, 0x49, 0x87, 0xe0, 0x94, 0xfe, 0xa9, 0x02, 0xc5, 0x00, 0x22, 0xcd, 0x76,
	0x1f, 0xca, 0x47, 0x9d, 0x56, 0x4b, 0xf7, 0xcf, 0x6d, 0x23, 0x9e, 0x73, 0x28, 0x32, 0xf8, 0xfe,
	0xb9, 0x6d, 0xc8, 0xac, 0x43, 0x0d, 0xae, 0xbb, 0xd8, 0xa3, 0x16, 0x8e, 0x23, 0x8b, 0x84, 0xc7,
	0x9c, 0x1c, 0x8a, 0xe0, 0xdf, 0x86, 0x19, 0x03, 0x53, 0xe3, 0x84, 0xb9, 0xe6, 0x8e, 0xcb, 0x8d,
	0x91, 0xd7, 0x20, 0x00, 0xbd, 0x72, 0xd5, 0x79, 0xb8, 0x2e, 0x94, 0xd9, 0xa7, 0x1e, 0xc1, 0xed,
	0x40, 0xc9, 0x7f, 0x50, 0xe0, 0x46, 0x1c, 0x2e, 0x55, 0xfd, 0x18, 0x6e, 0xb6, 0x30, 0x25, 0x3e,
	0xd5, 0xdf, 0xda, 0xce, 0xa9, 0xad, 0x37, 0x5b, 0x8e, 0xf1, 0x36, 0xae, 0xf3, 0x82, 0x40, 0xf8,
	0x8c, 0x8d, 0xd7, 0xd9, 0xb0, 0xd4, 0x25, 0x6d, 0x96, 0xb9, 0x51, 0x66, 0x39, 0x9e, 0x31, 0x4b,
	0xf5, 0x7f, 0x14, 0x98, 0xdd, 0x73, 0x68, 0xef, 0xc4, 0xbc, 0x0f, 0x05, 0xcb, 0x36, 0x5a, 0x1d,
	0x93, 0xe8, 0xbe, 0xcb, 0x02, 0x56, 0x91, 0xb7, 0x9b, 0x95, 0xc0, 0x7d, 0x06, 0x43, 0x4f, 0x21,
	0x1f, 0x1c, 0x05, 0xb9, 0x4b, 0x06, 0x9e, 0x81, 0x29, 0x79, 0x06, 0xfa, 0xdd, 0xc8, 0xc4, 0x25,
	0xdd, 0x08, 0xda, 0x84, 0x92, 0x08, 0x86, 0x74, 0xea, 0x70, 0x65, 0xcd, 0xca, 0xe4, 0x10, 0x51,
	0x51, 0x41, 0x10, 0x1d, 0x38, 0x6c, 0x2e, 0xa6, 0xfa, 0x67, 0x0a, 0xcc, 0x73, 0x0b, 0x6c, 0x3b,
	0xde, 0xa1, 0x43, 0x2d, 0xfb, 0x38, 0x30, 0xc5, 0x43, 0x98, 0xeb, 0x3a, 0x14, 0x37, 0x5b, 0x44,
	0xc7, 0x34, 0xbe, 0x50, 0x25, 0x39, 0xb0, 0x2e, 0x63, 0xa4, 0xfe, 0x59, 0x8d, 0x5f, 0xd6, 0x39,
	0xfe, 0x01, 0x14, 0x5f, 0x5b, 0xd4, 0x8e, 0x38, 0xde, 0xb4, 0xcc, 0xfb, 0xf8, 0x95, 0x64, 0xde,
	0x75, 0x28, 0x85, 0xb2, 0xe4, 0x2e, 0x7d, 0x01, 0xb3, 0xa7, 0x02, 0x24, 0x62, 0xf2, 0xa1, 0xf2,
	0xc0, 0x92, 0x09, 0x0f, 0xc9, 0x67, 0x4e, 0x7b, 0x1d, 0xf5, 0xdf, 0x15, 0x58, 0x90, 0x83, 0xff,
	0x6f, 0xf5, 0x04, 0xf4, 0x7b, 0x80, 0xb0, 0xcc, 0xd5, 0x8b, 0xf4, 0x51, 0xe4, 0x71, 0xb1, 0x7c,
	0x31, 0xef, 0xf5, 0x28, 0x1d, 0x9f, 0xce, 0x1c, 0x4e, 0x82, 0xd4, 0xff, 0xc8, 0xc1, 0x62, 0xdf,
	0xa4, 0xa4, 0xf9, 0x7e, 0x3f, 0xa3, 0x5a, 0xf1, 0x93, 0xfe, 0x74, 0x46, 0x06, 0x8b, 0x41, 0xb5,
	0x8a, 0x46, 0x5f, 0xad, 0x62, 0x6d, 0x78, 0xde, 0xbf, 0x11, 0x95, 0x8a, 0x9f, 0x8f, 0x43, 0x81,
	0xbb, 0x8d, 0xf0, 0x04, 0x54, 0x21, 0x2f, 0x6e, 0x5c, 0x22, 0x22, 0xb1, 0xbc, 0x16, 0xf6, 0x91,
	0x01, 0x4b, 0x11, 0x87, 0x65, 0x58, 0x47, 0x96, 0xa1, 0x9b, 0xc4, 0x76, 0xda, 0x96, 0x2d, 0x53,
	0x93, 0x39, 0x9e, 0x50, 0xca, 0xbc, 0x0c, 0x37, 0x19, 0xb2, 0x76, 0xab, 0xe7, 0xe0, 0x38, 0x8f,
	0xcd, 0x28, 0x0b, 0xf4, 0x14, 0x6e, 0x06, 0x42, 0x22, 0x69, 0x49, 0xea, 0xbc, 0x25, 0xb6, 0x2f,
	0xaf, 0x86, 0x45, 0x89, 0xb0, 0x19, 0x8e, 0x1f, 0xf0, 0x61, 0xf4, 0x11, 0x54, 0x02, 0xda, 0xde,
	0xe3, 0x4b, 0x92, 0x4e, 0x70, 0xd2, 0x05, 0x39, 0xfe, 0x2a, 0x18, 0x96, 0x94, 0x1f, 0x42, 0x29,
	0xa0, 0x6c, 0xb9, 0xba, 0x7d, 0x44, 0x7d, 0xfe, 0x4e, 0xcb, 0x6b, 0x81, 0x8b, 0x7e, 0xe1, 0xee,
	0x1d, 0x51, 0x1f, 0xad, 0xc1, 0x7c, 0x80, 0xe7, 0x7a, 0x8e, 0xeb, 0xf8, 0xb8, 0x25, 0xb0, 0x27,
	0x39, 0xf6, 0x75, 0x39, 0xd8, 0x90, 0x63, 0x9c, 0x66, 0x1d, 0xde, 0x0b, 0x68, 0xba, 0xdc, 0xeb,
	0xe9, 0x1e, 0x31, 0x88, 0xe5, 0xd2, 0x40, 0xb5, 0x29, 0x4e, 0x5b, 0x95, 0x48, 0x81, 0x67, 0xe4,
	0x28, 0x42, 0x3d, 0xf5, 0x77, 0xa0, 0x18, 0x2c, 0x93, 0xdc, 0xfd, 0xcf, 0xa1, 0xc8, 0x4d, 0xaf,
	0xb7, 0x09, 0xc5, 0x91, 0x53, 0x77, 0x27, 0xcb, 0xf6, 0x9f, 0x4b, 0x3c, 0xad, 0xc0, 0xe9, 0x82,
	0xae, 0xba, 0x00, 0x37, 0xd6, 0x5d, 0xb7, 0x81, 0x3d, 0xdc, 0x26, 0x94, 0x78, 0x61, 0x04, 0xf0,
	0x06, 0xe6, 0x13, 0x70, 0x29, 0x79, 0x03, 0xc0, 0x0d, 0xa1, 0x19, 0x11, 0x14, 0x76, 0x5d, 0x7e,
	0xc6, 0x63, 0x0c, 0x22, 0x64, 0x2a, 0x82, 0xf2, 0x73, 0xec, 0x37, 0x3c, 0xab, 0x17, 0x41, 0xaa,
	0x5f, 0xc3, 0x5c, 0x04, 0x16, 0xc6, 0xdb, 0x70, 0x8c, 0x7d, 0xdd, 0xe5, 0xd0, 0x8c, 0x7d, 0xdf,
	0x97, 0x67, 0xea, 0xb1, 0x99, 0x3e, 0x0e, 0x9a, 0x6c, 0xa2, 0xdb, 0x9f, 0x6f, 0xf6, 0x4f, 0xd4,
	0x85, 0xf9, 0x04, 0x5c, 0x8a, 0x7e, 0x9d, 0x32, 0xd1, 0x9f, 0x64, 0xe7, 0x14, 0x62, 0xc5, 0xec,
	0xee, 0x6a, 0x6d, 0xbb, 0x6d, 0x66, 0x4c, 0xfe, 0x2f, 0x15, 0x58, 0x64, 0xf7, 0x60, 0xfd, 0x3c,
	0x92, 0x7e, 0x92, 0xe7, 0xaf, 0x01, 0x25, 0xdb, 0xa1, 0x24, 0x9a, 0xc7, 0xca, 0x8d, 0x98, 0xc7,
	0x62, 0xf4, 0xbd, 0x7e, 0x5a, 0x81, 0x70, 0x3c, 0xb5, 0x40, 0x78, 0x02, 0x95, 0x7e, 0xad, 0xc2,
	0xbb, 0xaa, 0xc8, 0xaf, 0x7d, 0x7e, 0x45, 0x33, 0x01, 0x95, 0xbe, 0x44, 0x69, 0xe0, 0x10, 0xf7,
	0x03, 0x3c, 0xc6, 0x4c, 0x23, 0x86, 0xe3, 0x99, 0x5a, 0xc1, 0x8f, 0x02, 0xb9, 0x01, 0xf6, 0x4f,
	0xb1, 0x9b, 0x61, 0x80, 0x64, 0x22, 0x2f, 0xf7, 0x4e, 0x89, 0xbc, 0xe1, 0x0d, 0xf0, 0x02, 0x2a,
	0xfd, 0x5a, 0x49, 0x03, 0xac, 0xc0, 0x04, 0x63, 0xdb, 0x9f, 0xfe, 0x0b, 0xa7, 0x7d, 0x8a, 0x5d,
	0x39, 0x5b, 0x8e, 0xa9, 0x2e, 0xc2, 0xfc, 0x2b, 0x9b, 0x27, 0x2c, 0x89, 0xc9, 0x06, 0xc3, 0x0d,
	0xf7, 0x29, 0x2c, 0x24, 0x07, 0x2e, 0x2d, 0xe4, 0x67, 0x0a, 0x2c, 0xec, 0x75, 0x5a, 0x2d, 0xeb,
	0xc8, 0x22, 0x5e, 0x2c, 0x84, 0x47, 0xcf, 0x61, 0xda, 0x0e, 0x46, 0xa4, 0x09, 0x1f, 0x0c, 0x4a,
	0x6b, 0x87, 0xac, 0xb4, 0x1e, 0xed, 0xf0, 0xf6, 0x5b, 0x86, 0xc5, 0x3e, 0x5d, 0xe4, 0xcc, 0x6e,
	0xc0, 0x35, 0x11, 0xe3, 0x8a, 0x3b, 0x45, 0x74, 0xd4, 0x43, 0xb8, 0x15, 0xad, 0x95, 0xda, 0x47,
	0x4e, 0xfd, 0x7c, 0x07, 0xfb, 0x27, 0xc1, 0x14, 0x44, 0xb9, 0x35, 0x37, 0x6a, 0xb9, 0x55, 0xfd,
	0x0a, 0x16, 0x12, 0x7c, 0x03, 0x8e, 0x77, 0x61, 0x36, 0x96, 0x8c, 0x13, 0x31, 0xe6, 0x8c, 0xdf,
	0xcb, 0xc1, 0xa1, 0xf7, 0x00, 0x88, 0x6d, 0xc6, 0x63, 0xff, 0x69, 0x62, 0x9b, 0x32, 0x8c, 0xff,
	0x65, 0x0e, 0x4a, 0x09, 0xe6, 0x68, 0x01, 0x26, 0x63, 0xfc, 0x64, 0xef, 0xb2, 0xfa, 0x27, 0x6f,
	0xfb, 0xf1, 0x77, 0xfa, 0x40, 0xe0, 0x10, 0x66, 0x5c, 0xe2, 0xb1, 0x0b, 0x9b, 0x5a, 0xdd, 0xa0,
	0x8e, 0xfb, 0x64, 0xf8, 0xc0, 0xaf, 0x47, 0xab, 0x45, 0x19, 0xa1, 0x75, 0x98, 0xe0, 0x2f, 0xce,
	0x6b, 0x23, 0x46, 0x92, 0xfc, 0xf5, 0xc9, 0x49, 0xd5, 0x57, 0xb0, 0xd8, 0xb7, 0x4e, 0x72, 0xc3,
	0x3c, 0x85, 0x29, 0x7a, 0xa6, 0x5b, 0xf6, 0x91, 0x23, 0x4f, 0xc3, 0xdd, 0x0b, 0xab, 0x54, 0x9c,
	0x76, 0x92, 0x9e, 0xb1, 0x5f, 0xf5, 0x77, 0xe1, 0xbd, 0x8c, 0x6d, 0x75, 0x05, 0xcc, 0x5f, 0x43,
	0x41, 0xbe, 0xe2, 0x24, 0xb3, 0x6d, 0x98, 0xe1, 0x1e, 0xdb, 0xe3, 0xe7, 0x72, 0x34, 0xbf, 0x08,
	0x76, 0xd8, 0x56, 0xff, 0x96, 0x1d, 0xe5, 0xc4, 0xeb, 0xe8, 0x6a, 0x45, 0xa0, 0x2d, 0x98, 0x0d,
	0x72, 0xf3, 0xfa, 0x5b, 0x72, 0x2e, 0x77, 0xe6, 0x30, 0xf9, 0xf9, 0x19, 0xab, 0xd7, 0x51, 0xff,
	0x79, 0x02, 0xae, 0xa7, 0x88, 0x4a, 0xbb, 0xbb, 0x94, 0x77, 0xbb, 0xbb, 0xea, 0x30, 0xc1, 0x2f,
	0x1b, 0xa1, 0x68, 0x6d, 0xf8, 0xcb, 0x97, 0x6b, 0xc5, 0x69, 0xaf, 0xee, 0xbd, 0x18, 0xf7, 0xa8,
	0x13, 0xef, 0xe0, 0x51, 0x3f, 0x80, 0xa2, 0xf0, 0x10, 0xba, 0xe1, 0x11, 0x4c, 0x89, 0x29, 0x8b,
	0x02, 0x05, 0x01, 0xdd, 0x10, 0x40, 0xe6, 0xac, 0x24, 0x9a, 0xf0, 0x9d, 0x93, 0xc2, 0x59, 0x09,
	0x98, 0x48, 0x0f, 0x54, 0x23, 0x05, 0x82, 0x29, 0x3e, 0x1c, 0xf6, 0xd1, 0x4e, 0xf8, 0xed, 0x46,
	0x9e, 0xeb, 0xba, 0x32, 0x48, 0xd7, 0x9e, 0xe1, 0xf7, 0x39, 0x5d, 0xf8, 0x21, 0xc7, 0x2e, 0x14,
	0x3d, 0x42, 0x3b, 0x9e, 0x1d, 0x26, 0xac, 0xa6, 0x87, 0x4e, 0x58, 0x15, 0x04, 0xa5, 0x04, 0xa9,
	0xff, 0x36, 0x0e, 0xd0, 0xbb, 0xc5, 0xae, 0xbe, 0x6c, 0xc7, 0xdc, 0x12, 0xbf, 0x43, 0x73, 0xa9,
	0x6e, 0xa9, 0x2f, 0xbd, 0xcf, 0x74, 0x89, 0x7c, 0xf4, 0xc2, 0x48, 0x63, 0x46, 0x1d, 0x4f, 0x18,
	0xf5, 0xca, 0xf6, 0xc0, 0x01, 0xcc, 0x88, 0x2f, 0x5b, 0xc4, 0x9b, 0x59, 0x78, 0xd1, 0xc7, 0x83,
	0xd4, 0xad, 0x63, 0x6a, 0x9c, 0x30, 0x9d, 0x45, 0xc1, 0x99, 0xbf, 0x9b, 0xc1, 0x09, 0xdb, 0xd1,
	0x9d, 0x25, 0x02, 0x0c, 0xb9, 0x69, 0x82, 0x9d, 0x25, 0x80, 0x91, 0xad, 0x31, 0xf5, 0x6e, 0x5b,
	0x43, 0xfd, 0x17, 0x05, 0x16, 0x5f, 0x9e, 0xda, 0xc4, 0xec, 0xd5, 0x6e, 0xc2, 0x08, 0xe4, 0x20,
	0xf2, 0xe5, 0x04, 0x7b, 0x70, 0x92, 0x8c, 0xac, 0x43, 0x66, 0x1d, 0x88, 0xaf, 0x75, 0xef, 0x73,
	0x09, 0xde, 0xed, 0xab, 0xe3, 0xe4, 0xde, 0xad, 0x8e, 0xa3, 0x1e, 0x43, 0xa5, 0x7f, 0x02, 0xd2,
	0xf1, 0x5e, 0x65, 0x19, 0x4b, 0x3d, 0x84, 0x0a, 0x7f, 0xc4, 0x05, 0x4f, 0xaf, 0xfa, 0x79, 0x58,
	0x15, 0x89, 0xa5, 0xf9, 0x72, 0xa3, 0xa5, 0xf9, 0x54, 0x13, 0x6e, 0xa6, 0xf0, 0xcd, 0x7c, 0x27,
	0x2a, 0x97, 0x7b, 0x27, 0xfe, 0x55, 0x0e, 0xee, 0xf4, 0x1e, 0xdc, 0x7e, 0x58, 0x19, 0xf9, 0xbf,
	0xa9, 0x46, 0xa1, 0x2f, 0x60, 0x32, 0x92, 0xf9, 0x2f, 0xa6, 0x7d, 0x0b, 0x33, 0x48, 0x9b, 0x9a,
	0x28, 0x02, 0x68, 0x92, 0x91, 0xfa, 0x35, 0x4c, 0xca, 0xfa, 0xc2, 0x02, 0xa0, 0xed, 0xdd, 0x17,
	0x07, 0x5b, 0x9a, 0xfe, 0x6a, 0x6f, 0xbf, 0xb1, 0xb5, 0xb1, 0xbb, 0xbd, 0xbb, 0xb5, 0x59, 0x1e,
	0x43, 0x8f, 0xe0, 0x9e, 0x84, 0xaf, 0xbf, 0x78, 0xa1, 0xaf, 0x6f, 0x1c, 0xec, 0x1e, 0x6e, 0xe9,
	0xaf, 0x77, 0x0f, 0x76, 0xf4, 0xbd, 0x97, 0x7b, 0x5f, 0x6d, 0x69, 0x2f, 0xf5, 0xfa, 0xfa, 0x8b,
	0xf5, 0xbd, 0x8d, 0xad, 0xfd, 0xb2, 0x82, 0x8a, 0x00, 0x3d, 0xe4, 0x72, 0x4e, 0x25, 0x70, 0xf7,
	0x02, 0x8d, 0xe4, 0x72, 0xfc, 0x36, 0x00, 0xaf, 0xc6, 0x8b, 0x64, 0xbd, 0x32, 0x6c, 0xb2, 0x7e,
	0xba, 0x1b, 0x34, 0xd7, 0xfe, 0x69, 0x1e, 0x66, 0x58, 0x63, 0x9f, 0x78, 0x5d, 0x8b, 0x57, 0x13,
	0x26, 0x45, 0xac, 0x8d, 0x6e, 0xa7, 0x04, 0x04, 0xd1, 0x17, 0x41, 0xf5, 0x4e, 0x36, 0x82, 0x54,
	0x4f, 0x87, 0xd9, 0x68, 0x42, 0x1d, 0x7d, 0x90, 0x45, 0x11, 0x4b, 0xc4, 0x57, 0x3f, 0x1c, 0x84,
	0x26, 0xd8, 0xaf, 0x28, 0xe8, 0x53, 0xb8, 0xc6, 0x63, 0x1c, 0xb4, 0xd4, 0x4f, 0x12, 0x4d, 0x8e,
	0x57, 0x6f, 0x67, 0x8e, 0x87, 0xbc, 0x08, 0x14, 0xe3, 0xf1, 0x12, 0xba, 0x97, 0x41, 0x94, 0xcc,
	0x37, 0x57, 0xef, 0x0f, 0x46, 0x0c, 0xc5, 0x7c, 0x0e, 0x93, 0x22, 0xf7, 0x92, 0x66, 0xe0, 0x58,
	0xf2, 0x2c, 0xcd, 0xc0, 0xf1, 0xb4, 0xcd, 0x8a, 0x82, 0x5a, 0x30, 0xd7, 0x77, 0x5a, 0xd1, 0xc3,
	0x0c, 0xc2, 0x14, 0x57, 0x51, 0x7d, 0x34, 0x14, 0x6e, 0x98, 0x24, 0x2d, 0xc4, 0x92, 0x30, 0x28,
	0x65, 0xa9, 0xd2, 0xd2, 0x3f, 0xd5, 0x7b, 0x03, 0xf1, 0xa4, 0x84, 0x03, 0x98, 0x0e, 0xd3, 0x2d,
	0x48, 0xed, 0xa7, 0x4a, 0xa6, 0x79, 0xaa, 0xef, 0x5f, 0x88, 0xd3, 0xd3, 0x3b, 0x96, 0x94, 0x49,
	0xd3, 0x3b, 0x2d, 0x9b, 0x93, 0xa6, 0x77, 0x7a, 0x76, 0xc7, 0x80, 0x62, 0xbc, 0xdc, 0x9d, 0xb6,
	0x7b, 0x52, 0x6b, 0xee, 0x69, 0xbb, 0x27, 0xa3, 0x72, 0xfe, 0x05, 0xe4, 0x83, 0x82, 0x35, 0x4a,
	0x79, 0x63, 0x24, 0x6a, 0xe3, 0x55, 0xf5, 0x22, 0x94, 0x9e, 0xde, 0xf1, 0xd2, 0x74, 0x9a, 0xde,
	0xa9, 0xf5, 0xf0, 0x34, 0xbd, 0x33, 0xaa, 0xdc, 0x16, 0x94, 0x93, 0x65, 0x63, 0xf4, 0xa0, 0x9f,
	0x3a, 0xa3, 0x7e, 0x5d, 0x7d, 0x38, 0x0c, 0xaa, 0x14, 0xb5, 0x0f, 0xf9, 0xa0, 0x42, 0x9b, 0x66,
	0xa2, 0x44, 0x99, 0x39, 0xcd, 0x44, 0xc9, 0x02, 0xef, 0x8a, 0xc2, 0xf4, 0x4f, 0xa6, 0xb2, 0xd2,
	0xf4, 0xcf, 0x48, 0xc2, 0xa5, 0xe9, 0x9f, 0x99, 0x19, 0xb3, 0xa0, 0x9c, 0x4c, 0x1a, 0xa5, 0x89,
	0xca, 0x48, 0x77, 0xa5, 0x89, 0xca, 0xcc, 0x41, 0x11, 0x28, 0xc6, 0x13, 0x47, 0x69, 0x4b, 0x9f,
	0x9a, 0x73, 0x4a, 0x5b, 0xfa, 0xf4, 0x1c, 0xd4, 0x8a, 0x82, 0x8e, 0xa0, 0x94, 0x48, 0xe3, 0xa0,
	0x34, 0x7f, 0x99, 0x9a, 0x75, 0xaa, 0x3e, 0x18, 0x02, 0x53, 0x4e, 0xe7, 0x0c, 0xe6, 0x53, 0x9f,
	0xe9, 0xa8, 0x36, 0xf0, 0x35, 0x1e, 0x4b, 0x13, 0x55, 0x97, 0x87, 0xc6, 0x97, 0x92, 0x4f, 0xfa,
	0x53, 0x38, 0xf7, 0x07, 0x67, 0x00, 0xb2, 0x67, 0x98, 0x91, 0xc4, 0x58, 0x51, 0xd0, 0x5b, 0x28,
	0x27, 0x83, 0xcb, 0xb4, 0xdd, 0x91, 0x11, 0x41, 0xa7, 0xed, 0x8e, 0xac, 0x58, 0x75, 0x45, 0x41,
	0x0e, 0xa0, 0xfe, 0xaf, 0x90, 0xd0, 0xa3, 0x11, 0x3e, 0xef, 0xad, 0xfe, 0x60, 0x38, 0x64, 0x69,
	0xc7, 0x3d, 0x98, 0x92, 0xe5, 0x2f, 0x74, 0x27, 0xb3, 0x32, 0x16, 0xb0, 0xbe, 0x7b, 0x01, 0x46,
	0x6f, 0x5d, 0x12, 0xe5, 0xb4, 0xb4, 0x75, 0x49, 0xaf, 0x72, 0xa6, 0xad, 0x4b, 0x46, 0x6d, 0x6e,
	0x45, 0x41, 0x36, 0xcc, 0xf5, 0xfd, 0xc9, 0x28, 0xf5, 0x16, 0xce, 0xf8, 0x8f, 0x56, 0xea, 0x2d,
	0x9c, 0xf5, 0xaf, 0xa5, 0x15, 0x05, 0x9d, 0xc2, 0x8d, 0xb4, 0x3f, 0xb2, 0xa0, 0x1f, 0x0e, 0xfb,
	0x87, 0x17, 0x21, 0xb5, 0x36, 0xda, 0xff, 0x63, 0x56, 0x14, 0xf4, 0xc7, 0x0a, 0xdc, 0xcc, 0x0c,
	0x4b, 0xd1, 0xda, 0xe8, 0x51, 0x75, 0xf5, 0xf1, 0x48, 0x34, 0x81, 0x22, 0xf5, 0x6f, 0x94, 0x5f,
	0x7c, 0xbb, 0xa4, 0xfc, 0xea, 0xdb, 0x25, 0xe5, 0x9b, 0x6f, 0x97, 0x94, 0x3f, 0xff, 0x6e, 0x69,
	0xec, 0x57, 0xdf, 0x2d, 0x8d, 0xfd, 0xfa, 0xbb, 0xa5, 0x31, 0xb8, 0x61, 0x38, 0xed, 0x3e, 0xa6,
	0xf5, 0x69, 0x16, 0xe5, 0x36, 0x3c, 0x87, 0x3a, 0x0d, 0xe5, 0xab, 0x8d, 0x63, 0x8b, 0x9e, 0x74,
	0x9a, 0xec, 0xad, 0xb5, 0x6c, 0x38, 0x7e, 0xdb, 0xf1, 0x97, 0xf9, 0x9f, 0x08, 0x88, 0xb7, 0xdc,
	0x5d, 0x0b, 0x9b, 0xc6, 0x09, 0xb6, 0x6c, 0x7f, 0x39, 0xf9, 0xdf, 0xcc, 0x4f, 0xd8, 0x6f, 0x77,
	0xf5, 0xaf, 0x73, 0xe3, 0x8d, 0xc3, 0x2f, 0xff, 0x3e, 0x57, 0x6e, 0x04, 0xa2, 0x98, 0x84, 0xda,
	0xe1, 0xea, 0xbf, 0xf6, 0x40, 0x6f, 0x18, 0xe8, 0xcd, 0xe1, 0xea, 0xb7, 0xb9, 0x5b, 0x49, 0xd0,
	0x9b, 0xe7, 0x8d, 0x7a, 0x10, 0x63, 0xfd, 0x67, 0x0e, 0x05, 0xc3, 0x4f, 0x9f, 0xb2, 0xf1, 0xa7,
	0x4f, 0x0f, 0x57, 0x9b, 0x93, 0xfc, 0xaf, 0x7d, 0x8f, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x04,
	0x1d, 0xb5, 0xb5, 0x1d, 0x3a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ViewServiceClient interface {
	// Get current status of chain sync
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Stream sync status updates until the view service has caught up with the chain.
	// Returns a stream of `StatusStreamResponse`s.
	StatusStream(ctx context.Context, in *StatusStreamRequest, opts ...grpc.CallOption) (ViewService_StatusStreamClient, error)
	// Queries for notes that have been accepted by the chain.
	// Returns a stream of `NotesResponse`s.
	Notes(ctx context.Context, in *NotesRequest, opts ...grpc.CallOption) (ViewService_NotesClient, error)
	// Returns a stream of `NotesForVotingResponse`s.
	NotesForVoting(ctx context.Context, in *NotesForVotingRequest, opts ...grpc.CallOption) (ViewService_NotesForVotingClient, error)
	// Queries for metadata about known assets.
	// Returns a stream of `AssetsResponse`s.
	Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (ViewService_AssetsClient, error)
	// Query for metadata about a specific asset, by asset ID.
	//
	// This is the same as the method on the shielded pool's `QueryService`, but exposing it
	// here allows a view server to provide more specific or opinionated asset metadata -- like
	// using an asset registry to provide tickers, symbols, etc.
	AssetMetadataById(ctx context.Context, in *AssetMetadataByIdRequest, opts ...grpc.CallOption) (*AssetMetadataByIdResponse, error)
	// Query for the current app parameters.
	AppParameters(ctx context.Context, in *AppParametersRequest, opts ...grpc.CallOption) (*AppParametersResponse, error)
	// Query for the current gas prices.
	GasPrices(ctx context.Context, in *GasPricesRequest, opts ...grpc.CallOption) (*GasPricesResponse, error)
	// Query for the current FMD parameters.
	FMDParameters(ctx context.Context, in *FMDParametersRequest, opts ...grpc.CallOption) (*FMDParametersResponse, error)
	// Query for an address given an address index
	AddressByIndex(ctx context.Context, in *AddressByIndexRequest, opts ...grpc.CallOption) (*AddressByIndexResponse, error)
	// Query for wallet id
	WalletId(ctx context.Context, in *WalletIdRequest, opts ...grpc.CallOption) (*WalletIdResponse, error)
	// Query for an address given an address index
	IndexByAddress(ctx context.Context, in *IndexByAddressRequest, opts ...grpc.CallOption) (*IndexByAddressResponse, error)
	// Query for an ephemeral address
	EphemeralAddress(ctx context.Context, in *EphemeralAddressRequest, opts ...grpc.CallOption) (*EphemeralAddressResponse, error)
	// Query for balance of a given address.
	// Returns a stream of `BalancesResponses`.
	Balances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (ViewService_BalancesClient, error)
	// Query for a note by its note commitment, optionally waiting until the note is detected.
	NoteByCommitment(ctx context.Context, in *NoteByCommitmentRequest, opts ...grpc.CallOption) (*NoteByCommitmentResponse, error)
	// Query for a swap by its swap commitment, optionally waiting until the swap is detected.
	SwapByCommitment(ctx context.Context, in *SwapByCommitmentRequest, opts ...grpc.CallOption) (*SwapByCommitmentResponse, error)
	// Query for all unclaimed swaps.
	UnclaimedSwaps(ctx context.Context, in *UnclaimedSwapsRequest, opts ...grpc.CallOption) (ViewService_UnclaimedSwapsClient, error)
	// Query for whether a nullifier has been spent, optionally waiting until it is spent.
	NullifierStatus(ctx context.Context, in *NullifierStatusRequest, opts ...grpc.CallOption) (*NullifierStatusResponse, error)
	// Query for a given transaction by its hash.
	TransactionInfoByHash(ctx context.Context, in *TransactionInfoByHashRequest, opts ...grpc.CallOption) (*TransactionInfoByHashResponse, error)
	// Query for the full transactions in the given range of blocks.
	// Returns a stream of `TransactionInfoResponse`s.
	TransactionInfo(ctx context.Context, in *TransactionInfoRequest, opts ...grpc.CallOption) (ViewService_TransactionInfoClient, error)
	// Query for owned position IDs for the given trading pair and in the given position state.
	OwnedPositionIds(ctx context.Context, in *OwnedPositionIdsRequest, opts ...grpc.CallOption) (ViewService_OwnedPositionIdsClient, error)
	// Translates a high-level intent ("send X funds to Y address") into a complete transaction plan.
	TransactionPlanner(ctx context.Context, in *TransactionPlannerRequest, opts ...grpc.CallOption) (*TransactionPlannerResponse, error)
	// Returns authentication data for the given transaction plan.
	//
	// This method takes a complete transaction plan, so that the client can get a
	// consistent set of authentication paths to a common root for the entire
	// transaction.  (Otherwise, if a client made multiple requests, the wallet
	// service could have advanced the state commitment tree  between queries).
	Witness(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessResponse, error)
	// Like `Witness`, but immediately uses the witness data to build (prove) the transaction.
	//
	// This method is useful for clients that can't easily do proving themselves, either because
	// they're not written in Rust and can't easily import the proving code, or because they don't
	// have access to proving keys, or some other reason.
	//
	// This method streams status updates to the caller before finally returning the transaction.
	WitnessAndBuild(ctx context.Context, in *WitnessAndBuildRequest, opts ...grpc.CallOption) (ViewService_WitnessAndBuildClient, error)
	// Authorize a transaction plan and build the transaction.
	//
	// This method is only supported on view servers that have access to a custody
	// service.  Otherwise, it will fail.
	//
	// Penumbra's transaction authorization mechanism is designed so transactions
	// can be signed and built (proved) concurrently. This allows implementations
	// to, e.g., start proving optimistically while presenting the user with an
	// approval dialog.
	//
	// This method streams status updates to the caller before finally returning the transaction.
	AuthorizeAndBuild(ctx context.Context, in *AuthorizeAndBuildRequest, opts ...grpc.CallOption) (ViewService_AuthorizeAndBuildClient, error)
	// Broadcast a transaction to the network, optionally waiting for full confirmation.
	//
	// This method streams status updates to the caller before finally returning confirmation.
	BroadcastTransaction(ctx context.Context, in *BroadcastTransactionRequest, opts ...grpc.CallOption) (ViewService_BroadcastTransactionClient, error)
	// Get delegation tokens for a given address index. Each delegation token will
	// be represented by a `ValueView` with the given address index's balance of
	// that token. Each `ValueView`'s `extended_metadata` field will contain the
	// `ValidatorInfo` of the delegated validator.
	DelegationsByAddressIndex(ctx context.Context, in *DelegationsByAddressIndexRequest, opts ...grpc.CallOption) (ViewService_DelegationsByAddressIndexClient, error)
}

type viewServiceClient struct {
	cc grpc1.ClientConn
}

func NewViewServiceClient(cc grpc1.ClientConn) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) StatusStream(ctx context.Context, in *StatusStreamRequest, opts ...grpc.CallOption) (ViewService_StatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[0], "/penumbra.view.v1.ViewService/StatusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_StatusStreamClient interface {
	Recv() (*StatusStreamResponse, error)
	grpc.ClientStream
}

type viewServiceStatusStreamClient struct {
	grpc.ClientStream
}

func (x *viewServiceStatusStreamClient) Recv() (*StatusStreamResponse, error) {
	m := new(StatusStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) Notes(ctx context.Context, in *NotesRequest, opts ...grpc.CallOption) (ViewService_NotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[1], "/penumbra.view.v1.ViewService/Notes", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceNotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_NotesClient interface {
	Recv() (*NotesResponse, error)
	grpc.ClientStream
}

type viewServiceNotesClient struct {
	grpc.ClientStream
}

func (x *viewServiceNotesClient) Recv() (*NotesResponse, error) {
	m := new(NotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) NotesForVoting(ctx context.Context, in *NotesForVotingRequest, opts ...grpc.CallOption) (ViewService_NotesForVotingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[2], "/penumbra.view.v1.ViewService/NotesForVoting", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceNotesForVotingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_NotesForVotingClient interface {
	Recv() (*NotesForVotingResponse, error)
	grpc.ClientStream
}

type viewServiceNotesForVotingClient struct {
	grpc.ClientStream
}

func (x *viewServiceNotesForVotingClient) Recv() (*NotesForVotingResponse, error) {
	m := new(NotesForVotingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (ViewService_AssetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[3], "/penumbra.view.v1.ViewService/Assets", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceAssetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_AssetsClient interface {
	Recv() (*AssetsResponse, error)
	grpc.ClientStream
}

type viewServiceAssetsClient struct {
	grpc.ClientStream
}

func (x *viewServiceAssetsClient) Recv() (*AssetsResponse, error) {
	m := new(AssetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) AssetMetadataById(ctx context.Context, in *AssetMetadataByIdRequest, opts ...grpc.CallOption) (*AssetMetadataByIdResponse, error) {
	out := new(AssetMetadataByIdResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/AssetMetadataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) AppParameters(ctx context.Context, in *AppParametersRequest, opts ...grpc.CallOption) (*AppParametersResponse, error) {
	out := new(AppParametersResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/AppParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) GasPrices(ctx context.Context, in *GasPricesRequest, opts ...grpc.CallOption) (*GasPricesResponse, error) {
	out := new(GasPricesResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/GasPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) FMDParameters(ctx context.Context, in *FMDParametersRequest, opts ...grpc.CallOption) (*FMDParametersResponse, error) {
	out := new(FMDParametersResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/FMDParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) AddressByIndex(ctx context.Context, in *AddressByIndexRequest, opts ...grpc.CallOption) (*AddressByIndexResponse, error) {
	out := new(AddressByIndexResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/AddressByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) WalletId(ctx context.Context, in *WalletIdRequest, opts ...grpc.CallOption) (*WalletIdResponse, error) {
	out := new(WalletIdResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/WalletId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) IndexByAddress(ctx context.Context, in *IndexByAddressRequest, opts ...grpc.CallOption) (*IndexByAddressResponse, error) {
	out := new(IndexByAddressResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/IndexByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) EphemeralAddress(ctx context.Context, in *EphemeralAddressRequest, opts ...grpc.CallOption) (*EphemeralAddressResponse, error) {
	out := new(EphemeralAddressResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/EphemeralAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) Balances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (ViewService_BalancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[4], "/penumbra.view.v1.ViewService/Balances", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceBalancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_BalancesClient interface {
	Recv() (*BalancesResponse, error)
	grpc.ClientStream
}

type viewServiceBalancesClient struct {
	grpc.ClientStream
}

func (x *viewServiceBalancesClient) Recv() (*BalancesResponse, error) {
	m := new(BalancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) NoteByCommitment(ctx context.Context, in *NoteByCommitmentRequest, opts ...grpc.CallOption) (*NoteByCommitmentResponse, error) {
	out := new(NoteByCommitmentResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/NoteByCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) SwapByCommitment(ctx context.Context, in *SwapByCommitmentRequest, opts ...grpc.CallOption) (*SwapByCommitmentResponse, error) {
	out := new(SwapByCommitmentResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/SwapByCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) UnclaimedSwaps(ctx context.Context, in *UnclaimedSwapsRequest, opts ...grpc.CallOption) (ViewService_UnclaimedSwapsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[5], "/penumbra.view.v1.ViewService/UnclaimedSwaps", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceUnclaimedSwapsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_UnclaimedSwapsClient interface {
	Recv() (*UnclaimedSwapsResponse, error)
	grpc.ClientStream
}

type viewServiceUnclaimedSwapsClient struct {
	grpc.ClientStream
}

func (x *viewServiceUnclaimedSwapsClient) Recv() (*UnclaimedSwapsResponse, error) {
	m := new(UnclaimedSwapsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) NullifierStatus(ctx context.Context, in *NullifierStatusRequest, opts ...grpc.CallOption) (*NullifierStatusResponse, error) {
	out := new(NullifierStatusResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/NullifierStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) TransactionInfoByHash(ctx context.Context, in *TransactionInfoByHashRequest, opts ...grpc.CallOption) (*TransactionInfoByHashResponse, error) {
	out := new(TransactionInfoByHashResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/TransactionInfoByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) TransactionInfo(ctx context.Context, in *TransactionInfoRequest, opts ...grpc.CallOption) (ViewService_TransactionInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[6], "/penumbra.view.v1.ViewService/TransactionInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceTransactionInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_TransactionInfoClient interface {
	Recv() (*TransactionInfoResponse, error)
	grpc.ClientStream
}

type viewServiceTransactionInfoClient struct {
	grpc.ClientStream
}

func (x *viewServiceTransactionInfoClient) Recv() (*TransactionInfoResponse, error) {
	m := new(TransactionInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) OwnedPositionIds(ctx context.Context, in *OwnedPositionIdsRequest, opts ...grpc.CallOption) (ViewService_OwnedPositionIdsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[7], "/penumbra.view.v1.ViewService/OwnedPositionIds", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceOwnedPositionIdsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_OwnedPositionIdsClient interface {
	Recv() (*OwnedPositionIdsResponse, error)
	grpc.ClientStream
}

type viewServiceOwnedPositionIdsClient struct {
	grpc.ClientStream
}

func (x *viewServiceOwnedPositionIdsClient) Recv() (*OwnedPositionIdsResponse, error) {
	m := new(OwnedPositionIdsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) TransactionPlanner(ctx context.Context, in *TransactionPlannerRequest, opts ...grpc.CallOption) (*TransactionPlannerResponse, error) {
	out := new(TransactionPlannerResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/TransactionPlanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) Witness(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessResponse, error) {
	out := new(WitnessResponse)
	err := c.cc.Invoke(ctx, "/penumbra.view.v1.ViewService/Witness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) WitnessAndBuild(ctx context.Context, in *WitnessAndBuildRequest, opts ...grpc.CallOption) (ViewService_WitnessAndBuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[8], "/penumbra.view.v1.ViewService/WitnessAndBuild", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceWitnessAndBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_WitnessAndBuildClient interface {
	Recv() (*WitnessAndBuildResponse, error)
	grpc.ClientStream
}

type viewServiceWitnessAndBuildClient struct {
	grpc.ClientStream
}

func (x *viewServiceWitnessAndBuildClient) Recv() (*WitnessAndBuildResponse, error) {
	m := new(WitnessAndBuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) AuthorizeAndBuild(ctx context.Context, in *AuthorizeAndBuildRequest, opts ...grpc.CallOption) (ViewService_AuthorizeAndBuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[9], "/penumbra.view.v1.ViewService/AuthorizeAndBuild", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceAuthorizeAndBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_AuthorizeAndBuildClient interface {
	Recv() (*AuthorizeAndBuildResponse, error)
	grpc.ClientStream
}

type viewServiceAuthorizeAndBuildClient struct {
	grpc.ClientStream
}

func (x *viewServiceAuthorizeAndBuildClient) Recv() (*AuthorizeAndBuildResponse, error) {
	m := new(AuthorizeAndBuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) BroadcastTransaction(ctx context.Context, in *BroadcastTransactionRequest, opts ...grpc.CallOption) (ViewService_BroadcastTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[10], "/penumbra.view.v1.ViewService/BroadcastTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceBroadcastTransactionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_BroadcastTransactionClient interface {
	Recv() (*BroadcastTransactionResponse, error)
	grpc.ClientStream
}

type viewServiceBroadcastTransactionClient struct {
	grpc.ClientStream
}

func (x *viewServiceBroadcastTransactionClient) Recv() (*BroadcastTransactionResponse, error) {
	m := new(BroadcastTransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *viewServiceClient) DelegationsByAddressIndex(ctx context.Context, in *DelegationsByAddressIndexRequest, opts ...grpc.CallOption) (ViewService_DelegationsByAddressIndexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[11], "/penumbra.view.v1.ViewService/DelegationsByAddressIndex", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceDelegationsByAddressIndexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_DelegationsByAddressIndexClient interface {
	Recv() (*DelegationsByAddressIndexResponse, error)
	grpc.ClientStream
}

type viewServiceDelegationsByAddressIndexClient struct {
	grpc.ClientStream
}

func (x *viewServiceDelegationsByAddressIndexClient) Recv() (*DelegationsByAddressIndexResponse, error) {
	m := new(DelegationsByAddressIndexResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ViewServiceServer is the server API for ViewService service.
type ViewServiceServer interface {
	// Get current status of chain sync
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Stream sync status updates until the view service has caught up with the chain.
	// Returns a stream of `StatusStreamResponse`s.
	StatusStream(*StatusStreamRequest, ViewService_StatusStreamServer) error
	// Queries for notes that have been accepted by the chain.
	// Returns a stream of `NotesResponse`s.
	Notes(*NotesRequest, ViewService_NotesServer) error
	// Returns a stream of `NotesForVotingResponse`s.
	NotesForVoting(*NotesForVotingRequest, ViewService_NotesForVotingServer) error
	// Queries for metadata about known assets.
	// Returns a stream of `AssetsResponse`s.
	Assets(*AssetsRequest, ViewService_AssetsServer) error
	// Query for metadata about a specific asset, by asset ID.
	//
	// This is the same as the method on the shielded pool's `QueryService`, but exposing it
	// here allows a view server to provide more specific or opinionated asset metadata -- like
	// using an asset registry to provide tickers, symbols, etc.
	AssetMetadataById(context.Context, *AssetMetadataByIdRequest) (*AssetMetadataByIdResponse, error)
	// Query for the current app parameters.
	AppParameters(context.Context, *AppParametersRequest) (*AppParametersResponse, error)
	// Query for the current gas prices.
	GasPrices(context.Context, *GasPricesRequest) (*GasPricesResponse, error)
	// Query for the current FMD parameters.
	FMDParameters(context.Context, *FMDParametersRequest) (*FMDParametersResponse, error)
	// Query for an address given an address index
	AddressByIndex(context.Context, *AddressByIndexRequest) (*AddressByIndexResponse, error)
	// Query for wallet id
	WalletId(context.Context, *WalletIdRequest) (*WalletIdResponse, error)
	// Query for an address given an address index
	IndexByAddress(context.Context, *IndexByAddressRequest) (*IndexByAddressResponse, error)
	// Query for an ephemeral address
	EphemeralAddress(context.Context, *EphemeralAddressRequest) (*EphemeralAddressResponse, error)
	// Query for balance of a given address.
	// Returns a stream of `BalancesResponses`.
	Balances(*BalancesRequest, ViewService_BalancesServer) error
	// Query for a note by its note commitment, optionally waiting until the note is detected.
	NoteByCommitment(context.Context, *NoteByCommitmentRequest) (*NoteByCommitmentResponse, error)
	// Query for a swap by its swap commitment, optionally waiting until the swap is detected.
	SwapByCommitment(context.Context, *SwapByCommitmentRequest) (*SwapByCommitmentResponse, error)
	// Query for all unclaimed swaps.
	UnclaimedSwaps(*UnclaimedSwapsRequest, ViewService_UnclaimedSwapsServer) error
	// Query for whether a nullifier has been spent, optionally waiting until it is spent.
	NullifierStatus(context.Context, *NullifierStatusRequest) (*NullifierStatusResponse, error)
	// Query for a given transaction by its hash.
	TransactionInfoByHash(context.Context, *TransactionInfoByHashRequest) (*TransactionInfoByHashResponse, error)
	// Query for the full transactions in the given range of blocks.
	// Returns a stream of `TransactionInfoResponse`s.
	TransactionInfo(*TransactionInfoRequest, ViewService_TransactionInfoServer) error
	// Query for owned position IDs for the given trading pair and in the given position state.
	OwnedPositionIds(*OwnedPositionIdsRequest, ViewService_OwnedPositionIdsServer) error
	// Translates a high-level intent ("send X funds to Y address") into a complete transaction plan.
	TransactionPlanner(context.Context, *TransactionPlannerRequest) (*TransactionPlannerResponse, error)
	// Returns authentication data for the given transaction plan.
	//
	// This method takes a complete transaction plan, so that the client can get a
	// consistent set of authentication paths to a common root for the entire
	// transaction.  (Otherwise, if a client made multiple requests, the wallet
	// service could have advanced the state commitment tree  between queries).
	Witness(context.Context, *WitnessRequest) (*WitnessResponse, error)
	// Like `Witness`, but immediately uses the witness data to build (prove) the transaction.
	//
	// This method is useful for clients that can't easily do proving themselves, either because
	// they're not written in Rust and can't easily import the proving code, or because they don't
	// have access to proving keys, or some other reason.
	//
	// This method streams status updates to the caller before finally returning the transaction.
	WitnessAndBuild(*WitnessAndBuildRequest, ViewService_WitnessAndBuildServer) error
	// Authorize a transaction plan and build the transaction.
	//
	// This method is only supported on view servers that have access to a custody
	// service.  Otherwise, it will fail.
	//
	// Penumbra's transaction authorization mechanism is designed so transactions
	// can be signed and built (proved) concurrently. This allows implementations
	// to, e.g., start proving optimistically while presenting the user with an
	// approval dialog.
	//
	// This method streams status updates to the caller before finally returning the transaction.
	AuthorizeAndBuild(*AuthorizeAndBuildRequest, ViewService_AuthorizeAndBuildServer) error
	// Broadcast a transaction to the network, optionally waiting for full confirmation.
	//
	// This method streams status updates to the caller before finally returning confirmation.
	BroadcastTransaction(*BroadcastTransactionRequest, ViewService_BroadcastTransactionServer) error
	// Get delegation tokens for a given address index. Each delegation token will
	// be represented by a `ValueView` with the given address index's balance of
	// that token. Each `ValueView`'s `extended_metadata` field will contain the
	// `ValidatorInfo` of the delegated validator.
	DelegationsByAddressIndex(*DelegationsByAddressIndexRequest, ViewService_DelegationsByAddressIndexServer) error
}

// UnimplementedViewServiceServer can be embedded to have forward compatible implementations.
type UnimplementedViewServiceServer struct {
}

func (*UnimplementedViewServiceServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedViewServiceServer) StatusStream(req *StatusStreamRequest, srv ViewService_StatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusStream not implemented")
}
func (*UnimplementedViewServiceServer) Notes(req *NotesRequest, srv ViewService_NotesServer) error {
	return status.Errorf(codes.Unimplemented, "method Notes not implemented")
}
func (*UnimplementedViewServiceServer) NotesForVoting(req *NotesForVotingRequest, srv ViewService_NotesForVotingServer) error {
	return status.Errorf(codes.Unimplemented, "method NotesForVoting not implemented")
}
func (*UnimplementedViewServiceServer) Assets(req *AssetsRequest, srv ViewService_AssetsServer) error {
	return status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (*UnimplementedViewServiceServer) AssetMetadataById(ctx context.Context, req *AssetMetadataByIdRequest) (*AssetMetadataByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetMetadataById not implemented")
}
func (*UnimplementedViewServiceServer) AppParameters(ctx context.Context, req *AppParametersRequest) (*AppParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppParameters not implemented")
}
func (*UnimplementedViewServiceServer) GasPrices(ctx context.Context, req *GasPricesRequest) (*GasPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrices not implemented")
}
func (*UnimplementedViewServiceServer) FMDParameters(ctx context.Context, req *FMDParametersRequest) (*FMDParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FMDParameters not implemented")
}
func (*UnimplementedViewServiceServer) AddressByIndex(ctx context.Context, req *AddressByIndexRequest) (*AddressByIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressByIndex not implemented")
}
func (*UnimplementedViewServiceServer) WalletId(ctx context.Context, req *WalletIdRequest) (*WalletIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletId not implemented")
}
func (*UnimplementedViewServiceServer) IndexByAddress(ctx context.Context, req *IndexByAddressRequest) (*IndexByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexByAddress not implemented")
}
func (*UnimplementedViewServiceServer) EphemeralAddress(ctx context.Context, req *EphemeralAddressRequest) (*EphemeralAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EphemeralAddress not implemented")
}
func (*UnimplementedViewServiceServer) Balances(req *BalancesRequest, srv ViewService_BalancesServer) error {
	return status.Errorf(codes.Unimplemented, "method Balances not implemented")
}
func (*UnimplementedViewServiceServer) NoteByCommitment(ctx context.Context, req *NoteByCommitmentRequest) (*NoteByCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteByCommitment not implemented")
}
func (*UnimplementedViewServiceServer) SwapByCommitment(ctx context.Context, req *SwapByCommitmentRequest) (*SwapByCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapByCommitment not implemented")
}
func (*UnimplementedViewServiceServer) UnclaimedSwaps(req *UnclaimedSwapsRequest, srv ViewService_UnclaimedSwapsServer) error {
	return status.Errorf(codes.Unimplemented, "method UnclaimedSwaps not implemented")
}
func (*UnimplementedViewServiceServer) NullifierStatus(ctx context.Context, req *NullifierStatusRequest) (*NullifierStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NullifierStatus not implemented")
}
func (*UnimplementedViewServiceServer) TransactionInfoByHash(ctx context.Context, req *TransactionInfoByHashRequest) (*TransactionInfoByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionInfoByHash not implemented")
}
func (*UnimplementedViewServiceServer) TransactionInfo(req *TransactionInfoRequest, srv ViewService_TransactionInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionInfo not implemented")
}
func (*UnimplementedViewServiceServer) OwnedPositionIds(req *OwnedPositionIdsRequest, srv ViewService_OwnedPositionIdsServer) error {
	return status.Errorf(codes.Unimplemented, "method OwnedPositionIds not implemented")
}
func (*UnimplementedViewServiceServer) TransactionPlanner(ctx context.Context, req *TransactionPlannerRequest) (*TransactionPlannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionPlanner not implemented")
}
func (*UnimplementedViewServiceServer) Witness(ctx context.Context, req *WitnessRequest) (*WitnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Witness not implemented")
}
func (*UnimplementedViewServiceServer) WitnessAndBuild(req *WitnessAndBuildRequest, srv ViewService_WitnessAndBuildServer) error {
	return status.Errorf(codes.Unimplemented, "method WitnessAndBuild not implemented")
}
func (*UnimplementedViewServiceServer) AuthorizeAndBuild(req *AuthorizeAndBuildRequest, srv ViewService_AuthorizeAndBuildServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthorizeAndBuild not implemented")
}
func (*UnimplementedViewServiceServer) BroadcastTransaction(req *BroadcastTransactionRequest, srv ViewService_BroadcastTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastTransaction not implemented")
}
func (*UnimplementedViewServiceServer) DelegationsByAddressIndex(req *DelegationsByAddressIndexRequest, srv ViewService_DelegationsByAddressIndexServer) error {
	return status.Errorf(codes.Unimplemented, "method DelegationsByAddressIndex not implemented")
}

func RegisterViewServiceServer(s grpc1.Server, srv ViewServiceServer) {
	s.RegisterService(&_ViewService_serviceDesc, srv)
}

func _ViewService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_StatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).StatusStream(m, &viewServiceStatusStreamServer{stream})
}

type ViewService_StatusStreamServer interface {
	Send(*StatusStreamResponse) error
	grpc.ServerStream
}

type viewServiceStatusStreamServer struct {
	grpc.ServerStream
}

func (x *viewServiceStatusStreamServer) Send(m *StatusStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_Notes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).Notes(m, &viewServiceNotesServer{stream})
}

type ViewService_NotesServer interface {
	Send(*NotesResponse) error
	grpc.ServerStream
}

type viewServiceNotesServer struct {
	grpc.ServerStream
}

func (x *viewServiceNotesServer) Send(m *NotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_NotesForVoting_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotesForVotingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).NotesForVoting(m, &viewServiceNotesForVotingServer{stream})
}

type ViewService_NotesForVotingServer interface {
	Send(*NotesForVotingResponse) error
	grpc.ServerStream
}

type viewServiceNotesForVotingServer struct {
	grpc.ServerStream
}

func (x *viewServiceNotesForVotingServer) Send(m *NotesForVotingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_Assets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).Assets(m, &viewServiceAssetsServer{stream})
}

type ViewService_AssetsServer interface {
	Send(*AssetsResponse) error
	grpc.ServerStream
}

type viewServiceAssetsServer struct {
	grpc.ServerStream
}

func (x *viewServiceAssetsServer) Send(m *AssetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_AssetMetadataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetMetadataByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).AssetMetadataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/AssetMetadataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).AssetMetadataById(ctx, req.(*AssetMetadataByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_AppParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).AppParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/AppParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).AppParameters(ctx, req.(*AppParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_GasPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GasPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).GasPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/GasPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).GasPrices(ctx, req.(*GasPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_FMDParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FMDParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).FMDParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/FMDParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).FMDParameters(ctx, req.(*FMDParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_AddressByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).AddressByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/AddressByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).AddressByIndex(ctx, req.(*AddressByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_WalletId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).WalletId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/WalletId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).WalletId(ctx, req.(*WalletIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_IndexByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).IndexByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/IndexByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).IndexByAddress(ctx, req.(*IndexByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_EphemeralAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EphemeralAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).EphemeralAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/EphemeralAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).EphemeralAddress(ctx, req.(*EphemeralAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_Balances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BalancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).Balances(m, &viewServiceBalancesServer{stream})
}

type ViewService_BalancesServer interface {
	Send(*BalancesResponse) error
	grpc.ServerStream
}

type viewServiceBalancesServer struct {
	grpc.ServerStream
}

func (x *viewServiceBalancesServer) Send(m *BalancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_NoteByCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteByCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).NoteByCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/NoteByCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).NoteByCommitment(ctx, req.(*NoteByCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_SwapByCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapByCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).SwapByCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/SwapByCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).SwapByCommitment(ctx, req.(*SwapByCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_UnclaimedSwaps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnclaimedSwapsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).UnclaimedSwaps(m, &viewServiceUnclaimedSwapsServer{stream})
}

type ViewService_UnclaimedSwapsServer interface {
	Send(*UnclaimedSwapsResponse) error
	grpc.ServerStream
}

type viewServiceUnclaimedSwapsServer struct {
	grpc.ServerStream
}

func (x *viewServiceUnclaimedSwapsServer) Send(m *UnclaimedSwapsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_NullifierStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullifierStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).NullifierStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/NullifierStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).NullifierStatus(ctx, req.(*NullifierStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_TransactionInfoByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfoByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).TransactionInfoByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/TransactionInfoByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).TransactionInfoByHash(ctx, req.(*TransactionInfoByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_TransactionInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).TransactionInfo(m, &viewServiceTransactionInfoServer{stream})
}

type ViewService_TransactionInfoServer interface {
	Send(*TransactionInfoResponse) error
	grpc.ServerStream
}

type viewServiceTransactionInfoServer struct {
	grpc.ServerStream
}

func (x *viewServiceTransactionInfoServer) Send(m *TransactionInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_OwnedPositionIds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OwnedPositionIdsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).OwnedPositionIds(m, &viewServiceOwnedPositionIdsServer{stream})
}

type ViewService_OwnedPositionIdsServer interface {
	Send(*OwnedPositionIdsResponse) error
	grpc.ServerStream
}

type viewServiceOwnedPositionIdsServer struct {
	grpc.ServerStream
}

func (x *viewServiceOwnedPositionIdsServer) Send(m *OwnedPositionIdsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_TransactionPlanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPlannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).TransactionPlanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/TransactionPlanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).TransactionPlanner(ctx, req.(*TransactionPlannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_Witness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WitnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).Witness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.view.v1.ViewService/Witness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).Witness(ctx, req.(*WitnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_WitnessAndBuild_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WitnessAndBuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).WitnessAndBuild(m, &viewServiceWitnessAndBuildServer{stream})
}

type ViewService_WitnessAndBuildServer interface {
	Send(*WitnessAndBuildResponse) error
	grpc.ServerStream
}

type viewServiceWitnessAndBuildServer struct {
	grpc.ServerStream
}

func (x *viewServiceWitnessAndBuildServer) Send(m *WitnessAndBuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_AuthorizeAndBuild_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuthorizeAndBuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).AuthorizeAndBuild(m, &viewServiceAuthorizeAndBuildServer{stream})
}

type ViewService_AuthorizeAndBuildServer interface {
	Send(*AuthorizeAndBuildResponse) error
	grpc.ServerStream
}

type viewServiceAuthorizeAndBuildServer struct {
	grpc.ServerStream
}

func (x *viewServiceAuthorizeAndBuildServer) Send(m *AuthorizeAndBuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_BroadcastTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BroadcastTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).BroadcastTransaction(m, &viewServiceBroadcastTransactionServer{stream})
}

type ViewService_BroadcastTransactionServer interface {
	Send(*BroadcastTransactionResponse) error
	grpc.ServerStream
}

type viewServiceBroadcastTransactionServer struct {
	grpc.ServerStream
}

func (x *viewServiceBroadcastTransactionServer) Send(m *BroadcastTransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ViewService_DelegationsByAddressIndex_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DelegationsByAddressIndexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).DelegationsByAddressIndex(m, &viewServiceDelegationsByAddressIndexServer{stream})
}

type ViewService_DelegationsByAddressIndexServer interface {
	Send(*DelegationsByAddressIndexResponse) error
	grpc.ServerStream
}

type viewServiceDelegationsByAddressIndexServer struct {
	grpc.ServerStream
}

func (x *viewServiceDelegationsByAddressIndexServer) Send(m *DelegationsByAddressIndexResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ViewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.view.v1.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ViewService_Status_Handler,
		},
		{
			MethodName: "AssetMetadataById",
			Handler:    _ViewService_AssetMetadataById_Handler,
		},
		{
			MethodName: "AppParameters",
			Handler:    _ViewService_AppParameters_Handler,
		},
		{
			MethodName: "GasPrices",
			Handler:    _ViewService_GasPrices_Handler,
		},
		{
			MethodName: "FMDParameters",
			Handler:    _ViewService_FMDParameters_Handler,
		},
		{
			MethodName: "AddressByIndex",
			Handler:    _ViewService_AddressByIndex_Handler,
		},
		{
			MethodName: "WalletId",
			Handler:    _ViewService_WalletId_Handler,
		},
		{
			MethodName: "IndexByAddress",
			Handler:    _ViewService_IndexByAddress_Handler,
		},
		{
			MethodName: "EphemeralAddress",
			Handler:    _ViewService_EphemeralAddress_Handler,
		},
		{
			MethodName: "NoteByCommitment",
			Handler:    _ViewService_NoteByCommitment_Handler,
		},
		{
			MethodName: "SwapByCommitment",
			Handler:    _ViewService_SwapByCommitment_Handler,
		},
		{
			MethodName: "NullifierStatus",
			Handler:    _ViewService_NullifierStatus_Handler,
		},
		{
			MethodName: "TransactionInfoByHash",
			Handler:    _ViewService_TransactionInfoByHash_Handler,
		},
		{
			MethodName: "TransactionPlanner",
			Handler:    _ViewService_TransactionPlanner_Handler,
		},
		{
			MethodName: "Witness",
			Handler:    _ViewService_Witness_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatusStream",
			Handler:       _ViewService_StatusStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Notes",
			Handler:       _ViewService_Notes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NotesForVoting",
			Handler:       _ViewService_NotesForVoting_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Assets",
			Handler:       _ViewService_Assets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Balances",
			Handler:       _ViewService_Balances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UnclaimedSwaps",
			Handler:       _ViewService_UnclaimedSwaps_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransactionInfo",
			Handler:       _ViewService_TransactionInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OwnedPositionIds",
			Handler:       _ViewService_OwnedPositionIds_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WitnessAndBuild",
			Handler:       _ViewService_WitnessAndBuild_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AuthorizeAndBuild",
			Handler:       _ViewService_AuthorizeAndBuild_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BroadcastTransaction",
			Handler:       _ViewService_BroadcastTransaction_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DelegationsByAddressIndex",
			Handler:       _ViewService_DelegationsByAddressIndex_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "penumbra/view/v1/view.proto",
}

func (m *AuthorizeAndBuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAndBuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeAndBuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransactionPlan != nil {
		{
			size, err := m.TransactionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizeAndBuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAndBuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeAndBuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizeAndBuildResponse_BuildProgress_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeAndBuildResponse_BuildProgress_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildProgress != nil {
		{
			size, err := m.BuildProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AuthorizeAndBuildResponse_Complete_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeAndBuildResponse_Complete_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Complete != nil {
		{
			size, err := m.Complete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AuthorizeAndBuildResponse_BuildProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAndBuildResponse_BuildProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeAndBuildResponse_BuildProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Progress != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Progress))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *AuthorizeAndBuildResponse_Complete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAndBuildResponse_Complete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeAndBuildResponse_Complete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTransactionResponse_BroadcastSuccess_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionResponse_BroadcastSuccess_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BroadcastSuccess != nil {
		{
			size, err := m.BroadcastSuccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BroadcastTransactionResponse_Confirmed_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionResponse_Confirmed_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Confirmed != nil {
		{
			size, err := m.Confirmed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTransactionResponse_BroadcastSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionResponse_BroadcastSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastTransactionResponse_Confirmed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastTransactionResponse_Confirmed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastTransactionResponse_Confirmed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DetectionHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.DetectionHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.EpochIndex != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc0
	}
	if m.FeeMode != nil {
		{
			size := m.FeeMode.Size()
			i -= size
			if _, err := m.FeeMode.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PositionWithdraws) > 0 {
		for iNdEx := len(m.PositionWithdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PositionWithdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.PositionCloses) > 0 {
		for iNdEx := len(m.PositionCloses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PositionCloses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.PositionOpens) > 0 {
		for iNdEx := len(m.PositionOpens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PositionOpens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.Ics20Withdrawals) > 0 {
		for iNdEx := len(m.Ics20Withdrawals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ics20Withdrawals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.IbcRelayActions) > 0 {
		for iNdEx := len(m.IbcRelayActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IbcRelayActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.UndelegationClaims) > 0 {
		for iNdEx := len(m.UndelegationClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UndelegationClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Undelegations) > 0 {
		for iNdEx := len(m.Undelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Undelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.SwapClaims) > 0 {
		for iNdEx := len(m.SwapClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.Swaps) > 0 {
		for iNdEx := len(m.Swaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Swaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpiryHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.ExpiryHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_AutoFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_AutoFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoFee != nil {
		{
			size, err := m.AutoFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *TransactionPlannerRequest_ManualFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_ManualFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManualFee != nil {
		{
			size, err := m.ManualFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *TransactionPlannerRequest_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Swap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Swap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Swap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimAddress != nil {
		{
			size, err := m.ClaimAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TargetAsset != nil {
		{
			size, err := m.TargetAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_SwapClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_SwapClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_SwapClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapCommitment != nil {
		{
			size, err := m.SwapCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Delegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateData != nil {
		{
			size, err := m.RateData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_Undelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_Undelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_Undelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateData != nil {
		{
			size, err := m.RateData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_UndelegateClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_UndelegateClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_UndelegateClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingStartHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.UnbondingStartHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.UnbondingAmount != nil {
		{
			size, err := m.UnbondingAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Penalty != nil {
		{
			size, err := m.Penalty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartEpochIndex != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.StartEpochIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorIdentity != nil {
		{
			size, err := m.ValidatorIdentity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_PositionOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_PositionOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_PositionOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_PositionClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_PositionClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_PositionClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != nil {
		{
			size, err := m.PositionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerRequest_PositionWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerRequest_PositionWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerRequest_PositionWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Reserves != nil {
		{
			size, err := m.Reserves.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PositionId != nil {
		{
			size, err := m.PositionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionPlannerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionPlannerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionPlannerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Plan != nil {
		{
			size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WalletIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *WalletIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WalletId != nil {
		{
			size, err := m.WalletId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EphemeralAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EphemeralAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EphemeralAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EphemeralAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetIdFilter != nil {
		{
			size, err := m.AssetIdFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AccountFilter != nil {
		{
			size, err := m.AccountFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BalanceView != nil {
		{
			size, err := m.BalanceView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AccountAddress != nil {
		{
			size, err := m.AccountAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CatchingUp {
		i--
		if m.CatchingUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PartialSyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PartialSyncHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.FullSyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FullSyncHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StatusStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartialSyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.PartialSyncHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.FullSyncHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.FullSyncHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.LatestKnownBlockHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.LatestKnownBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmountToSpend != nil {
		{
			size, err := m.AmountToSpend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IncludeSpent {
		i--
		if m.IncludeSpent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *NotesForVotingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesForVotingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesForVotingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VotableAtHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.VotableAtHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WitnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransactionPlan != nil {
		{
			size, err := m.TransactionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *WitnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WitnessData != nil {
		{
			size, err := m.WitnessData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WitnessAndBuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessAndBuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessAndBuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorizationData != nil {
		{
			size, err := m.AuthorizationData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TransactionPlan != nil {
		{
			size, err := m.TransactionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WitnessAndBuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessAndBuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessAndBuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size := m.Status.Size()
			i -= size
			if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WitnessAndBuildResponse_BuildProgress_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessAndBuildResponse_BuildProgress_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BuildProgress != nil {
		{
			size, err := m.BuildProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WitnessAndBuildResponse_Complete_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessAndBuildResponse_Complete_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Complete != nil {
		{
			size, err := m.Complete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WitnessAndBuildResponse_BuildProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessAndBuildResponse_BuildProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessAndBuildResponse_BuildProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Progress != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Progress))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *WitnessAndBuildResponse_Complete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WitnessAndBuildResponse_Complete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WitnessAndBuildResponse_Complete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeVotingReceiptTokens {
		i--
		if m.IncludeVotingReceiptTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IncludeProposalNfts {
		i--
		if m.IncludeProposalNfts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IncludeLpNfts {
		i--
		if m.IncludeLpNfts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IncludeUnbondingTokens {
		i--
		if m.IncludeUnbondingTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IncludeDelegationTokens {
		i--
		if m.IncludeDelegationTokens {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.IncludeSpecificDenominations) > 0 {
		for iNdEx := len(m.IncludeSpecificDenominations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncludeSpecificDenominations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintView(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Filtered {
		i--
		if m.Filtered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DenomMetadata != nil {
		{
			size, err := m.DenomMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AppParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AppParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GasPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasPrices != nil {
		{
			size, err := m.GasPrices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FMDParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FMDParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FMDParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FMDParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FMDParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FMDParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoteByCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoteByCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteByCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *NoteByCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoteByCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteByCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpendableNote != nil {
		{
			size, err := m.SpendableNote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapByCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapByCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapByCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SwapCommitment != nil {
		{
			size, err := m.SwapCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SwapByCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapByCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapByCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnclaimedSwapsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnclaimedSwapsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnclaimedSwapsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UnclaimedSwapsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnclaimedSwapsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnclaimedSwapsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NullifierStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullifierStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullifierStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwaitDetection {
		i--
		if m.AwaitDetection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *NullifierStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullifierStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullifierStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spent {
		i--
		if m.Spent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfoByHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfoByHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfoByHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.StartHeight != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.View != nil {
		{
			size, err := m.View.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Perspective != nil {
		{
			size, err := m.Perspective.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxInfo != nil {
		{
			size, err := m.TxInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionInfoByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfoByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfoByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxInfo != nil {
		{
			size, err := m.TxInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoteRecord != nil {
		{
			size, err := m.NoteRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotesForVotingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotesForVotingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotesForVotingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NoteRecord != nil {
		{
			size, err := m.NoteRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpendableNoteRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendableNoteRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendableNoteRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReturnAddress != nil {
		{
			size, err := m.ReturnAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Position != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x38
	}
	if m.HeightSpent != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.HeightSpent))
		i--
		dAtA[i] = 0x30
	}
	if m.HeightCreated != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.HeightCreated))
		i--
		dAtA[i] = 0x28
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Note != nil {
		{
			size, err := m.Note.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.HeightClaimed != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.HeightClaimed))
		i--
		dAtA[i] = 0x30
	}
	if m.OutputData != nil {
		{
			size, err := m.OutputData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Position != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SwapCommitment != nil {
		{
			size, err := m.SwapCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnedPositionIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnedPositionIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnedPositionIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingPair != nil {
		{
			size, err := m.TradingPair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PositionState != nil {
		{
			size, err := m.PositionState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnedPositionIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnedPositionIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnedPositionIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != nil {
		{
			size, err := m.PositionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetMetadataByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetMetadataByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetMetadataByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AssetMetadataByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetMetadataByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetMetadataByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DenomMetadata != nil {
		{
			size, err := m.DenomMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationsByAddressIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationsByAddressIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationsByAddressIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != 0 {
		i = encodeVarintView(dAtA, i, uint64(m.Filter))
		i--
		dAtA[i] = 0x10
	}
	if m.AddressIndex != nil {
		{
			size, err := m.AddressIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationsByAddressIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationsByAddressIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationsByAddressIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueView != nil {
		{
			size, err := m.ValueView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintView(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintView(dAtA []byte, offset int, v uint64) int {
	offset -= sovView(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthorizeAndBuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionPlan != nil {
		l = m.TransactionPlan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AuthorizeAndBuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *AuthorizeAndBuildResponse_BuildProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildProgress != nil {
		l = m.BuildProgress.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *AuthorizeAndBuildResponse_Complete_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Complete != nil {
		l = m.Complete.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *AuthorizeAndBuildResponse_BuildProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Progress != 0 {
		n += 5
	}
	return n
}

func (m *AuthorizeAndBuildResponse_Complete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BroadcastTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *BroadcastTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *BroadcastTransactionResponse_BroadcastSuccess_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BroadcastSuccess != nil {
		l = m.BroadcastSuccess.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *BroadcastTransactionResponse_Confirmed_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirmed != nil {
		l = m.Confirmed.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BroadcastTransactionResponse_Confirmed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.DetectionHeight != 0 {
		n += 1 + sovView(uint64(m.DetectionHeight))
	}
	return n
}

func (m *TransactionPlannerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpiryHeight != 0 {
		n += 1 + sovView(uint64(m.ExpiryHeight))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Swaps) > 0 {
		for _, e := range m.Swaps {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.SwapClaims) > 0 {
		for _, e := range m.SwapClaims {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Undelegations) > 0 {
		for _, e := range m.Undelegations {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.UndelegationClaims) > 0 {
		for _, e := range m.UndelegationClaims {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.IbcRelayActions) > 0 {
		for _, e := range m.IbcRelayActions {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.Ics20Withdrawals) > 0 {
		for _, e := range m.Ics20Withdrawals {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.PositionOpens) > 0 {
		for _, e := range m.PositionOpens {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.PositionCloses) > 0 {
		for _, e := range m.PositionCloses {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if len(m.PositionWithdraws) > 0 {
		for _, e := range m.PositionWithdraws {
			l = e.Size()
			n += 2 + l + sovView(uint64(l))
		}
	}
	if m.FeeMode != nil {
		n += m.FeeMode.Size()
	}
	if m.EpochIndex != 0 {
		n += 2 + sovView(uint64(m.EpochIndex))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 2 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_AutoFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoFee != nil {
		l = m.AutoFee.Size()
		n += 2 + l + sovView(uint64(l))
	}
	return n
}
func (m *TransactionPlannerRequest_ManualFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManualFee != nil {
		l = m.ManualFee.Size()
		n += 2 + l + sovView(uint64(l))
	}
	return n
}
func (m *TransactionPlannerRequest_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Swap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.TargetAsset != nil {
		l = m.TargetAsset.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ClaimAddress != nil {
		l = m.ClaimAddress.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_SwapClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapCommitment != nil {
		l = m.SwapCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.RateData != nil {
		l = m.RateData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_Undelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.RateData != nil {
		l = m.RateData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_UndelegateClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorIdentity != nil {
		l = m.ValidatorIdentity.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.StartEpochIndex != 0 {
		n += 1 + sovView(uint64(m.StartEpochIndex))
	}
	if m.Penalty != nil {
		l = m.Penalty.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.UnbondingAmount != nil {
		l = m.UnbondingAmount.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.UnbondingStartHeight != 0 {
		n += 1 + sovView(uint64(m.UnbondingStartHeight))
	}
	return n
}

func (m *TransactionPlannerRequest_PositionOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_PositionClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != nil {
		l = m.PositionId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerRequest_PositionWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != nil {
		l = m.PositionId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Reserves != nil {
		l = m.Reserves.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionPlannerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AddressByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AddressByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WalletIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *WalletIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletId != nil {
		l = m.WalletId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *IndexByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *IndexByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *EphemeralAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *EphemeralAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountFilter != nil {
		l = m.AccountFilter.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AssetIdFilter != nil {
		l = m.AssetIdFilter.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *BalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AccountAddress != nil {
		l = m.AccountAddress.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.BalanceView != nil {
		l = m.BalanceView.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FullSyncHeight != 0 {
		n += 1 + sovView(uint64(m.FullSyncHeight))
	}
	if m.PartialSyncHeight != 0 {
		n += 1 + sovView(uint64(m.PartialSyncHeight))
	}
	if m.CatchingUp {
		n += 2
	}
	return n
}

func (m *StatusStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StatusStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestKnownBlockHeight != 0 {
		n += 1 + sovView(uint64(m.LatestKnownBlockHeight))
	}
	if m.FullSyncHeight != 0 {
		n += 1 + sovView(uint64(m.FullSyncHeight))
	}
	if m.PartialSyncHeight != 0 {
		n += 1 + sovView(uint64(m.PartialSyncHeight))
	}
	return n
}

func (m *NotesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeSpent {
		n += 2
	}
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AmountToSpend != nil {
		l = m.AmountToSpend.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NotesForVotingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotableAtHeight != 0 {
		n += 1 + sovView(uint64(m.VotableAtHeight))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WitnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionPlan != nil {
		l = m.TransactionPlan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WitnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WitnessData != nil {
		l = m.WitnessData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WitnessAndBuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionPlan != nil {
		l = m.TransactionPlan.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AuthorizationData != nil {
		l = m.AuthorizationData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *WitnessAndBuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += m.Status.Size()
	}
	return n
}

func (m *WitnessAndBuildResponse_BuildProgress_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildProgress != nil {
		l = m.BuildProgress.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *WitnessAndBuildResponse_Complete_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Complete != nil {
		l = m.Complete.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}
func (m *WitnessAndBuildResponse_BuildProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Progress != 0 {
		n += 5
	}
	return n
}

func (m *WitnessAndBuildResponse_Complete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filtered {
		n += 2
	}
	if len(m.IncludeSpecificDenominations) > 0 {
		for _, e := range m.IncludeSpecificDenominations {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.IncludeDelegationTokens {
		n += 2
	}
	if m.IncludeUnbondingTokens {
		n += 2
	}
	if m.IncludeLpNfts {
		n += 2
	}
	if m.IncludeProposalNfts {
		n += 2
	}
	if m.IncludeVotingReceiptTokens {
		n += 2
	}
	return n
}

func (m *AssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenomMetadata != nil {
		l = m.DenomMetadata.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AppParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AppParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *GasPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GasPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasPrices != nil {
		l = m.GasPrices.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *FMDParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FMDParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NoteByCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *NoteByCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpendableNote != nil {
		l = m.SpendableNote.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SwapByCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapCommitment != nil {
		l = m.SwapCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *SwapByCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *UnclaimedSwapsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnclaimedSwapsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NullifierStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AwaitDetection {
		n += 2
	}
	return n
}

func (m *NullifierStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spent {
		n += 2
	}
	return n
}

func (m *TransactionInfoByHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartHeight != 0 {
		n += 1 + sovView(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovView(uint64(m.EndHeight))
	}
	return n
}

func (m *TransactionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovView(uint64(m.Height))
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Perspective != nil {
		l = m.Perspective.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.View != nil {
		l = m.View.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxInfo != nil {
		l = m.TxInfo.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *TransactionInfoByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxInfo != nil {
		l = m.TxInfo.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteRecord != nil {
		l = m.NoteRecord.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *NotesForVotingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteRecord != nil {
		l = m.NoteRecord.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SpendableNoteRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Note != nil {
		l = m.Note.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.HeightCreated != 0 {
		n += 1 + sovView(uint64(m.HeightCreated))
	}
	if m.HeightSpent != 0 {
		n += 1 + sovView(uint64(m.HeightSpent))
	}
	if m.Position != 0 {
		n += 1 + sovView(uint64(m.Position))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.ReturnAddress != nil {
		l = m.ReturnAddress.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *SwapRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapCommitment != nil {
		l = m.SwapCommitment.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovView(uint64(m.Position))
	}
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.OutputData != nil {
		l = m.OutputData.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.HeightClaimed != 0 {
		n += 1 + sovView(uint64(m.HeightClaimed))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *OwnedPositionIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionState != nil {
		l = m.PositionState.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.TradingPair != nil {
		l = m.TradingPair.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *OwnedPositionIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != nil {
		l = m.PositionId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AssetMetadataByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *AssetMetadataByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenomMetadata != nil {
		l = m.DenomMetadata.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *DelegationsByAddressIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressIndex != nil {
		l = m.AddressIndex.Size()
		n += 1 + l + sovView(uint64(l))
	}
	if m.Filter != 0 {
		n += 1 + sovView(uint64(m.Filter))
	}
	return n
}

func (m *DelegationsByAddressIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueView != nil {
		l = m.ValueView.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func sovView(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozView(x uint64) (n int) {
	return sovView(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthorizeAndBuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeAndBuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeAndBuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPlan == nil {
				m.TransactionPlan = &v1.TransactionPlan{}
			}
			if err := m.TransactionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAndBuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeAndBuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeAndBuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthorizeAndBuildResponse_BuildProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &AuthorizeAndBuildResponse_BuildProgress_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthorizeAndBuildResponse_Complete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &AuthorizeAndBuildResponse_Complete_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAndBuildResponse_BuildProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Progress = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAndBuildResponse_Complete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Complete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Complete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastSuccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BroadcastTransactionResponse_BroadcastSuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &BroadcastTransactionResponse_BroadcastSuccess_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BroadcastTransactionResponse_Confirmed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &BroadcastTransactionResponse_Confirmed_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTransactionResponse_BroadcastSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v11.TransactionId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastTransactionResponse_Confirmed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Confirmed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Confirmed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v11.TransactionId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionHeight", wireType)
			}
			m.DetectionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DetectionHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPlannerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPlannerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryHeight", wireType)
			}
			m.ExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &v1.MemoPlaintext{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &v12.AddressIndex{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &TransactionPlannerRequest_Output{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swaps = append(m.Swaps, &TransactionPlannerRequest_Swap{})
			if err := m.Swaps[len(m.Swaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapClaims = append(m.SwapClaims, &TransactionPlannerRequest_SwapClaim{})
			if err := m.SwapClaims[len(m.SwapClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &TransactionPlannerRequest_Delegate{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Undelegations = append(m.Undelegations, &TransactionPlannerRequest_Undelegate{})
			if err := m.Undelegations[len(m.Undelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegationClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegationClaims = append(m.UndelegationClaims, &TransactionPlannerRequest_UndelegateClaim{})
			if err := m.UndelegationClaims[len(m.UndelegationClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcRelayActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcRelayActions = append(m.IbcRelayActions, &v13.IbcRelay{})
			if err := m.IbcRelayActions[len(m.IbcRelayActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ics20Withdrawals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ics20Withdrawals = append(m.Ics20Withdrawals, &v13.Ics20Withdrawal{})
			if err := m.Ics20Withdrawals[len(m.Ics20Withdrawals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionOpens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionOpens = append(m.PositionOpens, &TransactionPlannerRequest_PositionOpen{})
			if err := m.PositionOpens[len(m.PositionOpens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionCloses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionCloses = append(m.PositionCloses, &TransactionPlannerRequest_PositionClose{})
			if err := m.PositionCloses[len(m.PositionCloses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionWithdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionWithdraws = append(m.PositionWithdraws, &TransactionPlannerRequest_PositionWithdraw{})
			if err := m.PositionWithdraws[len(m.PositionWithdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v14.FeeTier{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FeeMode = &TransactionPlannerRequest_AutoFee{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManualFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v14.Fee{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FeeMode = &TransactionPlannerRequest_ManualFee{v}
			iNdEx = postIndex
		case 200:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &v15.Epoch{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v16.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v12.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Swap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Swap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Swap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v16.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetAsset == nil {
				m.TargetAsset = &v16.AssetId{}
			}
			if err := m.TargetAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &v14.Fee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimAddress == nil {
				m.ClaimAddress = &v12.Address{}
			}
			if err := m.ClaimAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_SwapClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapCommitment == nil {
				m.SwapCommitment = &v17.StateCommitment{}
			}
			if err := m.SwapCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Delegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &v18.Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateData == nil {
				m.RateData = &v19.RateData{}
			}
			if err := m.RateData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_Undelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Undelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Undelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v16.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateData == nil {
				m.RateData = &v19.RateData{}
			}
			if err := m.RateData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_UndelegateClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegateClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegateClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIdentity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorIdentity == nil {
				m.ValidatorIdentity = &v12.IdentityKey{}
			}
			if err := m.ValidatorIdentity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEpochIndex", wireType)
			}
			m.StartEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Penalty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Penalty == nil {
				m.Penalty = &v19.Penalty{}
			}
			if err := m.Penalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnbondingAmount == nil {
				m.UnbondingAmount = &v18.Amount{}
			}
			if err := m.UnbondingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingStartHeight", wireType)
			}
			m.UnbondingStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingStartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_PositionOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &v110.Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_PositionClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionId == nil {
				m.PositionId = &v110.PositionId{}
			}
			if err := m.PositionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerRequest_PositionWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionId == nil {
				m.PositionId = &v110.PositionId{}
			}
			if err := m.PositionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reserves == nil {
				m.Reserves = &v110.Reserves{}
			}
			if err := m.Reserves.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v110.TradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionPlannerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionPlannerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionPlannerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &v1.TransactionPlan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v12.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v12.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletId == nil {
				m.WalletId = &v12.WalletId{}
			}
			if err := m.WalletId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v12.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v12.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v12.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EphemeralAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EphemeralAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EphemeralAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v12.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountFilter == nil {
				m.AccountFilter = &v12.AddressIndex{}
			}
			if err := m.AccountFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIdFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetIdFilter == nil {
				m.AssetIdFilter = &v16.AssetId{}
			}
			if err := m.AssetIdFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &v12.AddressIndex{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &v16.Value{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountAddress == nil {
				m.AccountAddress = &v12.AddressView{}
			}
			if err := m.AccountAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BalanceView == nil {
				m.BalanceView = &v16.ValueView{}
			}
			if err := m.BalanceView.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullSyncHeight", wireType)
			}
			m.FullSyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullSyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialSyncHeight", wireType)
			}
			m.PartialSyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartialSyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatchingUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CatchingUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestKnownBlockHeight", wireType)
			}
			m.LatestKnownBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestKnownBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullSyncHeight", wireType)
			}
			m.FullSyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullSyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialSyncHeight", wireType)
			}
			m.PartialSyncHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartialSyncHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSpent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeSpent = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &v16.AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v12.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountToSpend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AmountToSpend == nil {
				m.AmountToSpend = &v18.Amount{}
			}
			if err := m.AmountToSpend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesForVotingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesForVotingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesForVotingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotableAtHeight", wireType)
			}
			m.VotableAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotableAtHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v12.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPlan == nil {
				m.TransactionPlan = &v1.TransactionPlan{}
			}
			if err := m.TransactionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessData == nil {
				m.WitnessData = &v1.WitnessData{}
			}
			if err := m.WitnessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessAndBuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessAndBuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessAndBuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPlan == nil {
				m.TransactionPlan = &v1.TransactionPlan{}
			}
			if err := m.TransactionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationData == nil {
				m.AuthorizationData = &v1.AuthorizationData{}
			}
			if err := m.AuthorizationData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessAndBuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WitnessAndBuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WitnessAndBuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WitnessAndBuildResponse_BuildProgress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &WitnessAndBuildResponse_BuildProgress_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WitnessAndBuildResponse_Complete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Status = &WitnessAndBuildResponse_Complete_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessAndBuildResponse_BuildProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Progress = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WitnessAndBuildResponse_Complete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Complete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Complete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filtered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Filtered = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeSpecificDenominations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeSpecificDenominations = append(m.IncludeSpecificDenominations, &v16.Denom{})
			if err := m.IncludeSpecificDenominations[len(m.IncludeSpecificDenominations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeDelegationTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeDelegationTokens = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeUnbondingTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeUnbondingTokens = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeLpNfts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeLpNfts = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeProposalNfts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeProposalNfts = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeVotingReceiptTokens", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeVotingReceiptTokens = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomMetadata == nil {
				m.DenomMetadata = &v16.Metadata{}
			}
			if err := m.DenomMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &v111.AppParameters{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPrices == nil {
				m.GasPrices = &v14.GasPrices{}
			}
			if err := m.GasPrices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMDParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMDParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMDParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FMDParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FMDParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FMDParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &v112.FmdParameters{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoteByCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoteByCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoteByCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &v17.StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoteByCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoteByCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoteByCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendableNote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpendableNote == nil {
				m.SpendableNote = &SpendableNoteRecord{}
			}
			if err := m.SpendableNote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapByCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapByCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapByCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapCommitment == nil {
				m.SwapCommitment = &v17.StateCommitment{}
			}
			if err := m.SwapCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapByCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapByCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapByCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &SwapRecord{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnclaimedSwapsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnclaimedSwapsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnclaimedSwapsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnclaimedSwapsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnclaimedSwapsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnclaimedSwapsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &SwapRecord{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullifierStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullifierStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullifierStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v15.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwaitDetection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwaitDetection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullifierStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullifierStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullifierStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfoByHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfoByHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfoByHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v11.TransactionId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &v11.TransactionId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &v1.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perspective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Perspective == nil {
				m.Perspective = &v1.TransactionPerspective{}
			}
			if err := m.Perspective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.View == nil {
				m.View = &v1.TransactionView{}
			}
			if err := m.View.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxInfo == nil {
				m.TxInfo = &TransactionInfo{}
			}
			if err := m.TxInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInfoByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfoByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfoByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxInfo == nil {
				m.TxInfo = &TransactionInfo{}
			}
			if err := m.TxInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteRecord == nil {
				m.NoteRecord = &SpendableNoteRecord{}
			}
			if err := m.NoteRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotesForVotingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotesForVotingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotesForVotingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteRecord == nil {
				m.NoteRecord = &SpendableNoteRecord{}
			}
			if err := m.NoteRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendableNoteRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendableNoteRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendableNoteRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &v17.StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Note == nil {
				m.Note = &v112.Note{}
			}
			if err := m.Note.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v12.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v15.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightCreated", wireType)
			}
			m.HeightCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightCreated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightSpent", wireType)
			}
			m.HeightSpent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightSpent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &v15.CommitmentSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReturnAddress == nil {
				m.ReturnAddress = &v12.AddressView{}
			}
			if err := m.ReturnAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapCommitment == nil {
				m.SwapCommitment = &v17.StateCommitment{}
			}
			if err := m.SwapCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &v110.SwapPlaintext{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v15.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputData == nil {
				m.OutputData = &v110.BatchSwapOutputData{}
			}
			if err := m.OutputData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightClaimed", wireType)
			}
			m.HeightClaimed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightClaimed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &v15.CommitmentSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnedPositionIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnedPositionIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnedPositionIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionState == nil {
				m.PositionState = &v110.PositionState{}
			}
			if err := m.PositionState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingPair == nil {
				m.TradingPair = &v110.TradingPair{}
			}
			if err := m.TradingPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnedPositionIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnedPositionIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnedPositionIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionId == nil {
				m.PositionId = &v110.PositionId{}
			}
			if err := m.PositionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetMetadataByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetMetadataByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetMetadataByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &v16.AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetMetadataByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetMetadataByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetMetadataByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomMetadata == nil {
				m.DenomMetadata = &v16.Metadata{}
			}
			if err := m.DenomMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationsByAddressIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationsByAddressIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationsByAddressIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressIndex == nil {
				m.AddressIndex = &v12.AddressIndex{}
			}
			if err := m.AddressIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			m.Filter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filter |= DelegationsByAddressIndexRequest_Filter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationsByAddressIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationsByAddressIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationsByAddressIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthView
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueView == nil {
				m.ValueView = &v16.ValueView{}
			}
			if err := m.ValueView.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipView(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowView
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthView
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupView
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthView
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthView        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowView          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupView = fmt.Errorf("proto: unexpected end of group")
)

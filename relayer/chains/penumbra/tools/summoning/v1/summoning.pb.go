// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/tools/summoning/v1/summoning.proto

package summoningv1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	v1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/keys/v1"
	v11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/num/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ParticipateRequest struct {
	// Types that are valid to be assigned to Msg:
	//	*ParticipateRequest_Identify_
	//	*ParticipateRequest_Contribution_
	Msg isParticipateRequest_Msg `protobuf_oneof:"msg"`
}

func (m *ParticipateRequest) Reset()         { *m = ParticipateRequest{} }
func (m *ParticipateRequest) String() string { return proto.CompactTextString(m) }
func (*ParticipateRequest) ProtoMessage()    {}
func (*ParticipateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{0}
}
func (m *ParticipateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateRequest.Merge(m, src)
}
func (m *ParticipateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateRequest proto.InternalMessageInfo

type isParticipateRequest_Msg interface {
	isParticipateRequest_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ParticipateRequest_Identify_ struct {
	Identify *ParticipateRequest_Identify `protobuf:"bytes,1,opt,name=identify,proto3,oneof" json:"identify,omitempty"`
}
type ParticipateRequest_Contribution_ struct {
	Contribution *ParticipateRequest_Contribution `protobuf:"bytes,2,opt,name=contribution,proto3,oneof" json:"contribution,omitempty"`
}

func (*ParticipateRequest_Identify_) isParticipateRequest_Msg()     {}
func (*ParticipateRequest_Contribution_) isParticipateRequest_Msg() {}

func (m *ParticipateRequest) GetMsg() isParticipateRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ParticipateRequest) GetIdentify() *ParticipateRequest_Identify {
	if x, ok := m.GetMsg().(*ParticipateRequest_Identify_); ok {
		return x.Identify
	}
	return nil
}

func (m *ParticipateRequest) GetContribution() *ParticipateRequest_Contribution {
	if x, ok := m.GetMsg().(*ParticipateRequest_Contribution_); ok {
		return x.Contribution
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ParticipateRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ParticipateRequest_Identify_)(nil),
		(*ParticipateRequest_Contribution_)(nil),
	}
}

// Sent at the beginning of the connection to identify the participant.
type ParticipateRequest_Identify struct {
	Address *v1.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ParticipateRequest_Identify) Reset()         { *m = ParticipateRequest_Identify{} }
func (m *ParticipateRequest_Identify) String() string { return proto.CompactTextString(m) }
func (*ParticipateRequest_Identify) ProtoMessage()    {}
func (*ParticipateRequest_Identify) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{0, 0}
}
func (m *ParticipateRequest_Identify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateRequest_Identify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateRequest_Identify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateRequest_Identify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateRequest_Identify.Merge(m, src)
}
func (m *ParticipateRequest_Identify) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateRequest_Identify) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateRequest_Identify.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateRequest_Identify proto.InternalMessageInfo

func (m *ParticipateRequest_Identify) GetAddress() *v1.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// Sent by the participant after getting a `ContributeNow` message.
type ParticipateRequest_Contribution struct {
	Updated      *CeremonyCrs          `protobuf:"bytes,1,opt,name=updated,proto3" json:"updated,omitempty"`
	UpdateProofs *CeremonyLinkingProof `protobuf:"bytes,2,opt,name=update_proofs,json=updateProofs,proto3" json:"update_proofs,omitempty"`
	ParentHashes *CeremonyParentHashes `protobuf:"bytes,3,opt,name=parent_hashes,json=parentHashes,proto3" json:"parent_hashes,omitempty"`
}

func (m *ParticipateRequest_Contribution) Reset()         { *m = ParticipateRequest_Contribution{} }
func (m *ParticipateRequest_Contribution) String() string { return proto.CompactTextString(m) }
func (*ParticipateRequest_Contribution) ProtoMessage()    {}
func (*ParticipateRequest_Contribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{0, 1}
}
func (m *ParticipateRequest_Contribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateRequest_Contribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateRequest_Contribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateRequest_Contribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateRequest_Contribution.Merge(m, src)
}
func (m *ParticipateRequest_Contribution) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateRequest_Contribution) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateRequest_Contribution.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateRequest_Contribution proto.InternalMessageInfo

func (m *ParticipateRequest_Contribution) GetUpdated() *CeremonyCrs {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *ParticipateRequest_Contribution) GetUpdateProofs() *CeremonyLinkingProof {
	if m != nil {
		return m.UpdateProofs
	}
	return nil
}

func (m *ParticipateRequest_Contribution) GetParentHashes() *CeremonyParentHashes {
	if m != nil {
		return m.ParentHashes
	}
	return nil
}

type CeremonyCrs struct {
	Spend                 []byte `protobuf:"bytes,100,opt,name=spend,proto3" json:"spend,omitempty"`
	Output                []byte `protobuf:"bytes,101,opt,name=output,proto3" json:"output,omitempty"`
	DelegatorVote         []byte `protobuf:"bytes,102,opt,name=delegator_vote,json=delegatorVote,proto3" json:"delegator_vote,omitempty"`
	UndelegateClaim       []byte `protobuf:"bytes,103,opt,name=undelegate_claim,json=undelegateClaim,proto3" json:"undelegate_claim,omitempty"`
	Swap                  []byte `protobuf:"bytes,104,opt,name=swap,proto3" json:"swap,omitempty"`
	SwapClaim             []byte `protobuf:"bytes,105,opt,name=swap_claim,json=swapClaim,proto3" json:"swap_claim,omitempty"`
	NulliferDerivationCrs []byte `protobuf:"bytes,106,opt,name=nullifer_derivation_crs,json=nulliferDerivationCrs,proto3" json:"nullifer_derivation_crs,omitempty"`
}

func (m *CeremonyCrs) Reset()         { *m = CeremonyCrs{} }
func (m *CeremonyCrs) String() string { return proto.CompactTextString(m) }
func (*CeremonyCrs) ProtoMessage()    {}
func (*CeremonyCrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{1}
}
func (m *CeremonyCrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CeremonyCrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CeremonyCrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CeremonyCrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CeremonyCrs.Merge(m, src)
}
func (m *CeremonyCrs) XXX_Size() int {
	return m.Size()
}
func (m *CeremonyCrs) XXX_DiscardUnknown() {
	xxx_messageInfo_CeremonyCrs.DiscardUnknown(m)
}

var xxx_messageInfo_CeremonyCrs proto.InternalMessageInfo

func (m *CeremonyCrs) GetSpend() []byte {
	if m != nil {
		return m.Spend
	}
	return nil
}

func (m *CeremonyCrs) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *CeremonyCrs) GetDelegatorVote() []byte {
	if m != nil {
		return m.DelegatorVote
	}
	return nil
}

func (m *CeremonyCrs) GetUndelegateClaim() []byte {
	if m != nil {
		return m.UndelegateClaim
	}
	return nil
}

func (m *CeremonyCrs) GetSwap() []byte {
	if m != nil {
		return m.Swap
	}
	return nil
}

func (m *CeremonyCrs) GetSwapClaim() []byte {
	if m != nil {
		return m.SwapClaim
	}
	return nil
}

func (m *CeremonyCrs) GetNulliferDerivationCrs() []byte {
	if m != nil {
		return m.NulliferDerivationCrs
	}
	return nil
}

type CeremonyLinkingProof struct {
	Spend                 []byte `protobuf:"bytes,100,opt,name=spend,proto3" json:"spend,omitempty"`
	Output                []byte `protobuf:"bytes,101,opt,name=output,proto3" json:"output,omitempty"`
	DelegatorVote         []byte `protobuf:"bytes,102,opt,name=delegator_vote,json=delegatorVote,proto3" json:"delegator_vote,omitempty"`
	UndelegateClaim       []byte `protobuf:"bytes,103,opt,name=undelegate_claim,json=undelegateClaim,proto3" json:"undelegate_claim,omitempty"`
	Swap                  []byte `protobuf:"bytes,104,opt,name=swap,proto3" json:"swap,omitempty"`
	SwapClaim             []byte `protobuf:"bytes,105,opt,name=swap_claim,json=swapClaim,proto3" json:"swap_claim,omitempty"`
	NulliferDerivationCrs []byte `protobuf:"bytes,106,opt,name=nullifer_derivation_crs,json=nulliferDerivationCrs,proto3" json:"nullifer_derivation_crs,omitempty"`
}

func (m *CeremonyLinkingProof) Reset()         { *m = CeremonyLinkingProof{} }
func (m *CeremonyLinkingProof) String() string { return proto.CompactTextString(m) }
func (*CeremonyLinkingProof) ProtoMessage()    {}
func (*CeremonyLinkingProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{2}
}
func (m *CeremonyLinkingProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CeremonyLinkingProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CeremonyLinkingProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CeremonyLinkingProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CeremonyLinkingProof.Merge(m, src)
}
func (m *CeremonyLinkingProof) XXX_Size() int {
	return m.Size()
}
func (m *CeremonyLinkingProof) XXX_DiscardUnknown() {
	xxx_messageInfo_CeremonyLinkingProof.DiscardUnknown(m)
}

var xxx_messageInfo_CeremonyLinkingProof proto.InternalMessageInfo

func (m *CeremonyLinkingProof) GetSpend() []byte {
	if m != nil {
		return m.Spend
	}
	return nil
}

func (m *CeremonyLinkingProof) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *CeremonyLinkingProof) GetDelegatorVote() []byte {
	if m != nil {
		return m.DelegatorVote
	}
	return nil
}

func (m *CeremonyLinkingProof) GetUndelegateClaim() []byte {
	if m != nil {
		return m.UndelegateClaim
	}
	return nil
}

func (m *CeremonyLinkingProof) GetSwap() []byte {
	if m != nil {
		return m.Swap
	}
	return nil
}

func (m *CeremonyLinkingProof) GetSwapClaim() []byte {
	if m != nil {
		return m.SwapClaim
	}
	return nil
}

func (m *CeremonyLinkingProof) GetNulliferDerivationCrs() []byte {
	if m != nil {
		return m.NulliferDerivationCrs
	}
	return nil
}

type CeremonyParentHashes struct {
	Spend                 []byte `protobuf:"bytes,100,opt,name=spend,proto3" json:"spend,omitempty"`
	Output                []byte `protobuf:"bytes,101,opt,name=output,proto3" json:"output,omitempty"`
	DelegatorVote         []byte `protobuf:"bytes,102,opt,name=delegator_vote,json=delegatorVote,proto3" json:"delegator_vote,omitempty"`
	UndelegateClaim       []byte `protobuf:"bytes,103,opt,name=undelegate_claim,json=undelegateClaim,proto3" json:"undelegate_claim,omitempty"`
	Swap                  []byte `protobuf:"bytes,104,opt,name=swap,proto3" json:"swap,omitempty"`
	SwapClaim             []byte `protobuf:"bytes,105,opt,name=swap_claim,json=swapClaim,proto3" json:"swap_claim,omitempty"`
	NulliferDerivationCrs []byte `protobuf:"bytes,106,opt,name=nullifer_derivation_crs,json=nulliferDerivationCrs,proto3" json:"nullifer_derivation_crs,omitempty"`
}

func (m *CeremonyParentHashes) Reset()         { *m = CeremonyParentHashes{} }
func (m *CeremonyParentHashes) String() string { return proto.CompactTextString(m) }
func (*CeremonyParentHashes) ProtoMessage()    {}
func (*CeremonyParentHashes) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{3}
}
func (m *CeremonyParentHashes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CeremonyParentHashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CeremonyParentHashes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CeremonyParentHashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CeremonyParentHashes.Merge(m, src)
}
func (m *CeremonyParentHashes) XXX_Size() int {
	return m.Size()
}
func (m *CeremonyParentHashes) XXX_DiscardUnknown() {
	xxx_messageInfo_CeremonyParentHashes.DiscardUnknown(m)
}

var xxx_messageInfo_CeremonyParentHashes proto.InternalMessageInfo

func (m *CeremonyParentHashes) GetSpend() []byte {
	if m != nil {
		return m.Spend
	}
	return nil
}

func (m *CeremonyParentHashes) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *CeremonyParentHashes) GetDelegatorVote() []byte {
	if m != nil {
		return m.DelegatorVote
	}
	return nil
}

func (m *CeremonyParentHashes) GetUndelegateClaim() []byte {
	if m != nil {
		return m.UndelegateClaim
	}
	return nil
}

func (m *CeremonyParentHashes) GetSwap() []byte {
	if m != nil {
		return m.Swap
	}
	return nil
}

func (m *CeremonyParentHashes) GetSwapClaim() []byte {
	if m != nil {
		return m.SwapClaim
	}
	return nil
}

func (m *CeremonyParentHashes) GetNulliferDerivationCrs() []byte {
	if m != nil {
		return m.NulliferDerivationCrs
	}
	return nil
}

type ParticipateResponse struct {
	// Types that are valid to be assigned to Msg:
	//
	//	*ParticipateResponse_Position_
	//	*ParticipateResponse_ContributeNow_
	//	*ParticipateResponse_Confirm_
	Msg isParticipateResponse_Msg `protobuf_oneof:"msg"`
}

func (m *ParticipateResponse) Reset()         { *m = ParticipateResponse{} }
func (m *ParticipateResponse) String() string { return proto.CompactTextString(m) }
func (*ParticipateResponse) ProtoMessage()    {}
func (*ParticipateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{4}
}
func (m *ParticipateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateResponse.Merge(m, src)
}
func (m *ParticipateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateResponse proto.InternalMessageInfo

type isParticipateResponse_Msg interface {
	isParticipateResponse_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ParticipateResponse_Position_ struct {
	Position *ParticipateResponse_Position `protobuf:"bytes,1,opt,name=position,proto3,oneof" json:"position,omitempty"`
}
type ParticipateResponse_ContributeNow_ struct {
	ContributeNow *ParticipateResponse_ContributeNow `protobuf:"bytes,2,opt,name=contribute_now,json=contributeNow,proto3,oneof" json:"contribute_now,omitempty"`
}
type ParticipateResponse_Confirm_ struct {
	Confirm *ParticipateResponse_Confirm `protobuf:"bytes,3,opt,name=confirm,proto3,oneof" json:"confirm,omitempty"`
}

func (*ParticipateResponse_Position_) isParticipateResponse_Msg()      {}
func (*ParticipateResponse_ContributeNow_) isParticipateResponse_Msg() {}
func (*ParticipateResponse_Confirm_) isParticipateResponse_Msg()       {}

func (m *ParticipateResponse) GetMsg() isParticipateResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ParticipateResponse) GetPosition() *ParticipateResponse_Position {
	if x, ok := m.GetMsg().(*ParticipateResponse_Position_); ok {
		return x.Position
	}
	return nil
}

func (m *ParticipateResponse) GetContributeNow() *ParticipateResponse_ContributeNow {
	if x, ok := m.GetMsg().(*ParticipateResponse_ContributeNow_); ok {
		return x.ContributeNow
	}
	return nil
}

func (m *ParticipateResponse) GetConfirm() *ParticipateResponse_Confirm {
	if x, ok := m.GetMsg().(*ParticipateResponse_Confirm_); ok {
		return x.Confirm
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ParticipateResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ParticipateResponse_Position_)(nil),
		(*ParticipateResponse_ContributeNow_)(nil),
		(*ParticipateResponse_Confirm_)(nil),
	}
}

// Streamed to the participant to inform them of their position in the queue.
type ParticipateResponse_Position struct {
	// The position of the participant in the queue.
	Position uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	// The total number of participants in the queue.
	ConnectedParticipants uint32 `protobuf:"varint,2,opt,name=connected_participants,json=connectedParticipants,proto3" json:"connected_participants,omitempty"`
	// The bid for the most recently executed contribution slot.
	LastSlotBid *v11.Amount `protobuf:"bytes,3,opt,name=last_slot_bid,json=lastSlotBid,proto3" json:"last_slot_bid,omitempty"`
	// The participant's current bid.
	YourBid *v11.Amount `protobuf:"bytes,4,opt,name=your_bid,json=yourBid,proto3" json:"your_bid,omitempty"`
}

func (m *ParticipateResponse_Position) Reset()         { *m = ParticipateResponse_Position{} }
func (m *ParticipateResponse_Position) String() string { return proto.CompactTextString(m) }
func (*ParticipateResponse_Position) ProtoMessage()    {}
func (*ParticipateResponse_Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{4, 0}
}
func (m *ParticipateResponse_Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateResponse_Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateResponse_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateResponse_Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateResponse_Position.Merge(m, src)
}
func (m *ParticipateResponse_Position) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateResponse_Position) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateResponse_Position.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateResponse_Position proto.InternalMessageInfo

func (m *ParticipateResponse_Position) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *ParticipateResponse_Position) GetConnectedParticipants() uint32 {
	if m != nil {
		return m.ConnectedParticipants
	}
	return 0
}

func (m *ParticipateResponse_Position) GetLastSlotBid() *v11.Amount {
	if m != nil {
		return m.LastSlotBid
	}
	return nil
}

func (m *ParticipateResponse_Position) GetYourBid() *v11.Amount {
	if m != nil {
		return m.YourBid
	}
	return nil
}

// Sent to the participant to inform them that they should contribute now.
type ParticipateResponse_ContributeNow struct {
	// The most recent CRS, which the participant should update.
	Parent *CeremonyCrs `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *ParticipateResponse_ContributeNow) Reset()         { *m = ParticipateResponse_ContributeNow{} }
func (m *ParticipateResponse_ContributeNow) String() string { return proto.CompactTextString(m) }
func (*ParticipateResponse_ContributeNow) ProtoMessage()    {}
func (*ParticipateResponse_ContributeNow) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{4, 1}
}
func (m *ParticipateResponse_ContributeNow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateResponse_ContributeNow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateResponse_ContributeNow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateResponse_ContributeNow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateResponse_ContributeNow.Merge(m, src)
}
func (m *ParticipateResponse_ContributeNow) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateResponse_ContributeNow) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateResponse_ContributeNow.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateResponse_ContributeNow proto.InternalMessageInfo

func (m *ParticipateResponse_ContributeNow) GetParent() *CeremonyCrs {
	if m != nil {
		return m.Parent
	}
	return nil
}

// Sent to the participant to confim their contribution was accepted.
type ParticipateResponse_Confirm struct {
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (m *ParticipateResponse_Confirm) Reset()         { *m = ParticipateResponse_Confirm{} }
func (m *ParticipateResponse_Confirm) String() string { return proto.CompactTextString(m) }
func (*ParticipateResponse_Confirm) ProtoMessage()    {}
func (*ParticipateResponse_Confirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a21e7f4539269f, []int{4, 2}
}
func (m *ParticipateResponse_Confirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipateResponse_Confirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipateResponse_Confirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipateResponse_Confirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipateResponse_Confirm.Merge(m, src)
}
func (m *ParticipateResponse_Confirm) XXX_Size() int {
	return m.Size()
}
func (m *ParticipateResponse_Confirm) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipateResponse_Confirm.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipateResponse_Confirm proto.InternalMessageInfo

func (m *ParticipateResponse_Confirm) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func init() {
	proto.RegisterType((*ParticipateRequest)(nil), "penumbra.tools.summoning.v1.ParticipateRequest")
	proto.RegisterType((*ParticipateRequest_Identify)(nil), "penumbra.tools.summoning.v1.ParticipateRequest.Identify")
	proto.RegisterType((*ParticipateRequest_Contribution)(nil), "penumbra.tools.summoning.v1.ParticipateRequest.Contribution")
	proto.RegisterType((*CeremonyCrs)(nil), "penumbra.tools.summoning.v1.CeremonyCrs")
	proto.RegisterType((*CeremonyLinkingProof)(nil), "penumbra.tools.summoning.v1.CeremonyLinkingProof")
	proto.RegisterType((*CeremonyParentHashes)(nil), "penumbra.tools.summoning.v1.CeremonyParentHashes")
	proto.RegisterType((*ParticipateResponse)(nil), "penumbra.tools.summoning.v1.ParticipateResponse")
	proto.RegisterType((*ParticipateResponse_Position)(nil), "penumbra.tools.summoning.v1.ParticipateResponse.Position")
	proto.RegisterType((*ParticipateResponse_ContributeNow)(nil), "penumbra.tools.summoning.v1.ParticipateResponse.ContributeNow")
	proto.RegisterType((*ParticipateResponse_Confirm)(nil), "penumbra.tools.summoning.v1.ParticipateResponse.Confirm")
}

func init() {
	proto.RegisterFile("penumbra/tools/summoning/v1/summoning.proto", fileDescriptor_71a21e7f4539269f)
}

var fileDescriptor_71a21e7f4539269f = []byte{
	// 888 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0x4f, 0x8f, 0xe3, 0xb4,
	0x1b, 0x6e, 0x3a, 0x7f, 0xda, 0x9f, 0xa7, 0x9d, 0x1f, 0x32, 0xbb, 0x4b, 0x94, 0x65, 0xc3, 0x68,
	0x24, 0xc4, 0x20, 0xa4, 0x64, 0x3b, 0x08, 0x18, 0x0a, 0x42, 0x4b, 0xbb, 0x12, 0x45, 0x02, 0x14,
	0xd2, 0x51, 0x91, 0xd0, 0x48, 0x91, 0x9b, 0xb8, 0xad, 0xd9, 0xc4, 0x0e, 0xb6, 0xd3, 0x51, 0x8f,
	0xf0, 0x09, 0x10, 0x1f, 0x61, 0x8f, 0x48, 0x7c, 0x0f, 0xc4, 0x69, 0x8f, 0x7b, 0x44, 0x33, 0x37,
	0x3e, 0x01, 0x47, 0x64, 0xe7, 0x4f, 0x33, 0x0b, 0xaa, 0xa6, 0x5c, 0xf7, 0x54, 0xbf, 0xef, 0xf3,
	0x3e, 0x8f, 0xed, 0xd7, 0xe9, 0x63, 0x83, 0x77, 0x52, 0x4c, 0xb3, 0x64, 0xca, 0x91, 0x2b, 0x19,
	0x8b, 0x85, 0x2b, 0xb2, 0x24, 0x61, 0x94, 0xd0, 0xb9, 0xbb, 0xec, 0xad, 0x03, 0x27, 0xe5, 0x4c,
	0x32, 0x78, 0xbf, 0x2c, 0x76, 0x74, 0xb1, 0xb3, 0xc6, 0x97, 0x3d, 0xeb, 0xa8, 0x52, 0x0a, 0x19,
	0xc7, 0xee, 0x13, 0xbc, 0x12, 0x4a, 0x43, 0xfd, 0xe6, 0x74, 0xcb, 0xbe, 0x59, 0x41, 0xb3, 0x44,
	0x15, 0xd0, 0x2c, 0xc9, 0xf1, 0xe3, 0xa7, 0xbb, 0x00, 0x7a, 0x88, 0x4b, 0x12, 0x92, 0x14, 0x49,
	0xec, 0xe3, 0xef, 0x33, 0x2c, 0x24, 0x9c, 0x80, 0x36, 0x89, 0x30, 0x95, 0x64, 0xb6, 0x32, 0x8d,
	0x23, 0xe3, 0xe4, 0xe0, 0xf4, 0xcc, 0xd9, 0xb0, 0x10, 0xe7, 0x9f, 0x12, 0xce, 0xe7, 0x05, 0x7f,
	0xd4, 0xf0, 0x2b, 0x2d, 0x38, 0x05, 0x9d, 0x90, 0x51, 0xc9, 0xc9, 0x34, 0x93, 0x84, 0x51, 0xb3,
	0xa9, 0xb5, 0x3f, 0xde, 0x56, 0x7b, 0x58, 0xd3, 0x18, 0x35, 0xfc, 0x1b, 0x9a, 0xd6, 0x63, 0xd0,
	0x2e, 0xe7, 0x86, 0x67, 0xa0, 0x85, 0xa2, 0x88, 0x63, 0x21, 0x8a, 0x6d, 0xd8, 0xeb, 0xa9, 0x54,
	0x43, 0x1c, 0xdd, 0xaa, 0x65, 0xcf, 0xf9, 0x34, 0xaf, 0xf2, 0xcb, 0x72, 0xeb, 0xc7, 0x26, 0xe8,
	0xd4, 0xa7, 0x81, 0x03, 0xd0, 0xca, 0xd2, 0x08, 0x49, 0x1c, 0x15, 0x52, 0x27, 0x1b, 0x57, 0x3d,
	0xc4, 0x1c, 0x27, 0x8c, 0xae, 0x86, 0x5c, 0xf8, 0x25, 0x11, 0x4e, 0x40, 0x37, 0x1f, 0x06, 0x29,
	0x67, 0x6c, 0x26, 0x8a, 0xfd, 0xf7, 0x6e, 0xa5, 0xf4, 0x05, 0xa1, 0x4f, 0x08, 0x9d, 0x7b, 0x8a,
	0xe9, 0x77, 0x72, 0x1d, 0x1d, 0x08, 0xa5, 0x9b, 0x22, 0x8e, 0xa9, 0x0c, 0x16, 0x48, 0x2c, 0xb0,
	0x30, 0x77, 0xb6, 0xd0, 0xf5, 0x34, 0x73, 0xa4, 0x89, 0x7e, 0x27, 0xad, 0x45, 0x83, 0x3d, 0xb0,
	0x93, 0x88, 0xf9, 0xf1, 0x5f, 0x06, 0x38, 0xa8, 0xed, 0x07, 0xde, 0x01, 0x7b, 0x22, 0xc5, 0x34,
	0x32, 0xa3, 0x23, 0xe3, 0xa4, 0xe3, 0xe7, 0x01, 0xbc, 0x07, 0xf6, 0x59, 0x26, 0xd3, 0x4c, 0x9a,
	0x58, 0xa7, 0x8b, 0x08, 0xbe, 0x09, 0x0e, 0x23, 0x1c, 0xe3, 0x39, 0x92, 0x8c, 0x07, 0x4b, 0x26,
	0xb1, 0x39, 0xd3, 0x78, 0xb7, 0xca, 0x4e, 0x98, 0xc4, 0xf0, 0x6d, 0xf0, 0x4a, 0x46, 0x8b, 0x14,
	0x0e, 0xc2, 0x18, 0x91, 0xc4, 0x9c, 0xeb, 0xc2, 0xff, 0xaf, 0xf3, 0x43, 0x95, 0x86, 0x10, 0xec,
	0x8a, 0x4b, 0x94, 0x9a, 0x0b, 0x0d, 0xeb, 0x31, 0x7c, 0x00, 0x80, 0xfa, 0x2d, 0x88, 0x44, 0x23,
	0xff, 0x53, 0x99, 0x9c, 0xf2, 0x3e, 0x78, 0x8d, 0x66, 0x71, 0x4c, 0x66, 0x98, 0x07, 0x11, 0xe6,
	0x64, 0x89, 0xd4, 0xa1, 0x06, 0x21, 0x17, 0xe6, 0x77, 0xba, 0xf6, 0x6e, 0x09, 0x3f, 0xae, 0xd0,
	0x21, 0x17, 0xc7, 0x3f, 0x34, 0xc1, 0x9d, 0x7f, 0x3b, 0x80, 0x97, 0xb5, 0x07, 0xf5, 0x8f, 0xe5,
	0xa5, 0xea, 0xc1, 0x1e, 0x78, 0xf5, 0x86, 0x11, 0x89, 0x94, 0x51, 0x81, 0xe1, 0x37, 0xa0, 0x9d,
	0x32, 0x41, 0xb4, 0x99, 0xe5, 0xb6, 0xf0, 0xe1, 0xed, 0xcd, 0x2c, 0xd7, 0x70, 0xbc, 0x42, 0x40,
	0x39, 0x65, 0x29, 0x06, 0xe7, 0xe0, 0xb0, 0x72, 0x35, 0x1c, 0x50, 0x76, 0x59, 0x78, 0xc5, 0x27,
	0x5b, 0xcb, 0x57, 0x2e, 0x86, 0xbf, 0x62, 0x97, 0xa3, 0x86, 0xdf, 0x0d, 0xeb, 0x09, 0x78, 0x0e,
	0x5a, 0x21, 0xa3, 0x33, 0xc2, 0x93, 0xc2, 0x35, 0xce, 0xfe, 0xcb, 0x0c, 0x8a, 0x3f, 0x6a, 0xf8,
	0xa5, 0x94, 0xf5, 0xdc, 0x00, 0xed, 0x72, 0x5f, 0xd0, 0x7a, 0xa1, 0x49, 0xdd, 0xda, 0x3e, 0xdf,
	0x03, 0xf7, 0x42, 0x46, 0x29, 0x0e, 0x25, 0x8e, 0x82, 0xb4, 0x14, 0xa7, 0x32, 0xf7, 0xc6, 0xae,
	0x7f, 0xb7, 0x42, 0xbd, 0x1a, 0x08, 0x1f, 0x81, 0x6e, 0x8c, 0x84, 0x0c, 0x44, 0xcc, 0x64, 0x30,
	0x25, 0x51, 0xb1, 0xf6, 0xd7, 0x5f, 0xb0, 0x77, 0x75, 0xd1, 0x29, 0x77, 0x4f, 0x58, 0x46, 0xa5,
	0x7f, 0xa0, 0x28, 0xe3, 0x98, 0xc9, 0x01, 0x89, 0xe0, 0x07, 0xa0, 0xbd, 0x62, 0x19, 0xd7, 0xe4,
	0xdd, 0x5b, 0x90, 0x5b, 0xaa, 0x7a, 0x40, 0x22, 0xeb, 0x6b, 0xd0, 0xbd, 0xd1, 0x52, 0xf8, 0x08,
	0xec, 0xe7, 0xae, 0xb9, 0xf5, 0xc5, 0x50, 0xf0, 0xac, 0x07, 0xa0, 0x55, 0xf4, 0x50, 0x7f, 0xd3,
	0x31, 0xcb, 0xa5, 0x76, 0x7d, 0x3d, 0x2e, 0x6c, 0xf8, 0xf4, 0x67, 0x03, 0x58, 0x15, 0x9b, 0x31,
	0x1e, 0x11, 0xaa, 0xfe, 0x35, 0x63, 0xcc, 0x97, 0x24, 0xc4, 0x50, 0x82, 0x83, 0xda, 0xe1, 0x40,
	0x77, 0xcb, 0x4b, 0xd5, 0x7a, 0xb8, 0xed, 0xb9, 0x9f, 0x18, 0x0f, 0x8d, 0xc1, 0xaf, 0xcd, 0xdf,
	0xae, 0x6c, 0xe3, 0xd9, 0x95, 0x6d, 0xfc, 0x71, 0x65, 0x1b, 0x3f, 0x5d, 0xdb, 0x8d, 0x67, 0xd7,
	0x76, 0xe3, 0xf9, 0xb5, 0xdd, 0x00, 0x6f, 0x84, 0x2c, 0xd9, 0xa4, 0x39, 0x38, 0x1c, 0x97, 0x91,
	0xa7, 0x1e, 0x23, 0x9e, 0xf1, 0xed, 0x78, 0x4e, 0xe4, 0x22, 0x9b, 0x3a, 0x21, 0x4b, 0xdc, 0x90,
	0x89, 0x84, 0x09, 0x97, 0xe3, 0x18, 0xad, 0x30, 0x77, 0x97, 0xa7, 0xd5, 0x30, 0x5c, 0x20, 0x42,
	0x85, 0xbb, 0xe1, 0x19, 0xf5, 0x51, 0x15, 0x2c, 0x7b, 0x4f, 0x9b, 0x3b, 0xde, 0xf9, 0xf8, 0x97,
	0xe6, 0x7d, 0xaf, 0x5c, 0xca, 0xb9, 0x5e, 0x4a, 0x35, 0xb9, 0x33, 0xe9, 0xfd, 0xbe, 0x46, 0x2f,
	0x34, 0x7a, 0x51, 0xa1, 0x17, 0x93, 0xde, 0x55, 0xf3, 0xad, 0x0d, 0xe8, 0xc5, 0x67, 0xde, 0xe0,
	0x4b, 0x2c, 0x51, 0x84, 0x24, 0xfa, 0xb3, 0x69, 0x97, 0x95, 0xfd, 0xbe, 0x2e, 0xed, 0xf7, 0xab,
	0xda, 0x7e, 0x7f, 0xd2, 0x9b, 0xee, 0xeb, 0x77, 0xd7, 0xbb, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xb2, 0x9e, 0x63, 0xb4, 0x05, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CeremonyCoordinatorServiceClient is the client API for CeremonyCoordinatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CeremonyCoordinatorServiceClient interface {
	// The protocol used to participate in the ceremony.
	//
	// The message flow is
	// ```
	// Client                     Server
	//
	//	Identify     ===========>
	//	             <=========== Position (repeated)
	//	             <=========== ContributeNow
	//	Contribution ===========>
	//	             <=========== Confirm
	//
	// ```
	Participate(ctx context.Context, opts ...grpc.CallOption) (CeremonyCoordinatorService_ParticipateClient, error)
}

type ceremonyCoordinatorServiceClient struct {
	cc grpc1.ClientConn
}

func NewCeremonyCoordinatorServiceClient(cc grpc1.ClientConn) CeremonyCoordinatorServiceClient {
	return &ceremonyCoordinatorServiceClient{cc}
}

func (c *ceremonyCoordinatorServiceClient) Participate(ctx context.Context, opts ...grpc.CallOption) (CeremonyCoordinatorService_ParticipateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CeremonyCoordinatorService_serviceDesc.Streams[0], "/penumbra.tools.summoning.v1.CeremonyCoordinatorService/Participate", opts...)
	if err != nil {
		return nil, err
	}
	x := &ceremonyCoordinatorServiceParticipateClient{stream}
	return x, nil
}

type CeremonyCoordinatorService_ParticipateClient interface {
	Send(*ParticipateRequest) error
	Recv() (*ParticipateResponse, error)
	grpc.ClientStream
}

type ceremonyCoordinatorServiceParticipateClient struct {
	grpc.ClientStream
}

func (x *ceremonyCoordinatorServiceParticipateClient) Send(m *ParticipateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ceremonyCoordinatorServiceParticipateClient) Recv() (*ParticipateResponse, error) {
	m := new(ParticipateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CeremonyCoordinatorServiceServer is the server API for CeremonyCoordinatorService service.
type CeremonyCoordinatorServiceServer interface {
	// The protocol used to participate in the ceremony.
	//
	// The message flow is
	// ```
	// Client                     Server
	//
	//	Identify     ===========>
	//	             <=========== Position (repeated)
	//	             <=========== ContributeNow
	//	Contribution ===========>
	//	             <=========== Confirm
	//
	// ```
	Participate(CeremonyCoordinatorService_ParticipateServer) error
}

// UnimplementedCeremonyCoordinatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCeremonyCoordinatorServiceServer struct {
}

func (*UnimplementedCeremonyCoordinatorServiceServer) Participate(srv CeremonyCoordinatorService_ParticipateServer) error {
	return status.Errorf(codes.Unimplemented, "method Participate not implemented")
}

func RegisterCeremonyCoordinatorServiceServer(s grpc1.Server, srv CeremonyCoordinatorServiceServer) {
	s.RegisterService(&_CeremonyCoordinatorService_serviceDesc, srv)
}

func _CeremonyCoordinatorService_Participate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CeremonyCoordinatorServiceServer).Participate(&ceremonyCoordinatorServiceParticipateServer{stream})
}

type CeremonyCoordinatorService_ParticipateServer interface {
	Send(*ParticipateResponse) error
	Recv() (*ParticipateRequest, error)
	grpc.ServerStream
}

type ceremonyCoordinatorServiceParticipateServer struct {
	grpc.ServerStream
}

func (x *ceremonyCoordinatorServiceParticipateServer) Send(m *ParticipateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ceremonyCoordinatorServiceParticipateServer) Recv() (*ParticipateRequest, error) {
	m := new(ParticipateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CeremonyCoordinatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.tools.summoning.v1.CeremonyCoordinatorService",
	HandlerType: (*CeremonyCoordinatorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Participate",
			Handler:       _CeremonyCoordinatorService_Participate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "penumbra/tools/summoning/v1/summoning.proto",
}

func (m *ParticipateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParticipateRequest_Identify_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateRequest_Identify_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Identify != nil {
		{
			size, err := m.Identify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ParticipateRequest_Contribution_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateRequest_Contribution_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Contribution != nil {
		{
			size, err := m.Contribution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ParticipateRequest_Identify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateRequest_Identify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateRequest_Identify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParticipateRequest_Contribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateRequest_Contribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateRequest_Contribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParentHashes != nil {
		{
			size, err := m.ParentHashes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UpdateProofs != nil {
		{
			size, err := m.UpdateProofs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Updated != nil {
		{
			size, err := m.Updated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CeremonyCrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CeremonyCrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CeremonyCrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NulliferDerivationCrs) > 0 {
		i -= len(m.NulliferDerivationCrs)
		copy(dAtA[i:], m.NulliferDerivationCrs)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.NulliferDerivationCrs)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.SwapClaim) > 0 {
		i -= len(m.SwapClaim)
		copy(dAtA[i:], m.SwapClaim)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.SwapClaim)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.Swap) > 0 {
		i -= len(m.Swap)
		copy(dAtA[i:], m.Swap)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Swap)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.UndelegateClaim) > 0 {
		i -= len(m.UndelegateClaim)
		copy(dAtA[i:], m.UndelegateClaim)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.UndelegateClaim)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.DelegatorVote) > 0 {
		i -= len(m.DelegatorVote)
		copy(dAtA[i:], m.DelegatorVote)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.DelegatorVote)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Spend) > 0 {
		i -= len(m.Spend)
		copy(dAtA[i:], m.Spend)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Spend)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}

func (m *CeremonyLinkingProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CeremonyLinkingProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CeremonyLinkingProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NulliferDerivationCrs) > 0 {
		i -= len(m.NulliferDerivationCrs)
		copy(dAtA[i:], m.NulliferDerivationCrs)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.NulliferDerivationCrs)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.SwapClaim) > 0 {
		i -= len(m.SwapClaim)
		copy(dAtA[i:], m.SwapClaim)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.SwapClaim)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.Swap) > 0 {
		i -= len(m.Swap)
		copy(dAtA[i:], m.Swap)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Swap)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.UndelegateClaim) > 0 {
		i -= len(m.UndelegateClaim)
		copy(dAtA[i:], m.UndelegateClaim)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.UndelegateClaim)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.DelegatorVote) > 0 {
		i -= len(m.DelegatorVote)
		copy(dAtA[i:], m.DelegatorVote)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.DelegatorVote)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Spend) > 0 {
		i -= len(m.Spend)
		copy(dAtA[i:], m.Spend)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Spend)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}

func (m *CeremonyParentHashes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CeremonyParentHashes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CeremonyParentHashes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NulliferDerivationCrs) > 0 {
		i -= len(m.NulliferDerivationCrs)
		copy(dAtA[i:], m.NulliferDerivationCrs)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.NulliferDerivationCrs)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.SwapClaim) > 0 {
		i -= len(m.SwapClaim)
		copy(dAtA[i:], m.SwapClaim)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.SwapClaim)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.Swap) > 0 {
		i -= len(m.Swap)
		copy(dAtA[i:], m.Swap)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Swap)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.UndelegateClaim) > 0 {
		i -= len(m.UndelegateClaim)
		copy(dAtA[i:], m.UndelegateClaim)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.UndelegateClaim)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.DelegatorVote) > 0 {
		i -= len(m.DelegatorVote)
		copy(dAtA[i:], m.DelegatorVote)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.DelegatorVote)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Spend) > 0 {
		i -= len(m.Spend)
		copy(dAtA[i:], m.Spend)
		i = encodeVarintSummoning(dAtA, i, uint64(len(m.Spend)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}

func (m *ParticipateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParticipateResponse_Position_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateResponse_Position_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ParticipateResponse_ContributeNow_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateResponse_ContributeNow_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContributeNow != nil {
		{
			size, err := m.ContributeNow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ParticipateResponse_Confirm_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateResponse_Confirm_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ParticipateResponse_Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateResponse_Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateResponse_Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.YourBid != nil {
		{
			size, err := m.YourBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastSlotBid != nil {
		{
			size, err := m.LastSlotBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ConnectedParticipants != 0 {
		i = encodeVarintSummoning(dAtA, i, uint64(m.ConnectedParticipants))
		i--
		dAtA[i] = 0x10
	}
	if m.Position != 0 {
		i = encodeVarintSummoning(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParticipateResponse_ContributeNow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateResponse_ContributeNow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateResponse_ContributeNow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parent != nil {
		{
			size, err := m.Parent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSummoning(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParticipateResponse_Confirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipateResponse_Confirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipateResponse_Confirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		i = encodeVarintSummoning(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSummoning(dAtA []byte, offset int, v uint64) int {
	offset -= sovSummoning(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParticipateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *ParticipateRequest_Identify_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identify != nil {
		l = m.Identify.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}
func (m *ParticipateRequest_Contribution_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contribution != nil {
		l = m.Contribution.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}
func (m *ParticipateRequest_Identify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}

func (m *ParticipateRequest_Contribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Updated != nil {
		l = m.Updated.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	if m.UpdateProofs != nil {
		l = m.UpdateProofs.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	if m.ParentHashes != nil {
		l = m.ParentHashes.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}

func (m *CeremonyCrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Spend)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.DelegatorVote)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.UndelegateClaim)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.Swap)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.SwapClaim)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.NulliferDerivationCrs)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	return n
}

func (m *CeremonyLinkingProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Spend)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.DelegatorVote)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.UndelegateClaim)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.Swap)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.SwapClaim)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.NulliferDerivationCrs)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	return n
}

func (m *CeremonyParentHashes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Spend)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.DelegatorVote)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.UndelegateClaim)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.Swap)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.SwapClaim)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	l = len(m.NulliferDerivationCrs)
	if l > 0 {
		n += 2 + l + sovSummoning(uint64(l))
	}
	return n
}

func (m *ParticipateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *ParticipateResponse_Position_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}
func (m *ParticipateResponse_ContributeNow_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContributeNow != nil {
		l = m.ContributeNow.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}
func (m *ParticipateResponse_Confirm_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}
func (m *ParticipateResponse_Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != 0 {
		n += 1 + sovSummoning(uint64(m.Position))
	}
	if m.ConnectedParticipants != 0 {
		n += 1 + sovSummoning(uint64(m.ConnectedParticipants))
	}
	if m.LastSlotBid != nil {
		l = m.LastSlotBid.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	if m.YourBid != nil {
		l = m.YourBid.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}

func (m *ParticipateResponse_ContributeNow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovSummoning(uint64(l))
	}
	return n
}

func (m *ParticipateResponse_Confirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovSummoning(uint64(m.Slot))
	}
	return n
}

func sovSummoning(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSummoning(x uint64) (n int) {
	return sovSummoning(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParticipateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ParticipateRequest_Identify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ParticipateRequest_Identify_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ParticipateRequest_Contribution{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ParticipateRequest_Contribution_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipateRequest_Identify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Identify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Identify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipateRequest_Contribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updated == nil {
				m.Updated = &CeremonyCrs{}
			}
			if err := m.Updated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateProofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateProofs == nil {
				m.UpdateProofs = &CeremonyLinkingProof{}
			}
			if err := m.UpdateProofs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentHashes == nil {
				m.ParentHashes = &CeremonyParentHashes{}
			}
			if err := m.ParentHashes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CeremonyCrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CeremonyCrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CeremonyCrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spend", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spend = append(m.Spend[:0], dAtA[iNdEx:postIndex]...)
			if m.Spend == nil {
				m.Spend = []byte{}
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output[:0], dAtA[iNdEx:postIndex]...)
			if m.Output == nil {
				m.Output = []byte{}
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorVote", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorVote = append(m.DelegatorVote[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorVote == nil {
				m.DelegatorVote = []byte{}
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegateClaim = append(m.UndelegateClaim[:0], dAtA[iNdEx:postIndex]...)
			if m.UndelegateClaim == nil {
				m.UndelegateClaim = []byte{}
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swap = append(m.Swap[:0], dAtA[iNdEx:postIndex]...)
			if m.Swap == nil {
				m.Swap = []byte{}
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapClaim = append(m.SwapClaim[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapClaim == nil {
				m.SwapClaim = []byte{}
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NulliferDerivationCrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NulliferDerivationCrs = append(m.NulliferDerivationCrs[:0], dAtA[iNdEx:postIndex]...)
			if m.NulliferDerivationCrs == nil {
				m.NulliferDerivationCrs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CeremonyLinkingProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CeremonyLinkingProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CeremonyLinkingProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spend", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spend = append(m.Spend[:0], dAtA[iNdEx:postIndex]...)
			if m.Spend == nil {
				m.Spend = []byte{}
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output[:0], dAtA[iNdEx:postIndex]...)
			if m.Output == nil {
				m.Output = []byte{}
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorVote", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorVote = append(m.DelegatorVote[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorVote == nil {
				m.DelegatorVote = []byte{}
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegateClaim = append(m.UndelegateClaim[:0], dAtA[iNdEx:postIndex]...)
			if m.UndelegateClaim == nil {
				m.UndelegateClaim = []byte{}
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swap = append(m.Swap[:0], dAtA[iNdEx:postIndex]...)
			if m.Swap == nil {
				m.Swap = []byte{}
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapClaim = append(m.SwapClaim[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapClaim == nil {
				m.SwapClaim = []byte{}
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NulliferDerivationCrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NulliferDerivationCrs = append(m.NulliferDerivationCrs[:0], dAtA[iNdEx:postIndex]...)
			if m.NulliferDerivationCrs == nil {
				m.NulliferDerivationCrs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CeremonyParentHashes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CeremonyParentHashes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CeremonyParentHashes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spend", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spend = append(m.Spend[:0], dAtA[iNdEx:postIndex]...)
			if m.Spend == nil {
				m.Spend = []byte{}
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output[:0], dAtA[iNdEx:postIndex]...)
			if m.Output == nil {
				m.Output = []byte{}
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorVote", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorVote = append(m.DelegatorVote[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegatorVote == nil {
				m.DelegatorVote = []byte{}
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegateClaim = append(m.UndelegateClaim[:0], dAtA[iNdEx:postIndex]...)
			if m.UndelegateClaim == nil {
				m.UndelegateClaim = []byte{}
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swap = append(m.Swap[:0], dAtA[iNdEx:postIndex]...)
			if m.Swap == nil {
				m.Swap = []byte{}
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapClaim = append(m.SwapClaim[:0], dAtA[iNdEx:postIndex]...)
			if m.SwapClaim == nil {
				m.SwapClaim = []byte{}
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NulliferDerivationCrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NulliferDerivationCrs = append(m.NulliferDerivationCrs[:0], dAtA[iNdEx:postIndex]...)
			if m.NulliferDerivationCrs == nil {
				m.NulliferDerivationCrs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ParticipateResponse_Position{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ParticipateResponse_Position_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributeNow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ParticipateResponse_ContributeNow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ParticipateResponse_ContributeNow_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ParticipateResponse_Confirm{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &ParticipateResponse_Confirm_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipateResponse_Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedParticipants", wireType)
			}
			m.ConnectedParticipants = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectedParticipants |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlotBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSlotBid == nil {
				m.LastSlotBid = &v11.Amount{}
			}
			if err := m.LastSlotBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YourBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YourBid == nil {
				m.YourBid = &v11.Amount{}
			}
			if err := m.YourBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipateResponse_ContributeNow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContributeNow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContributeNow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSummoning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSummoning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &CeremonyCrs{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipateResponse_Confirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Confirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Confirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSummoning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSummoning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSummoning(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSummoning
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSummoning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSummoning
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSummoning
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSummoning
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSummoning        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSummoning          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSummoning = fmt.Errorf("proto: unexpected end of group")
)

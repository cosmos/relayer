// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/crypto/decaf377_fmd/v1alpha1/decaf377_fmd.proto

package decaf377_fmdv1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A clue for use with Fuzzy Message Detection.
type Clue struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *Clue) Reset()         { *m = Clue{} }
func (m *Clue) String() string { return proto.CompactTextString(m) }
func (*Clue) ProtoMessage()    {}
func (*Clue) Descriptor() ([]byte, []int) {
	return fileDescriptor_5575e9604747910d, []int{0}
}
func (m *Clue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Clue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clue.Merge(m, src)
}
func (m *Clue) XXX_Size() int {
	return m.Size()
}
func (m *Clue) XXX_DiscardUnknown() {
	xxx_messageInfo_Clue.DiscardUnknown(m)
}

var xxx_messageInfo_Clue proto.InternalMessageInfo

func (m *Clue) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

func init() {
	proto.RegisterType((*Clue)(nil), "penumbra.crypto.decaf377_fmd.v1alpha1.Clue")
}

func init() {
	proto.RegisterFile("penumbra/crypto/decaf377_fmd/v1alpha1/decaf377_fmd.proto", fileDescriptor_5575e9604747910d)
}

var fileDescriptor_5575e9604747910d = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x28, 0x48, 0xcd, 0x2b,
	0xcd, 0x4d, 0x2a, 0x4a, 0xd4, 0x4f, 0x2e, 0xaa, 0x2c, 0x28, 0xc9, 0xd7, 0x4f, 0x49, 0x4d, 0x4e,
	0x4c, 0x33, 0x36, 0x37, 0x8f, 0x4f, 0xcb, 0x4d, 0xd1, 0x2f, 0x33, 0x4c, 0xcc, 0x29, 0xc8, 0x48,
	0x34, 0x44, 0x11, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x85, 0xe9, 0xd4, 0x83, 0xe8,
	0xd4, 0x43, 0x51, 0x03, 0xd3, 0xa9, 0x24, 0xc3, 0xc5, 0xe2, 0x9c, 0x53, 0x9a, 0x2a, 0x24, 0xc2,
	0xc5, 0x9a, 0x99, 0x97, 0x97, 0x5a, 0x24, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe1, 0x38,
	0x7d, 0x60, 0x3a, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27,
	0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x06, 0x2e, 0xcd, 0xe4, 0xfc,
	0x5c, 0x3d, 0xa2, 0xec, 0x70, 0x12, 0x70, 0x81, 0x0a, 0xbb, 0xe5, 0xa6, 0x04, 0x80, 0x1c, 0x17,
	0xc0, 0x18, 0x95, 0x96, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x9c,
	0x5f, 0x9c, 0x9b, 0x5f, 0xac, 0x5f, 0x94, 0x9a, 0x93, 0x58, 0x99, 0x5a, 0xa4, 0x5f, 0x66, 0x04,
	0x67, 0x26, 0x67, 0x24, 0x66, 0xe6, 0x15, 0xeb, 0x13, 0x15, 0x08, 0xd6, 0xc8, 0xa2, 0x30, 0xc1,
	0x45, 0x4c, 0xcc, 0x01, 0xce, 0x2e, 0xab, 0x98, 0x54, 0x02, 0x60, 0x2e, 0x75, 0x86, 0xb8, 0x14,
	0xc9, 0x49, 0x7a, 0x61, 0x50, 0xc5, 0xa7, 0x10, 0xca, 0x62, 0x20, 0xca, 0x62, 0x90, 0x94, 0xc5,
	0xc0, 0x94, 0x3d, 0x62, 0x32, 0x20, 0x46, 0x59, 0x8c, 0x7b, 0x80, 0x93, 0x6f, 0x6a, 0x49, 0x62,
	0x4a, 0x62, 0x49, 0xe2, 0x2b, 0x26, 0x75, 0x98, 0x16, 0x2b, 0x2b, 0x88, 0x1e, 0x2b, 0x2b, 0x24,
	0x4d, 0x56, 0x56, 0x30, 0x5d, 0x49, 0x6c, 0xe0, 0xe8, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x5b, 0x42, 0x57, 0xa7, 0xfa, 0x01, 0x00, 0x00,
}

func (m *Clue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Clue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintDecaf377Fmd(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDecaf377Fmd(dAtA []byte, offset int, v uint64) int {
	offset -= sovDecaf377Fmd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Clue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovDecaf377Fmd(uint64(l))
	}
	return n
}

func sovDecaf377Fmd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDecaf377Fmd(x uint64) (n int) {
	return sovDecaf377Fmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Clue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecaf377Fmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecaf377Fmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDecaf377Fmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDecaf377Fmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecaf377Fmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDecaf377Fmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDecaf377Fmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDecaf377Fmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDecaf377Fmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDecaf377Fmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDecaf377Fmd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDecaf377Fmd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDecaf377Fmd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDecaf377Fmd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDecaf377Fmd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDecaf377Fmd = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/crypto/decaf377_rdsa/v1alpha1/decaf377_rdsa.proto

package decaf377_rdsav1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SpendAuthSignature struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *SpendAuthSignature) Reset()         { *m = SpendAuthSignature{} }
func (m *SpendAuthSignature) String() string { return proto.CompactTextString(m) }
func (*SpendAuthSignature) ProtoMessage()    {}
func (*SpendAuthSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_5769d4d01f5df277, []int{0}
}
func (m *SpendAuthSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendAuthSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendAuthSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendAuthSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendAuthSignature.Merge(m, src)
}
func (m *SpendAuthSignature) XXX_Size() int {
	return m.Size()
}
func (m *SpendAuthSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendAuthSignature.DiscardUnknown(m)
}

var xxx_messageInfo_SpendAuthSignature proto.InternalMessageInfo

func (m *SpendAuthSignature) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type BindingSignature struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *BindingSignature) Reset()         { *m = BindingSignature{} }
func (m *BindingSignature) String() string { return proto.CompactTextString(m) }
func (*BindingSignature) ProtoMessage()    {}
func (*BindingSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_5769d4d01f5df277, []int{1}
}
func (m *BindingSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindingSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindingSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindingSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindingSignature.Merge(m, src)
}
func (m *BindingSignature) XXX_Size() int {
	return m.Size()
}
func (m *BindingSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_BindingSignature.DiscardUnknown(m)
}

var xxx_messageInfo_BindingSignature proto.InternalMessageInfo

func (m *BindingSignature) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type SpendVerificationKey struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *SpendVerificationKey) Reset()         { *m = SpendVerificationKey{} }
func (m *SpendVerificationKey) String() string { return proto.CompactTextString(m) }
func (*SpendVerificationKey) ProtoMessage()    {}
func (*SpendVerificationKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5769d4d01f5df277, []int{2}
}
func (m *SpendVerificationKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendVerificationKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendVerificationKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendVerificationKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendVerificationKey.Merge(m, src)
}
func (m *SpendVerificationKey) XXX_Size() int {
	return m.Size()
}
func (m *SpendVerificationKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendVerificationKey.DiscardUnknown(m)
}

var xxx_messageInfo_SpendVerificationKey proto.InternalMessageInfo

func (m *SpendVerificationKey) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

func init() {
	proto.RegisterType((*SpendAuthSignature)(nil), "penumbra.crypto.decaf377_rdsa.v1alpha1.SpendAuthSignature")
	proto.RegisterType((*BindingSignature)(nil), "penumbra.crypto.decaf377_rdsa.v1alpha1.BindingSignature")
	proto.RegisterType((*SpendVerificationKey)(nil), "penumbra.crypto.decaf377_rdsa.v1alpha1.SpendVerificationKey")
}

func init() {
	proto.RegisterFile("penumbra/crypto/decaf377_rdsa/v1alpha1/decaf377_rdsa.proto", fileDescriptor_5769d4d01f5df277)
}

var fileDescriptor_5769d4d01f5df277 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xb1, 0x4a, 0x03, 0x31,
	0x18, 0xc7, 0x7b, 0x27, 0x3a, 0x1c, 0x0e, 0x5a, 0x3a, 0x38, 0x1d, 0x52, 0x50, 0x4a, 0x91, 0x84,
	0xda, 0xa1, 0x10, 0x27, 0xaf, 0x05, 0x07, 0x11, 0x8e, 0x16, 0x3a, 0xc8, 0x81, 0x7c, 0x4d, 0xd2,
	0x5e, 0xa0, 0x97, 0x1c, 0xb9, 0x5c, 0xa1, 0x6f, 0xe1, 0x33, 0x38, 0xfa, 0x24, 0xe2, 0xd4, 0xd1,
	0x51, 0xae, 0x9b, 0x4f, 0xe0, 0x28, 0xf6, 0x1a, 0x6d, 0x41, 0xb0, 0x5b, 0xf2, 0xe7, 0xf7, 0x0b,
	0xff, 0x7c, 0x7c, 0x1e, 0x49, 0xb9, 0xcc, 0x93, 0x91, 0x06, 0x4c, 0xf5, 0x3c, 0x35, 0x0a, 0x33,
	0x4e, 0x61, 0xdc, 0xee, 0x74, 0x1e, 0x34, 0xcb, 0x00, 0xcf, 0x5a, 0x30, 0x4d, 0x63, 0x68, 0x6d,
	0xc7, 0x28, 0xd5, 0xca, 0xa8, 0xea, 0xb9, 0x75, 0x51, 0xe9, 0xa2, 0x6d, 0xc8, 0xba, 0xf5, 0xa6,
	0x57, 0x1d, 0xa4, 0x5c, 0xb2, 0xeb, 0xdc, 0xc4, 0x03, 0x31, 0x91, 0x60, 0x72, 0xcd, 0xab, 0x35,
	0x6f, 0x5f, 0x48, 0xc9, 0xf5, 0x89, 0x73, 0xea, 0x34, 0x0e, 0xfb, 0xe5, 0xa5, 0xde, 0xf0, 0x8e,
	0x02, 0x21, 0x99, 0x90, 0x93, 0xff, 0xc8, 0x0b, 0xaf, 0xb6, 0x7a, 0x75, 0xc8, 0xb5, 0x18, 0x0b,
	0x0a, 0x46, 0x28, 0x79, 0xcb, 0xe7, 0x7f, 0xd3, 0xc1, 0xa7, 0xfb, 0x52, 0xf8, 0xce, 0xa2, 0xf0,
	0x9d, 0xf7, 0xc2, 0x77, 0x1e, 0x97, 0x7e, 0x65, 0xb1, 0xf4, 0x2b, 0x6f, 0x4b, 0xbf, 0xe2, 0x35,
	0xa9, 0x4a, 0xd0, 0x6e, 0x5f, 0x09, 0x8e, 0x7b, 0xeb, 0xbc, 0xcf, 0x32, 0x08, 0xbf, 0xa7, 0x10,
	0x3a, 0xf7, 0xf1, 0x44, 0x98, 0x38, 0x1f, 0x21, 0xaa, 0x12, 0x4c, 0x55, 0x96, 0xa8, 0x0c, 0x6b,
	0x3e, 0x85, 0x39, 0xd7, 0x78, 0x76, 0xf9, 0x73, 0xa4, 0x31, 0x08, 0x99, 0xe1, 0xdd, 0xe6, 0x7d,
	0xb5, 0x15, 0xdb, 0xf4, 0xc9, 0xdd, 0x0b, 0xbb, 0xbd, 0x67, 0xf7, 0x2c, 0xb4, 0x6d, 0xbb, 0x65,
	0xdb, 0xcd, 0x56, 0x68, 0xb8, 0xa6, 0x5f, 0x7f, 0xb9, 0xa8, 0xe4, 0xa2, 0x4d, 0x2e, 0xb2, 0x5c,
	0xe1, 0xb6, 0x76, 0xe2, 0xa2, 0x9b, 0x30, 0xb8, 0xe3, 0x06, 0x18, 0x18, 0xf8, 0x70, 0x1b, 0xd6,
	0x21, 0xa4, 0x94, 0x08, 0xd9, 0xb4, 0x08, 0xb1, 0xda, 0xe8, 0x60, 0xb5, 0x2d, 0xed, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x34, 0x9a, 0xf4, 0x33, 0x6b, 0x02, 0x00, 0x00,
}

func (m *SpendAuthSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendAuthSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendAuthSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintDecaf377Rdsa(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BindingSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindingSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindingSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintDecaf377Rdsa(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpendVerificationKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendVerificationKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendVerificationKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintDecaf377Rdsa(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDecaf377Rdsa(dAtA []byte, offset int, v uint64) int {
	offset -= sovDecaf377Rdsa(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpendAuthSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovDecaf377Rdsa(uint64(l))
	}
	return n
}

func (m *BindingSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovDecaf377Rdsa(uint64(l))
	}
	return n
}

func (m *SpendVerificationKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovDecaf377Rdsa(uint64(l))
	}
	return n
}

func sovDecaf377Rdsa(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDecaf377Rdsa(x uint64) (n int) {
	return sovDecaf377Rdsa(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpendAuthSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecaf377Rdsa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendAuthSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendAuthSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecaf377Rdsa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecaf377Rdsa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindingSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecaf377Rdsa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindingSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindingSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecaf377Rdsa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecaf377Rdsa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendVerificationKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDecaf377Rdsa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendVerificationKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendVerificationKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDecaf377Rdsa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDecaf377Rdsa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDecaf377Rdsa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDecaf377Rdsa(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDecaf377Rdsa
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDecaf377Rdsa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDecaf377Rdsa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDecaf377Rdsa
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDecaf377Rdsa
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDecaf377Rdsa
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDecaf377Rdsa        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDecaf377Rdsa          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDecaf377Rdsa = fmt.Errorf("proto: unexpected end of group")
)

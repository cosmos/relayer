// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/chain/v1alpha1/chain.proto

package chainv1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	v1alpha1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/crypto/v1alpha1"
	v1alpha11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/dex/v1alpha1"
	v1alpha12 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/stake/v1alpha1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Global chain configuration data, such as chain ID, epoch duration, etc.
type ChainParameters struct {
	// The identifier of the chain.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The duration of each epoch, in number of blocks.
	EpochDuration uint64 `protobuf:"varint,2,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
	// The number of epochs an unbonding note for before being released.
	UnbondingEpochs uint64 `protobuf:"varint,3,opt,name=unbonding_epochs,json=unbondingEpochs,proto3" json:"unbonding_epochs,omitempty"`
	// The maximum number of validators in the consensus set.
	ActiveValidatorLimit uint64 `protobuf:"varint,4,opt,name=active_validator_limit,json=activeValidatorLimit,proto3" json:"active_validator_limit,omitempty"`
	// The base reward rate, expressed in basis points of basis points
	BaseRewardRate uint64 `protobuf:"varint,9,opt,name=base_reward_rate,json=baseRewardRate,proto3" json:"base_reward_rate,omitempty"`
	// The penalty for slashing due to misbehavior.
	SlashingPenaltyMisbehavior uint64 `protobuf:"varint,5,opt,name=slashing_penalty_misbehavior,json=slashingPenaltyMisbehavior,proto3" json:"slashing_penalty_misbehavior,omitempty"`
	// The penalty for slashing due to downtime.
	SlashingPenaltyDowntime uint64 `protobuf:"varint,10,opt,name=slashing_penalty_downtime,json=slashingPenaltyDowntime,proto3" json:"slashing_penalty_downtime,omitempty"`
	// The number of blocks in the window to check for downtime.
	SignedBlocksWindowLen uint64 `protobuf:"varint,11,opt,name=signed_blocks_window_len,json=signedBlocksWindowLen,proto3" json:"signed_blocks_window_len,omitempty"`
	// The maximum number of blocks in the window each validator can miss signing without slashing.
	MissedBlocksMaximum uint64 `protobuf:"varint,12,opt,name=missed_blocks_maximum,json=missedBlocksMaximum,proto3" json:"missed_blocks_maximum,omitempty"`
	// Whether IBC (forming connections, processing IBC packets) is enabled.
	IbcEnabled bool `protobuf:"varint,6,opt,name=ibc_enabled,json=ibcEnabled,proto3" json:"ibc_enabled,omitempty"`
	// Whether inbound ICS-20 transfers are enabled
	InboundIcs20TransfersEnabled bool `protobuf:"varint,7,opt,name=inbound_ics20_transfers_enabled,json=inboundIcs20TransfersEnabled,proto3" json:"inbound_ics20_transfers_enabled,omitempty"`
	// Whether outbound ICS-20 transfers are enabled
	OutboundIcs20TransfersEnabled bool `protobuf:"varint,8,opt,name=outbound_ics20_transfers_enabled,json=outboundIcs20TransfersEnabled,proto3" json:"outbound_ics20_transfers_enabled,omitempty"`
	// The number of blocks during which a proposal is voted on.
	ProposalVotingBlocks uint64 `protobuf:"varint,20,opt,name=proposal_voting_blocks,json=proposalVotingBlocks,proto3" json:"proposal_voting_blocks,omitempty"`
	// The deposit required to create a proposal.
	ProposalDepositAmount uint64 `protobuf:"varint,21,opt,name=proposal_deposit_amount,json=proposalDepositAmount,proto3" json:"proposal_deposit_amount,omitempty"`
	// The quorum required for a proposal to be considered valid, as a fraction of the total stake
	// weight of the network.
	ProposalValidQuorum string `protobuf:"bytes,22,opt,name=proposal_valid_quorum,json=proposalValidQuorum,proto3" json:"proposal_valid_quorum,omitempty"`
	// The threshold for a proposal to pass voting, as a ratio of "yes" votes over "no" votes.
	ProposalPassThreshold string `protobuf:"bytes,23,opt,name=proposal_pass_threshold,json=proposalPassThreshold,proto3" json:"proposal_pass_threshold,omitempty"`
	// The threshold for a proposal to be slashed, regardless of whether the "yes" and "no" votes
	// would have passed it, as a ratio of "no" votes over all total votes.
	ProposalSlashThreshold string `protobuf:"bytes,24,opt,name=proposal_slash_threshold,json=proposalSlashThreshold,proto3" json:"proposal_slash_threshold,omitempty"`
	// Whether DAO spend proposals are enabled.
	DaoSpendProposalsEnabled bool `protobuf:"varint,25,opt,name=dao_spend_proposals_enabled,json=daoSpendProposalsEnabled,proto3" json:"dao_spend_proposals_enabled,omitempty"`
}

func (m *ChainParameters) Reset()         { *m = ChainParameters{} }
func (m *ChainParameters) String() string { return proto.CompactTextString(m) }
func (*ChainParameters) ProtoMessage()    {}
func (*ChainParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{0}
}
func (m *ChainParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParameters.Merge(m, src)
}
func (m *ChainParameters) XXX_Size() int {
	return m.Size()
}
func (m *ChainParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParameters.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParameters proto.InternalMessageInfo

func (m *ChainParameters) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ChainParameters) GetEpochDuration() uint64 {
	if m != nil {
		return m.EpochDuration
	}
	return 0
}

func (m *ChainParameters) GetUnbondingEpochs() uint64 {
	if m != nil {
		return m.UnbondingEpochs
	}
	return 0
}

func (m *ChainParameters) GetActiveValidatorLimit() uint64 {
	if m != nil {
		return m.ActiveValidatorLimit
	}
	return 0
}

func (m *ChainParameters) GetBaseRewardRate() uint64 {
	if m != nil {
		return m.BaseRewardRate
	}
	return 0
}

func (m *ChainParameters) GetSlashingPenaltyMisbehavior() uint64 {
	if m != nil {
		return m.SlashingPenaltyMisbehavior
	}
	return 0
}

func (m *ChainParameters) GetSlashingPenaltyDowntime() uint64 {
	if m != nil {
		return m.SlashingPenaltyDowntime
	}
	return 0
}

func (m *ChainParameters) GetSignedBlocksWindowLen() uint64 {
	if m != nil {
		return m.SignedBlocksWindowLen
	}
	return 0
}

func (m *ChainParameters) GetMissedBlocksMaximum() uint64 {
	if m != nil {
		return m.MissedBlocksMaximum
	}
	return 0
}

func (m *ChainParameters) GetIbcEnabled() bool {
	if m != nil {
		return m.IbcEnabled
	}
	return false
}

func (m *ChainParameters) GetInboundIcs20TransfersEnabled() bool {
	if m != nil {
		return m.InboundIcs20TransfersEnabled
	}
	return false
}

func (m *ChainParameters) GetOutboundIcs20TransfersEnabled() bool {
	if m != nil {
		return m.OutboundIcs20TransfersEnabled
	}
	return false
}

func (m *ChainParameters) GetProposalVotingBlocks() uint64 {
	if m != nil {
		return m.ProposalVotingBlocks
	}
	return 0
}

func (m *ChainParameters) GetProposalDepositAmount() uint64 {
	if m != nil {
		return m.ProposalDepositAmount
	}
	return 0
}

func (m *ChainParameters) GetProposalValidQuorum() string {
	if m != nil {
		return m.ProposalValidQuorum
	}
	return ""
}

func (m *ChainParameters) GetProposalPassThreshold() string {
	if m != nil {
		return m.ProposalPassThreshold
	}
	return ""
}

func (m *ChainParameters) GetProposalSlashThreshold() string {
	if m != nil {
		return m.ProposalSlashThreshold
	}
	return ""
}

func (m *ChainParameters) GetDaoSpendProposalsEnabled() bool {
	if m != nil {
		return m.DaoSpendProposalsEnabled
	}
	return false
}

// The ratio between two numbers, used in governance to describe vote thresholds and quorums.
type Ratio struct {
	// The numerator.
	Numerator uint64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// The denominator.
	Denominator uint64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (m *Ratio) Reset()         { *m = Ratio{} }
func (m *Ratio) String() string { return proto.CompactTextString(m) }
func (*Ratio) ProtoMessage()    {}
func (*Ratio) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{1}
}
func (m *Ratio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ratio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ratio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ratio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ratio.Merge(m, src)
}
func (m *Ratio) XXX_Size() int {
	return m.Size()
}
func (m *Ratio) XXX_DiscardUnknown() {
	xxx_messageInfo_Ratio.DiscardUnknown(m)
}

var xxx_messageInfo_Ratio proto.InternalMessageInfo

func (m *Ratio) GetNumerator() uint64 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *Ratio) GetDenominator() uint64 {
	if m != nil {
		return m.Denominator
	}
	return 0
}

// Parameters for Fuzzy Message Detection
type FmdParameters struct {
	PrecisionBits   uint32 `protobuf:"varint,1,opt,name=precision_bits,json=precisionBits,proto3" json:"precision_bits,omitempty"`
	AsOfBlockHeight uint64 `protobuf:"varint,2,opt,name=as_of_block_height,json=asOfBlockHeight,proto3" json:"as_of_block_height,omitempty"`
}

func (m *FmdParameters) Reset()         { *m = FmdParameters{} }
func (m *FmdParameters) String() string { return proto.CompactTextString(m) }
func (*FmdParameters) ProtoMessage()    {}
func (*FmdParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{2}
}
func (m *FmdParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FmdParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FmdParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FmdParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FmdParameters.Merge(m, src)
}
func (m *FmdParameters) XXX_Size() int {
	return m.Size()
}
func (m *FmdParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_FmdParameters.DiscardUnknown(m)
}

var xxx_messageInfo_FmdParameters proto.InternalMessageInfo

func (m *FmdParameters) GetPrecisionBits() uint32 {
	if m != nil {
		return m.PrecisionBits
	}
	return 0
}

func (m *FmdParameters) GetAsOfBlockHeight() uint64 {
	if m != nil {
		return m.AsOfBlockHeight
	}
	return 0
}

// TODO: delete with legacy code
// Information about a given asset at a given time (as specified by block
// height). Currently this only contains the total supply.
type AssetInfo struct {
	AssetId         *v1alpha1.AssetId `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Denom           *v1alpha1.Denom   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	AsOfBlockHeight uint64            `protobuf:"varint,3,opt,name=as_of_block_height,json=asOfBlockHeight,proto3" json:"as_of_block_height,omitempty"`
	TotalSupply     uint64            `protobuf:"varint,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
}

func (m *AssetInfo) Reset()         { *m = AssetInfo{} }
func (m *AssetInfo) String() string { return proto.CompactTextString(m) }
func (*AssetInfo) ProtoMessage()    {}
func (*AssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{3}
}
func (m *AssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetInfo.Merge(m, src)
}
func (m *AssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *AssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AssetInfo proto.InternalMessageInfo

func (m *AssetInfo) GetAssetId() *v1alpha1.AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

func (m *AssetInfo) GetDenom() *v1alpha1.Denom {
	if m != nil {
		return m.Denom
	}
	return nil
}

func (m *AssetInfo) GetAsOfBlockHeight() uint64 {
	if m != nil {
		return m.AsOfBlockHeight
	}
	return 0
}

func (m *AssetInfo) GetTotalSupply() uint64 {
	if m != nil {
		return m.TotalSupply
	}
	return 0
}

// Contains the minimum data needed to update client state.
type CompactBlock struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// State payloads describing new state fragments.
	StatePayloads []*StatePayload `protobuf:"bytes,2,rep,name=state_payloads,json=statePayloads,proto3" json:"state_payloads,omitempty"`
	// Nullifiers identifying spent notes.
	Nullifiers []*v1alpha1.Nullifier `protobuf:"bytes,3,rep,name=nullifiers,proto3" json:"nullifiers,omitempty"`
	// The block root of this block.
	BlockRoot *v1alpha1.MerkleRoot `protobuf:"bytes,4,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// The epoch root of this epoch (only present when the block is the last in an epoch).
	EpochRoot *v1alpha1.MerkleRoot `protobuf:"bytes,17,opt,name=epoch_root,json=epochRoot,proto3" json:"epoch_root,omitempty"`
	// If a proposal started voting in this block, this is set to `true`.
	ProposalStarted bool `protobuf:"varint,20,opt,name=proposal_started,json=proposalStarted,proto3" json:"proposal_started,omitempty"`
	// Latest Fuzzy Message Detection parameters.
	FmdParameters *FmdParameters `protobuf:"bytes,100,opt,name=fmd_parameters,json=fmdParameters,proto3" json:"fmd_parameters,omitempty"`
	// Price data for swaps executed in this block.
	SwapOutputs []*v1alpha11.BatchSwapOutputData `protobuf:"bytes,5,rep,name=swap_outputs,json=swapOutputs,proto3" json:"swap_outputs,omitempty"`
	// Updated chain parameters, if they have changed.
	ChainParameters *ChainParameters `protobuf:"bytes,6,opt,name=chain_parameters,json=chainParameters,proto3" json:"chain_parameters,omitempty"`
}

func (m *CompactBlock) Reset()         { *m = CompactBlock{} }
func (m *CompactBlock) String() string { return proto.CompactTextString(m) }
func (*CompactBlock) ProtoMessage()    {}
func (*CompactBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{4}
}
func (m *CompactBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactBlock.Merge(m, src)
}
func (m *CompactBlock) XXX_Size() int {
	return m.Size()
}
func (m *CompactBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactBlock.DiscardUnknown(m)
}

var xxx_messageInfo_CompactBlock proto.InternalMessageInfo

func (m *CompactBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CompactBlock) GetStatePayloads() []*StatePayload {
	if m != nil {
		return m.StatePayloads
	}
	return nil
}

func (m *CompactBlock) GetNullifiers() []*v1alpha1.Nullifier {
	if m != nil {
		return m.Nullifiers
	}
	return nil
}

func (m *CompactBlock) GetBlockRoot() *v1alpha1.MerkleRoot {
	if m != nil {
		return m.BlockRoot
	}
	return nil
}

func (m *CompactBlock) GetEpochRoot() *v1alpha1.MerkleRoot {
	if m != nil {
		return m.EpochRoot
	}
	return nil
}

func (m *CompactBlock) GetProposalStarted() bool {
	if m != nil {
		return m.ProposalStarted
	}
	return false
}

func (m *CompactBlock) GetFmdParameters() *FmdParameters {
	if m != nil {
		return m.FmdParameters
	}
	return nil
}

func (m *CompactBlock) GetSwapOutputs() []*v1alpha11.BatchSwapOutputData {
	if m != nil {
		return m.SwapOutputs
	}
	return nil
}

func (m *CompactBlock) GetChainParameters() *ChainParameters {
	if m != nil {
		return m.ChainParameters
	}
	return nil
}

type StatePayload struct {
	// Types that are valid to be assigned to StatePayload:
	//	*StatePayload_RolledUp_
	//	*StatePayload_Note_
	//	*StatePayload_Swap_
	//	*StatePayload_Position_
	StatePayload isStatePayload_StatePayload `protobuf_oneof:"state_payload"`
}

func (m *StatePayload) Reset()         { *m = StatePayload{} }
func (m *StatePayload) String() string { return proto.CompactTextString(m) }
func (*StatePayload) ProtoMessage()    {}
func (*StatePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{5}
}
func (m *StatePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatePayload.Merge(m, src)
}
func (m *StatePayload) XXX_Size() int {
	return m.Size()
}
func (m *StatePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_StatePayload.DiscardUnknown(m)
}

var xxx_messageInfo_StatePayload proto.InternalMessageInfo

type isStatePayload_StatePayload interface {
	isStatePayload_StatePayload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type StatePayload_RolledUp_ struct {
	RolledUp *StatePayload_RolledUp `protobuf:"bytes,1,opt,name=rolled_up,json=rolledUp,proto3,oneof" json:"rolled_up,omitempty"`
}
type StatePayload_Note_ struct {
	Note *StatePayload_Note `protobuf:"bytes,2,opt,name=note,proto3,oneof" json:"note,omitempty"`
}
type StatePayload_Swap_ struct {
	Swap *StatePayload_Swap `protobuf:"bytes,3,opt,name=swap,proto3,oneof" json:"swap,omitempty"`
}
type StatePayload_Position_ struct {
	Position *StatePayload_Position `protobuf:"bytes,4,opt,name=position,proto3,oneof" json:"position,omitempty"`
}

func (*StatePayload_RolledUp_) isStatePayload_StatePayload() {}
func (*StatePayload_Note_) isStatePayload_StatePayload()     {}
func (*StatePayload_Swap_) isStatePayload_StatePayload()     {}
func (*StatePayload_Position_) isStatePayload_StatePayload() {}

func (m *StatePayload) GetStatePayload() isStatePayload_StatePayload {
	if m != nil {
		return m.StatePayload
	}
	return nil
}

func (m *StatePayload) GetRolledUp() *StatePayload_RolledUp {
	if x, ok := m.GetStatePayload().(*StatePayload_RolledUp_); ok {
		return x.RolledUp
	}
	return nil
}

func (m *StatePayload) GetNote() *StatePayload_Note {
	if x, ok := m.GetStatePayload().(*StatePayload_Note_); ok {
		return x.Note
	}
	return nil
}

func (m *StatePayload) GetSwap() *StatePayload_Swap {
	if x, ok := m.GetStatePayload().(*StatePayload_Swap_); ok {
		return x.Swap
	}
	return nil
}

func (m *StatePayload) GetPosition() *StatePayload_Position {
	if x, ok := m.GetStatePayload().(*StatePayload_Position_); ok {
		return x.Position
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StatePayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StatePayload_RolledUp_)(nil),
		(*StatePayload_Note_)(nil),
		(*StatePayload_Swap_)(nil),
		(*StatePayload_Position_)(nil),
	}
}

type StatePayload_RolledUp struct {
	Commitment *v1alpha1.StateCommitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (m *StatePayload_RolledUp) Reset()         { *m = StatePayload_RolledUp{} }
func (m *StatePayload_RolledUp) String() string { return proto.CompactTextString(m) }
func (*StatePayload_RolledUp) ProtoMessage()    {}
func (*StatePayload_RolledUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{5, 0}
}
func (m *StatePayload_RolledUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatePayload_RolledUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatePayload_RolledUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatePayload_RolledUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatePayload_RolledUp.Merge(m, src)
}
func (m *StatePayload_RolledUp) XXX_Size() int {
	return m.Size()
}
func (m *StatePayload_RolledUp) XXX_DiscardUnknown() {
	xxx_messageInfo_StatePayload_RolledUp.DiscardUnknown(m)
}

var xxx_messageInfo_StatePayload_RolledUp proto.InternalMessageInfo

func (m *StatePayload_RolledUp) GetCommitment() *v1alpha1.StateCommitment {
	if m != nil {
		return m.Commitment
	}
	return nil
}

type StatePayload_Note struct {
	Source *NoteSource           `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Note   *v1alpha1.NotePayload `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (m *StatePayload_Note) Reset()         { *m = StatePayload_Note{} }
func (m *StatePayload_Note) String() string { return proto.CompactTextString(m) }
func (*StatePayload_Note) ProtoMessage()    {}
func (*StatePayload_Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{5, 1}
}
func (m *StatePayload_Note) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatePayload_Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatePayload_Note.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatePayload_Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatePayload_Note.Merge(m, src)
}
func (m *StatePayload_Note) XXX_Size() int {
	return m.Size()
}
func (m *StatePayload_Note) XXX_DiscardUnknown() {
	xxx_messageInfo_StatePayload_Note.DiscardUnknown(m)
}

var xxx_messageInfo_StatePayload_Note proto.InternalMessageInfo

func (m *StatePayload_Note) GetSource() *NoteSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *StatePayload_Note) GetNote() *v1alpha1.NotePayload {
	if m != nil {
		return m.Note
	}
	return nil
}

type StatePayload_Swap struct {
	Source *NoteSource            `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Swap   *v1alpha11.SwapPayload `protobuf:"bytes,2,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (m *StatePayload_Swap) Reset()         { *m = StatePayload_Swap{} }
func (m *StatePayload_Swap) String() string { return proto.CompactTextString(m) }
func (*StatePayload_Swap) ProtoMessage()    {}
func (*StatePayload_Swap) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{5, 2}
}
func (m *StatePayload_Swap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatePayload_Swap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatePayload_Swap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatePayload_Swap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatePayload_Swap.Merge(m, src)
}
func (m *StatePayload_Swap) XXX_Size() int {
	return m.Size()
}
func (m *StatePayload_Swap) XXX_DiscardUnknown() {
	xxx_messageInfo_StatePayload_Swap.DiscardUnknown(m)
}

var xxx_messageInfo_StatePayload_Swap proto.InternalMessageInfo

func (m *StatePayload_Swap) GetSource() *NoteSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *StatePayload_Swap) GetSwap() *v1alpha11.SwapPayload {
	if m != nil {
		return m.Swap
	}
	return nil
}

type StatePayload_Position struct {
	LpNft      *v1alpha11.LpNft          `protobuf:"bytes,2,opt,name=lp_nft,json=lpNft,proto3" json:"lp_nft,omitempty"`
	Commitment *v1alpha1.StateCommitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (m *StatePayload_Position) Reset()         { *m = StatePayload_Position{} }
func (m *StatePayload_Position) String() string { return proto.CompactTextString(m) }
func (*StatePayload_Position) ProtoMessage()    {}
func (*StatePayload_Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{5, 3}
}
func (m *StatePayload_Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatePayload_Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatePayload_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatePayload_Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatePayload_Position.Merge(m, src)
}
func (m *StatePayload_Position) XXX_Size() int {
	return m.Size()
}
func (m *StatePayload_Position) XXX_DiscardUnknown() {
	xxx_messageInfo_StatePayload_Position.DiscardUnknown(m)
}

var xxx_messageInfo_StatePayload_Position proto.InternalMessageInfo

func (m *StatePayload_Position) GetLpNft() *v1alpha11.LpNft {
	if m != nil {
		return m.LpNft
	}
	return nil
}

func (m *StatePayload_Position) GetCommitment() *v1alpha1.StateCommitment {
	if m != nil {
		return m.Commitment
	}
	return nil
}

type KnownAssets struct {
	Assets []*v1alpha1.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (m *KnownAssets) Reset()         { *m = KnownAssets{} }
func (m *KnownAssets) String() string { return proto.CompactTextString(m) }
func (*KnownAssets) ProtoMessage()    {}
func (*KnownAssets) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{6}
}
func (m *KnownAssets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KnownAssets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KnownAssets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KnownAssets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnownAssets.Merge(m, src)
}
func (m *KnownAssets) XXX_Size() int {
	return m.Size()
}
func (m *KnownAssets) XXX_DiscardUnknown() {
	xxx_messageInfo_KnownAssets.DiscardUnknown(m)
}

var xxx_messageInfo_KnownAssets proto.InternalMessageInfo

func (m *KnownAssets) GetAssets() []*v1alpha1.Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

// A spicy transaction ID
type NoteSource struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *NoteSource) Reset()         { *m = NoteSource{} }
func (m *NoteSource) String() string { return proto.CompactTextString(m) }
func (*NoteSource) ProtoMessage()    {}
func (*NoteSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{7}
}
func (m *NoteSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoteSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoteSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoteSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteSource.Merge(m, src)
}
func (m *NoteSource) XXX_Size() int {
	return m.Size()
}
func (m *NoteSource) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteSource.DiscardUnknown(m)
}

var xxx_messageInfo_NoteSource proto.InternalMessageInfo

func (m *NoteSource) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

// A NoteSource paired with the height at which the note was spent
type SpendInfo struct {
	NoteSource  *NoteSource `protobuf:"bytes,1,opt,name=note_source,json=noteSource,proto3" json:"note_source,omitempty"`
	SpendHeight uint64      `protobuf:"varint,2,opt,name=spend_height,json=spendHeight,proto3" json:"spend_height,omitempty"`
}

func (m *SpendInfo) Reset()         { *m = SpendInfo{} }
func (m *SpendInfo) String() string { return proto.CompactTextString(m) }
func (*SpendInfo) ProtoMessage()    {}
func (*SpendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{8}
}
func (m *SpendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendInfo.Merge(m, src)
}
func (m *SpendInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpendInfo proto.InternalMessageInfo

func (m *SpendInfo) GetNoteSource() *NoteSource {
	if m != nil {
		return m.NoteSource
	}
	return nil
}

func (m *SpendInfo) GetSpendHeight() uint64 {
	if m != nil {
		return m.SpendHeight
	}
	return 0
}

type GenesisAppState struct {
	ChainParams *ChainParameters              `protobuf:"bytes,1,opt,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
	Validators  []*v1alpha12.Validator        `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
	Allocations []*GenesisAppState_Allocation `protobuf:"bytes,3,rep,name=allocations,proto3" json:"allocations,omitempty"`
}

func (m *GenesisAppState) Reset()         { *m = GenesisAppState{} }
func (m *GenesisAppState) String() string { return proto.CompactTextString(m) }
func (*GenesisAppState) ProtoMessage()    {}
func (*GenesisAppState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{9}
}
func (m *GenesisAppState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAppState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAppState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAppState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAppState.Merge(m, src)
}
func (m *GenesisAppState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAppState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAppState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAppState proto.InternalMessageInfo

func (m *GenesisAppState) GetChainParams() *ChainParameters {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

func (m *GenesisAppState) GetValidators() []*v1alpha12.Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *GenesisAppState) GetAllocations() []*GenesisAppState_Allocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

type GenesisAppState_Allocation struct {
	Amount  uint64            `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom   string            `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Address *v1alpha1.Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GenesisAppState_Allocation) Reset()         { *m = GenesisAppState_Allocation{} }
func (m *GenesisAppState_Allocation) String() string { return proto.CompactTextString(m) }
func (*GenesisAppState_Allocation) ProtoMessage()    {}
func (*GenesisAppState_Allocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0cedb8b84ba3224, []int{9, 0}
}
func (m *GenesisAppState_Allocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAppState_Allocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAppState_Allocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAppState_Allocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAppState_Allocation.Merge(m, src)
}
func (m *GenesisAppState_Allocation) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAppState_Allocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAppState_Allocation.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAppState_Allocation proto.InternalMessageInfo

func (m *GenesisAppState_Allocation) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *GenesisAppState_Allocation) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *GenesisAppState_Allocation) GetAddress() *v1alpha1.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterType((*ChainParameters)(nil), "penumbra.core.chain.v1alpha1.ChainParameters")
	proto.RegisterType((*Ratio)(nil), "penumbra.core.chain.v1alpha1.Ratio")
	proto.RegisterType((*FmdParameters)(nil), "penumbra.core.chain.v1alpha1.FmdParameters")
	proto.RegisterType((*AssetInfo)(nil), "penumbra.core.chain.v1alpha1.AssetInfo")
	proto.RegisterType((*CompactBlock)(nil), "penumbra.core.chain.v1alpha1.CompactBlock")
	proto.RegisterType((*StatePayload)(nil), "penumbra.core.chain.v1alpha1.StatePayload")
	proto.RegisterType((*StatePayload_RolledUp)(nil), "penumbra.core.chain.v1alpha1.StatePayload.RolledUp")
	proto.RegisterType((*StatePayload_Note)(nil), "penumbra.core.chain.v1alpha1.StatePayload.Note")
	proto.RegisterType((*StatePayload_Swap)(nil), "penumbra.core.chain.v1alpha1.StatePayload.Swap")
	proto.RegisterType((*StatePayload_Position)(nil), "penumbra.core.chain.v1alpha1.StatePayload.Position")
	proto.RegisterType((*KnownAssets)(nil), "penumbra.core.chain.v1alpha1.KnownAssets")
	proto.RegisterType((*NoteSource)(nil), "penumbra.core.chain.v1alpha1.NoteSource")
	proto.RegisterType((*SpendInfo)(nil), "penumbra.core.chain.v1alpha1.SpendInfo")
	proto.RegisterType((*GenesisAppState)(nil), "penumbra.core.chain.v1alpha1.GenesisAppState")
	proto.RegisterType((*GenesisAppState_Allocation)(nil), "penumbra.core.chain.v1alpha1.GenesisAppState.Allocation")
}

func init() {
	proto.RegisterFile("penumbra/core/chain/v1alpha1/chain.proto", fileDescriptor_b0cedb8b84ba3224)
}

var fileDescriptor_b0cedb8b84ba3224 = []byte{
	// 1572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5b, 0x8f, 0x1b, 0x49,
	0x15, 0x1e, 0xcf, 0xd5, 0x73, 0x3c, 0x97, 0x50, 0x9b, 0x4b, 0xc7, 0x0c, 0x93, 0x89, 0xb5, 0x0b,
	0x4e, 0x56, 0xd8, 0xec, 0xec, 0x0a, 0x22, 0x2f, 0xa0, 0xcc, 0x25, 0x4c, 0xa2, 0x4d, 0xb2, 0x4e,
	0xcd, 0x12, 0x50, 0x14, 0xa9, 0x55, 0xee, 0x2e, 0xc7, 0xa5, 0x74, 0x57, 0x35, 0x5d, 0xd5, 0x33,
	0x19, 0x89, 0x47, 0x40, 0x3c, 0xf2, 0xc0, 0x2f, 0xe0, 0x91, 0x37, 0xfe, 0x05, 0x42, 0x42, 0xda,
	0x47, 0xb4, 0x4f, 0x68, 0xf2, 0xc6, 0xaf, 0x40, 0x75, 0xaa, 0x2f, 0xb6, 0x59, 0x3c, 0x3b, 0xab,
	0x3c, 0xd9, 0x75, 0xce, 0xf7, 0x7d, 0x75, 0xea, 0x54, 0xd5, 0x39, 0x5d, 0xd0, 0x4e, 0xb8, 0xcc,
	0xe2, 0x41, 0xca, 0xba, 0x81, 0x4a, 0x79, 0x37, 0x18, 0x31, 0x21, 0xbb, 0x27, 0x1f, 0xb1, 0x28,
	0x19, 0xb1, 0x8f, 0xdc, 0xb0, 0x93, 0xa4, 0xca, 0x28, 0xb2, 0x55, 0x20, 0x3b, 0x16, 0xd9, 0x71,
	0xae, 0x02, 0xd9, 0xbc, 0x3b, 0xa5, 0x93, 0x9e, 0x25, 0x46, 0x8d, 0x09, 0xe1, 0xd8, 0x29, 0x35,
	0xa7, 0xe6, 0xd4, 0x86, 0xbd, 0xe6, 0x15, 0x14, 0x87, 0x39, 0xf2, 0xfd, 0x49, 0x64, 0xc8, 0xdf,
	0x54, 0xb8, 0x90, 0xbf, 0x71, 0xa8, 0xd6, 0x3f, 0x57, 0x60, 0xf3, 0xc0, 0x86, 0xd3, 0x67, 0x29,
	0x8b, 0xb9, 0xe1, 0xa9, 0x26, 0x37, 0xa1, 0x8e, 0x11, 0xfa, 0x22, 0xf4, 0x6a, 0x3b, 0xb5, 0xf6,
	0x2a, 0x5d, 0xc1, 0xf1, 0xa3, 0x90, 0x7c, 0x00, 0x1b, 0x3c, 0x51, 0xc1, 0xc8, 0x0f, 0xb3, 0x94,
	0x19, 0xa1, 0xa4, 0x37, 0xbf, 0x53, 0x6b, 0x2f, 0xd2, 0x75, 0xb4, 0x1e, 0xe6, 0x46, 0x72, 0x07,
	0xae, 0x64, 0x72, 0xa0, 0x64, 0x28, 0xe4, 0x2b, 0x1f, 0x5d, 0xda, 0x5b, 0x40, 0xe0, 0x66, 0x69,
	0x7f, 0x80, 0x66, 0xf2, 0x09, 0x5c, 0x67, 0x81, 0x11, 0x27, 0xdc, 0x3f, 0x61, 0x91, 0x08, 0x99,
	0x51, 0xa9, 0x1f, 0x89, 0x58, 0x18, 0x6f, 0x11, 0x09, 0x57, 0x9d, 0xf7, 0x79, 0xe1, 0x7c, 0x6c,
	0x7d, 0xa4, 0x0d, 0x57, 0x06, 0x4c, 0x73, 0x3f, 0xe5, 0xa7, 0x2c, 0x0d, 0xfd, 0x94, 0x19, 0xee,
	0xad, 0x22, 0x7e, 0xc3, 0xda, 0x29, 0x9a, 0x29, 0x33, 0x9c, 0xdc, 0x87, 0x2d, 0x1d, 0x31, 0x3d,
	0xb2, 0x91, 0x24, 0x5c, 0xb2, 0xc8, 0x9c, 0xf9, 0xb1, 0xd0, 0x03, 0x3e, 0x62, 0x27, 0x42, 0xa5,
	0xde, 0x12, 0xb2, 0x9a, 0x05, 0xa6, 0xef, 0x20, 0x4f, 0x2a, 0x04, 0xe9, 0xc1, 0xcd, 0xff, 0x51,
	0x08, 0xd5, 0xa9, 0x34, 0x22, 0xe6, 0x1e, 0x20, 0xfd, 0xc6, 0x14, 0xfd, 0x30, 0x77, 0x93, 0x9f,
	0x80, 0xa7, 0xc5, 0x2b, 0xc9, 0x43, 0x7f, 0x10, 0xa9, 0xe0, 0xb5, 0xf6, 0x4f, 0x85, 0x0c, 0xd5,
	0xa9, 0x1f, 0x71, 0xe9, 0x35, 0x90, 0x7a, 0xcd, 0xf9, 0xf7, 0xd1, 0xfd, 0x2b, 0xf4, 0x3e, 0xe6,
	0x92, 0xec, 0xc2, 0xb5, 0x58, 0x68, 0x5d, 0x11, 0x63, 0xf6, 0x46, 0xc4, 0x59, 0xec, 0xad, 0x21,
	0xeb, 0x3d, 0xe7, 0x74, 0xac, 0x27, 0xce, 0x45, 0x6e, 0x41, 0x43, 0x0c, 0x02, 0x9f, 0x4b, 0x36,
	0x88, 0x78, 0xe8, 0x2d, 0xef, 0xd4, 0xda, 0x75, 0x0a, 0x62, 0x10, 0x3c, 0x70, 0x16, 0xf2, 0x00,
	0x6e, 0x09, 0x39, 0x50, 0x99, 0x0c, 0x7d, 0x11, 0xe8, 0xdd, 0x1f, 0xf9, 0x26, 0x65, 0x52, 0x0f,
	0x79, 0xaa, 0x4b, 0xd2, 0x0a, 0x92, 0xb6, 0x72, 0xd8, 0x23, 0x8b, 0xfa, 0xa2, 0x00, 0x15, 0x32,
	0x47, 0xb0, 0xa3, 0x32, 0x33, 0x5b, 0xa7, 0x8e, 0x3a, 0xdf, 0x2b, 0x70, 0x5f, 0x2f, 0xf4, 0x09,
	0x5c, 0x4f, 0x52, 0x95, 0x28, 0xcd, 0x22, 0xff, 0x44, 0x19, 0x9b, 0x60, 0xb7, 0x5a, 0xef, 0xaa,
	0xdb, 0xfb, 0xc2, 0xfb, 0x1c, 0x9d, 0x6e, 0xb5, 0xe4, 0xc7, 0x70, 0xa3, 0x64, 0x85, 0x3c, 0x51,
	0x5a, 0x18, 0x9f, 0xc5, 0x2a, 0x93, 0xc6, 0xbb, 0xe6, 0x52, 0x5a, 0xb8, 0x0f, 0x9d, 0x77, 0x0f,
	0x9d, 0x36, 0xa5, 0xd5, 0x6c, 0xf6, 0x38, 0xf9, 0xbf, 0xc9, 0x54, 0x9a, 0xc5, 0xde, 0x75, 0x3c,
	0xe3, 0xef, 0x95, 0x93, 0x59, 0xdf, 0x33, 0x74, 0x4d, 0xcc, 0x95, 0x30, 0xad, 0x7d, 0x33, 0x4a,
	0xb9, 0x1e, 0xa9, 0x28, 0xf4, 0x6e, 0x20, 0xab, 0x94, 0xec, 0x33, 0xad, 0xbf, 0x28, 0x9c, 0xe4,
	0x1e, 0x78, 0x25, 0x0f, 0xcf, 0xc6, 0x18, 0xd1, 0x43, 0x62, 0xb9, 0xf2, 0x63, 0xeb, 0xae, 0x98,
	0x3f, 0x83, 0xef, 0x86, 0x4c, 0xf9, 0x3a, 0xe1, 0x32, 0xf4, 0x0b, 0x4c, 0x95, 0xd7, 0x9b, 0x98,
	0x57, 0x2f, 0x64, 0xea, 0xd8, 0x22, 0xfa, 0x05, 0x20, 0x4f, 0x69, 0xeb, 0x08, 0x96, 0xa8, 0xbd,
	0x83, 0x64, 0x0b, 0x56, 0x65, 0x16, 0xf3, 0xd4, 0xde, 0x19, 0xbc, 0xc5, 0x8b, 0xb4, 0x32, 0x90,
	0x1d, 0x68, 0x84, 0x5c, 0xaa, 0x58, 0x48, 0xf4, 0xbb, 0x4b, 0x3c, 0x6e, 0x6a, 0x05, 0xb0, 0xfe,
	0x8b, 0x38, 0x1c, 0xab, 0x0a, 0x1f, 0xc0, 0x46, 0x92, 0xf2, 0x40, 0x68, 0xa1, 0xa4, 0x3f, 0x10,
	0x46, 0xa3, 0xea, 0x3a, 0x5d, 0x2f, 0xad, 0xfb, 0xc2, 0x68, 0xf2, 0x21, 0x10, 0xa6, 0x7d, 0x35,
	0x74, 0x3b, 0xe9, 0x8f, 0xb8, 0x78, 0x35, 0x32, 0xf9, 0x04, 0x9b, 0x4c, 0x7f, 0x3e, 0xc4, 0x5d,
	0x7c, 0x88, 0xe6, 0xd6, 0x57, 0x35, 0x58, 0xdd, 0xd3, 0x9a, 0x9b, 0x47, 0x72, 0xa8, 0xc8, 0x1e,
	0xd4, 0x99, 0x1d, 0x14, 0x75, 0xa7, 0xb1, 0xfb, 0xfd, 0xce, 0x54, 0xe1, 0x74, 0xa5, 0xb0, 0xa8,
	0x63, 0x1d, 0xc7, 0x0d, 0xe9, 0x0a, 0x73, 0x7f, 0x48, 0x0f, 0x96, 0x70, 0x11, 0x38, 0x61, 0x63,
	0xf7, 0xfd, 0x0b, 0xf8, 0x87, 0x16, 0x4b, 0x1d, 0xe5, 0xff, 0x44, 0xbe, 0xf0, 0xb5, 0x91, 0x93,
	0xdb, 0xb0, 0x66, 0x94, 0xb1, 0xbb, 0x9b, 0x25, 0x49, 0x74, 0x96, 0x17, 0xab, 0x06, 0xda, 0x8e,
	0xd1, 0xd4, 0xfa, 0xdd, 0x12, 0xac, 0x1d, 0xa8, 0x38, 0x61, 0x81, 0x41, 0x26, 0xb9, 0x0e, 0xcb,
	0xb9, 0xa8, 0xdb, 0x8f, 0x7c, 0x44, 0x9e, 0xc1, 0x86, 0x36, 0xcc, 0x70, 0x3f, 0x61, 0x67, 0x91,
	0x62, 0xa1, 0xf6, 0xe6, 0x77, 0x16, 0xda, 0x8d, 0xdd, 0xbb, 0x9d, 0x59, 0x6d, 0xa3, 0x73, 0x6c,
	0x39, 0x7d, 0x47, 0xa1, 0xeb, 0x7a, 0x6c, 0xa4, 0xc9, 0x43, 0x00, 0x99, 0x45, 0x91, 0x18, 0x0a,
	0x9e, 0xda, 0xd2, 0x6b, 0xe5, 0xda, 0x17, 0x24, 0xe3, 0x69, 0x41, 0xa0, 0x63, 0x5c, 0xab, 0xe4,
	0xf2, 0x91, 0x2a, 0xe5, 0x6a, 0x72, 0x63, 0xf7, 0xce, 0x05, 0x4a, 0x4f, 0x78, 0xfa, 0x3a, 0xe2,
	0x54, 0x29, 0x43, 0x57, 0x91, 0x6c, 0xff, 0x5a, 0x25, 0xd7, 0x3b, 0x50, 0xe9, 0x3b, 0x97, 0x56,
	0x42, 0x32, 0x2a, 0xdd, 0x81, 0x2b, 0xd5, 0xed, 0x32, 0x2c, 0x35, 0x3c, 0xc4, 0x8a, 0x51, 0xa7,
	0x9b, 0xe5, 0xad, 0x72, 0x66, 0x42, 0x61, 0x63, 0x18, 0x87, 0x7e, 0x52, 0x9e, 0x63, 0x2f, 0xc4,
	0x89, 0x3f, 0x9c, 0x9d, 0xdb, 0x89, 0xa3, 0x4f, 0xd7, 0x87, 0x13, 0x37, 0x81, 0xc2, 0x9a, 0x3e,
	0x65, 0x89, 0xaf, 0x32, 0x93, 0x64, 0x46, 0x7b, 0x4b, 0x98, 0xde, 0xee, 0x94, 0xa2, 0xed, 0xb1,
	0xa5, 0xde, 0x3e, 0x33, 0xc1, 0xe8, 0xf8, 0x94, 0x25, 0x9f, 0x23, 0xe7, 0x90, 0x19, 0x46, 0x1b,
	0xba, 0x1c, 0x6b, 0xf2, 0x6b, 0xb8, 0xe2, 0x7a, 0xee, 0x58, 0xa4, 0xcb, 0x18, 0xe9, 0x0f, 0x67,
	0x47, 0x3a, 0xd5, 0xbc, 0xe9, 0x66, 0x30, 0x69, 0x68, 0x7d, 0xb5, 0x0c, 0x6b, 0xe3, 0x47, 0x85,
	0x50, 0x58, 0x4d, 0x55, 0x14, 0xf1, 0xd0, 0xcf, 0x92, 0xfc, 0x9e, 0x7d, 0xfc, 0xcd, 0x4f, 0x5a,
	0x87, 0x22, 0xf7, 0x97, 0xc9, 0xc3, 0x39, 0x5a, 0x4f, 0xf3, 0xff, 0xe4, 0x01, 0x2c, 0x4a, 0x65,
	0x78, 0x7e, 0xed, 0xba, 0x97, 0x90, 0x7b, 0xaa, 0x0c, 0x7f, 0x38, 0x47, 0x91, 0x6e, 0x65, 0x6c,
	0x52, 0xf0, 0xd2, 0x5d, 0x4e, 0xc6, 0xe6, 0xd6, 0xca, 0x58, 0x3a, 0x79, 0x06, 0x75, 0x2c, 0xfc,
	0xf6, 0xfb, 0x64, 0xf1, 0xd2, 0x0b, 0xec, 0xe7, 0x54, 0xbb, 0xc0, 0x42, 0xa6, 0xf9, 0x02, 0xea,
	0xc5, 0xc2, 0xc9, 0x53, 0x80, 0x40, 0xc5, 0xb1, 0x30, 0x31, 0x97, 0x26, 0xcf, 0x60, 0xe7, 0x82,
	0x83, 0x8c, 0x33, 0x1c, 0x94, 0x2c, 0x3a, 0xa6, 0xd0, 0xfc, 0x63, 0x0d, 0x16, 0x6d, 0x1a, 0xc8,
	0x7d, 0x58, 0xd6, 0x2a, 0x4b, 0x03, 0x9e, 0x8b, 0xb6, 0x67, 0x47, 0x6d, 0x39, 0xc7, 0x88, 0xa7,
	0x39, 0x8f, 0xfc, 0x7c, 0x62, 0x1f, 0xee, 0x5e, 0x74, 0xe3, 0x55, 0x55, 0x40, 0x90, 0xd7, 0xfc,
	0x7d, 0x0d, 0x16, 0x6d, 0x2a, 0xdf, 0x41, 0x28, 0x9f, 0xe6, 0x7b, 0xe9, 0x42, 0xf9, 0xc1, 0xac,
	0xdb, 0x61, 0x67, 0x2c, 0xe3, 0xb0, 0xa4, 0xe6, 0x9f, 0x6b, 0x50, 0x2f, 0xf6, 0x81, 0xdc, 0x83,
	0xe5, 0x28, 0xf1, 0xe5, 0xd0, 0xe4, 0x5a, 0xb7, 0x67, 0x69, 0x3d, 0x4e, 0x9e, 0x0e, 0x0d, 0x5d,
	0x8a, 0xec, 0xcf, 0xbb, 0xde, 0xa9, 0xfd, 0x4d, 0x58, 0x9f, 0xa8, 0xd4, 0xad, 0xcf, 0xa0, 0xf1,
	0x99, 0x54, 0xa7, 0x12, 0x1b, 0x91, 0x26, 0x3f, 0x85, 0x65, 0xec, 0x44, 0xb6, 0x37, 0x2e, 0x7c,
	0x83, 0xfe, 0x83, 0x34, 0x9a, 0x73, 0x5a, 0x2d, 0x80, 0x2a, 0x8f, 0xe4, 0x2a, 0x2c, 0x09, 0x29,
	0xb9, 0x6b, 0xde, 0x6b, 0xd4, 0x0d, 0x5a, 0x67, 0xb0, 0x8a, 0x8d, 0x1f, 0x1b, 0xe6, 0x23, 0x68,
	0xd8, 0x5d, 0xf3, 0xbf, 0xe5, 0x4e, 0x81, 0xac, 0x66, 0xbb, 0x0d, 0x6b, 0xee, 0x93, 0x63, 0xa2,
	0x61, 0x37, 0xd0, 0x96, 0x37, 0xeb, 0x3f, 0x2c, 0xc0, 0xe6, 0x11, 0x97, 0x5c, 0x0b, 0xbd, 0x97,
	0x24, 0x98, 0x26, 0xd2, 0x87, 0xb5, 0xb1, 0xb2, 0xa5, 0xf3, 0x10, 0x2e, 0x59, 0xb2, 0x1a, 0x55,
	0xc9, 0xd2, 0xe4, 0x08, 0xa0, 0x7c, 0x08, 0x14, 0x8d, 0x70, 0xfa, 0xf0, 0xb8, 0x67, 0x4e, 0xa9,
	0x57, 0xbe, 0x0d, 0xe8, 0x18, 0x95, 0xbc, 0x80, 0x06, 0x8b, 0x22, 0x15, 0xe0, 0x8b, 0xa4, 0xe8,
	0x81, 0xf7, 0x66, 0x47, 0x36, 0xb5, 0xbc, 0xce, 0x5e, 0x29, 0x40, 0xc7, 0xc5, 0x9a, 0xbf, 0x05,
	0xa8, 0x5c, 0xb6, 0xaf, 0xe7, 0xdf, 0x9f, 0x79, 0x5f, 0x77, 0x23, 0xbb, 0x83, 0xd5, 0xc7, 0xc8,
	0x6a, 0xf1, 0x99, 0x71, 0x1f, 0x56, 0x58, 0x18, 0xa6, 0x5c, 0xeb, 0xbc, 0xcc, 0x5d, 0xf8, 0x91,
	0xe3, 0xd0, 0xb4, 0xa0, 0xed, 0xff, 0x6d, 0xfe, 0xef, 0xe7, 0xdb, 0xb5, 0x2f, 0xcf, 0xb7, 0x6b,
	0xff, 0x3e, 0xdf, 0xae, 0xfd, 0xe9, 0xed, 0xf6, 0xdc, 0x97, 0x6f, 0xb7, 0xe7, 0xfe, 0xf5, 0x76,
	0x7b, 0x0e, 0x76, 0x02, 0x15, 0xcf, 0x5c, 0xe2, 0x3e, 0xb8, 0xec, 0xdb, 0xc7, 0x5f, 0xbf, 0xf6,
	0xe2, 0xf9, 0x2b, 0x61, 0x46, 0xd9, 0xa0, 0x13, 0xa8, 0xb8, 0x1b, 0x28, 0x1d, 0x2b, 0xdd, 0x4d,
	0x79, 0xc4, 0xce, 0x78, 0xda, 0x3d, 0xd9, 0x2d, 0xff, 0xa2, 0x84, 0xee, 0xce, 0x7a, 0xee, 0x7e,
	0x8a, 0xc3, 0x62, 0xf4, 0x97, 0xf9, 0x85, 0xfe, 0xc1, 0xc1, 0x5f, 0xe7, 0xb7, 0xfa, 0x45, 0x28,
	0x07, 0x36, 0x14, 0x9c, 0xba, 0xf3, 0x3c, 0x07, 0xfd, 0xa3, 0x72, 0xbf, 0xb4, 0xee, 0x97, 0xe8,
	0x7e, 0x59, 0xb8, 0xcf, 0xe7, 0xdb, 0xb3, 0xdc, 0x2f, 0x8f, 0xfa, 0xfb, 0x4f, 0xb8, 0x61, 0x21,
	0x33, 0xec, 0x3f, 0xf3, 0xb7, 0x0a, 0x68, 0xaf, 0x67, 0xb1, 0xbd, 0x1e, 0x82, 0x7b, 0xbd, 0x02,
	0x3d, 0x58, 0xc6, 0xe7, 0xee, 0xc7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x31, 0xa7, 0xa5, 0x64,
	0xb4, 0x0f, 0x00, 0x00,
}

func (m *ChainParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DaoSpendProposalsEnabled {
		i--
		if m.DaoSpendProposalsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.ProposalSlashThreshold) > 0 {
		i -= len(m.ProposalSlashThreshold)
		copy(dAtA[i:], m.ProposalSlashThreshold)
		i = encodeVarintChain(dAtA, i, uint64(len(m.ProposalSlashThreshold)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ProposalPassThreshold) > 0 {
		i -= len(m.ProposalPassThreshold)
		copy(dAtA[i:], m.ProposalPassThreshold)
		i = encodeVarintChain(dAtA, i, uint64(len(m.ProposalPassThreshold)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.ProposalValidQuorum) > 0 {
		i -= len(m.ProposalValidQuorum)
		copy(dAtA[i:], m.ProposalValidQuorum)
		i = encodeVarintChain(dAtA, i, uint64(len(m.ProposalValidQuorum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.ProposalDepositAmount != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.ProposalDepositAmount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ProposalVotingBlocks != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.ProposalVotingBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.MissedBlocksMaximum != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.MissedBlocksMaximum))
		i--
		dAtA[i] = 0x60
	}
	if m.SignedBlocksWindowLen != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.SignedBlocksWindowLen))
		i--
		dAtA[i] = 0x58
	}
	if m.SlashingPenaltyDowntime != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.SlashingPenaltyDowntime))
		i--
		dAtA[i] = 0x50
	}
	if m.BaseRewardRate != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.BaseRewardRate))
		i--
		dAtA[i] = 0x48
	}
	if m.OutboundIcs20TransfersEnabled {
		i--
		if m.OutboundIcs20TransfersEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.InboundIcs20TransfersEnabled {
		i--
		if m.InboundIcs20TransfersEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IbcEnabled {
		i--
		if m.IbcEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SlashingPenaltyMisbehavior != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.SlashingPenaltyMisbehavior))
		i--
		dAtA[i] = 0x28
	}
	if m.ActiveValidatorLimit != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.ActiveValidatorLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.UnbondingEpochs != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.UnbondingEpochs))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochDuration != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.EpochDuration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintChain(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ratio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ratio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ratio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denominator != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.Denominator))
		i--
		dAtA[i] = 0x10
	}
	if m.Numerator != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.Numerator))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FmdParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FmdParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FmdParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AsOfBlockHeight != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.AsOfBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.PrecisionBits != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.PrecisionBits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSupply != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.TotalSupply))
		i--
		dAtA[i] = 0x20
	}
	if m.AsOfBlockHeight != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.AsOfBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Denom != nil {
		{
			size, err := m.Denom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompactBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FmdParameters != nil {
		{
			size, err := m.FmdParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.ProposalStarted {
		i--
		if m.ProposalStarted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.EpochRoot != nil {
		{
			size, err := m.EpochRoot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ChainParameters != nil {
		{
			size, err := m.ChainParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.SwapOutputs) > 0 {
		for iNdEx := len(m.SwapOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BlockRoot != nil {
		{
			size, err := m.BlockRoot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nullifiers) > 0 {
		for iNdEx := len(m.Nullifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nullifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StatePayloads) > 0 {
		for iNdEx := len(m.StatePayloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatePayloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatePayload != nil {
		{
			size := m.StatePayload.Size()
			i -= size
			if _, err := m.StatePayload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatePayload_RolledUp_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload_RolledUp_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RolledUp != nil {
		{
			size, err := m.RolledUp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *StatePayload_Note_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload_Note_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Note != nil {
		{
			size, err := m.Note.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *StatePayload_Swap_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload_Swap_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *StatePayload_Position_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload_Position_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *StatePayload_RolledUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatePayload_RolledUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload_RolledUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Commitment != nil {
		{
			size, err := m.Commitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatePayload_Note) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatePayload_Note) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload_Note) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Note != nil {
		{
			size, err := m.Note.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatePayload_Swap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatePayload_Swap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload_Swap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swap != nil {
		{
			size, err := m.Swap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatePayload_Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatePayload_Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatePayload_Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LpNft != nil {
		{
			size, err := m.LpNft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Commitment != nil {
		{
			size, err := m.Commitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KnownAssets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnownAssets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KnownAssets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoteSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoteSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoteSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintChain(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpendHeight != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.SpendHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.NoteSource != nil {
		{
			size, err := m.NoteSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAppState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAppState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAppState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Allocations) > 0 {
		for iNdEx := len(m.Allocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ChainParams != nil {
		{
			size, err := m.ChainParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAppState_Allocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAppState_Allocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAppState_Allocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintChain(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.EpochDuration != 0 {
		n += 1 + sovChain(uint64(m.EpochDuration))
	}
	if m.UnbondingEpochs != 0 {
		n += 1 + sovChain(uint64(m.UnbondingEpochs))
	}
	if m.ActiveValidatorLimit != 0 {
		n += 1 + sovChain(uint64(m.ActiveValidatorLimit))
	}
	if m.SlashingPenaltyMisbehavior != 0 {
		n += 1 + sovChain(uint64(m.SlashingPenaltyMisbehavior))
	}
	if m.IbcEnabled {
		n += 2
	}
	if m.InboundIcs20TransfersEnabled {
		n += 2
	}
	if m.OutboundIcs20TransfersEnabled {
		n += 2
	}
	if m.BaseRewardRate != 0 {
		n += 1 + sovChain(uint64(m.BaseRewardRate))
	}
	if m.SlashingPenaltyDowntime != 0 {
		n += 1 + sovChain(uint64(m.SlashingPenaltyDowntime))
	}
	if m.SignedBlocksWindowLen != 0 {
		n += 1 + sovChain(uint64(m.SignedBlocksWindowLen))
	}
	if m.MissedBlocksMaximum != 0 {
		n += 1 + sovChain(uint64(m.MissedBlocksMaximum))
	}
	if m.ProposalVotingBlocks != 0 {
		n += 2 + sovChain(uint64(m.ProposalVotingBlocks))
	}
	if m.ProposalDepositAmount != 0 {
		n += 2 + sovChain(uint64(m.ProposalDepositAmount))
	}
	l = len(m.ProposalValidQuorum)
	if l > 0 {
		n += 2 + l + sovChain(uint64(l))
	}
	l = len(m.ProposalPassThreshold)
	if l > 0 {
		n += 2 + l + sovChain(uint64(l))
	}
	l = len(m.ProposalSlashThreshold)
	if l > 0 {
		n += 2 + l + sovChain(uint64(l))
	}
	if m.DaoSpendProposalsEnabled {
		n += 3
	}
	return n
}

func (m *Ratio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Numerator != 0 {
		n += 1 + sovChain(uint64(m.Numerator))
	}
	if m.Denominator != 0 {
		n += 1 + sovChain(uint64(m.Denominator))
	}
	return n
}

func (m *FmdParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrecisionBits != 0 {
		n += 1 + sovChain(uint64(m.PrecisionBits))
	}
	if m.AsOfBlockHeight != 0 {
		n += 1 + sovChain(uint64(m.AsOfBlockHeight))
	}
	return n
}

func (m *AssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.Denom != nil {
		l = m.Denom.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.AsOfBlockHeight != 0 {
		n += 1 + sovChain(uint64(m.AsOfBlockHeight))
	}
	if m.TotalSupply != 0 {
		n += 1 + sovChain(uint64(m.TotalSupply))
	}
	return n
}

func (m *CompactBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovChain(uint64(m.Height))
	}
	if len(m.StatePayloads) > 0 {
		for _, e := range m.StatePayloads {
			l = e.Size()
			n += 1 + l + sovChain(uint64(l))
		}
	}
	if len(m.Nullifiers) > 0 {
		for _, e := range m.Nullifiers {
			l = e.Size()
			n += 1 + l + sovChain(uint64(l))
		}
	}
	if m.BlockRoot != nil {
		l = m.BlockRoot.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if len(m.SwapOutputs) > 0 {
		for _, e := range m.SwapOutputs {
			l = e.Size()
			n += 1 + l + sovChain(uint64(l))
		}
	}
	if m.ChainParameters != nil {
		l = m.ChainParameters.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.EpochRoot != nil {
		l = m.EpochRoot.Size()
		n += 2 + l + sovChain(uint64(l))
	}
	if m.ProposalStarted {
		n += 3
	}
	if m.FmdParameters != nil {
		l = m.FmdParameters.Size()
		n += 2 + l + sovChain(uint64(l))
	}
	return n
}

func (m *StatePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatePayload != nil {
		n += m.StatePayload.Size()
	}
	return n
}

func (m *StatePayload_RolledUp_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RolledUp != nil {
		l = m.RolledUp.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}
func (m *StatePayload_Note_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Note != nil {
		l = m.Note.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}
func (m *StatePayload_Swap_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}
func (m *StatePayload_Position_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}
func (m *StatePayload_RolledUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commitment != nil {
		l = m.Commitment.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func (m *StatePayload_Note) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.Note != nil {
		l = m.Note.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func (m *StatePayload_Swap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.Swap != nil {
		l = m.Swap.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func (m *StatePayload_Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commitment != nil {
		l = m.Commitment.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.LpNft != nil {
		l = m.LpNft.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func (m *KnownAssets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovChain(uint64(l))
		}
	}
	return n
}

func (m *NoteSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func (m *SpendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteSource != nil {
		l = m.NoteSource.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.SpendHeight != 0 {
		n += 1 + sovChain(uint64(m.SpendHeight))
	}
	return n
}

func (m *GenesisAppState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainParams != nil {
		l = m.ChainParams.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovChain(uint64(l))
		}
	}
	if len(m.Allocations) > 0 {
		for _, e := range m.Allocations {
			l = e.Size()
			n += 1 + l + sovChain(uint64(l))
		}
	}
	return n
}

func (m *GenesisAppState_Allocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovChain(uint64(m.Amount))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func sovChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChain(x uint64) (n int) {
	return sovChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDuration", wireType)
			}
			m.EpochDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingEpochs", wireType)
			}
			m.UnbondingEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveValidatorLimit", wireType)
			}
			m.ActiveValidatorLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveValidatorLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingPenaltyMisbehavior", wireType)
			}
			m.SlashingPenaltyMisbehavior = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashingPenaltyMisbehavior |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IbcEnabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundIcs20TransfersEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InboundIcs20TransfersEnabled = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundIcs20TransfersEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutboundIcs20TransfersEnabled = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRewardRate", wireType)
			}
			m.BaseRewardRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseRewardRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingPenaltyDowntime", wireType)
			}
			m.SlashingPenaltyDowntime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashingPenaltyDowntime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBlocksWindowLen", wireType)
			}
			m.SignedBlocksWindowLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBlocksWindowLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedBlocksMaximum", wireType)
			}
			m.MissedBlocksMaximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedBlocksMaximum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalVotingBlocks", wireType)
			}
			m.ProposalVotingBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalVotingBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalDepositAmount", wireType)
			}
			m.ProposalDepositAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalDepositAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalValidQuorum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalValidQuorum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPassThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalPassThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalSlashThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalSlashThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoSpendProposalsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DaoSpendProposalsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ratio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ratio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ratio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			m.Numerator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numerator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			m.Denominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Denominator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FmdParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FmdParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FmdParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrecisionBits", wireType)
			}
			m.PrecisionBits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrecisionBits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOfBlockHeight", wireType)
			}
			m.AsOfBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOfBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &v1alpha1.AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Denom == nil {
				m.Denom = &v1alpha1.Denom{}
			}
			if err := m.Denom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOfBlockHeight", wireType)
			}
			m.AsOfBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOfBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			m.TotalSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatePayloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatePayloads = append(m.StatePayloads, &StatePayload{})
			if err := m.StatePayloads[len(m.StatePayloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nullifiers = append(m.Nullifiers, &v1alpha1.Nullifier{})
			if err := m.Nullifiers[len(m.Nullifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockRoot == nil {
				m.BlockRoot = &v1alpha1.MerkleRoot{}
			}
			if err := m.BlockRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapOutputs = append(m.SwapOutputs, &v1alpha11.BatchSwapOutputData{})
			if err := m.SwapOutputs[len(m.SwapOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParameters == nil {
				m.ChainParameters = &ChainParameters{}
			}
			if err := m.ChainParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochRoot == nil {
				m.EpochRoot = &v1alpha1.MerkleRoot{}
			}
			if err := m.EpochRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalStarted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProposalStarted = bool(v != 0)
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FmdParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FmdParameters == nil {
				m.FmdParameters = &FmdParameters{}
			}
			if err := m.FmdParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RolledUp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StatePayload_RolledUp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StatePayload = &StatePayload_RolledUp_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StatePayload_Note{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StatePayload = &StatePayload_Note_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StatePayload_Swap{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StatePayload = &StatePayload_Swap_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StatePayload_Position{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StatePayload = &StatePayload_Position_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatePayload_RolledUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolledUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolledUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitment == nil {
				m.Commitment = &v1alpha1.StateCommitment{}
			}
			if err := m.Commitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatePayload_Note) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Note: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Note: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &NoteSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Note == nil {
				m.Note = &v1alpha1.NotePayload{}
			}
			if err := m.Note.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatePayload_Swap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Swap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Swap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &NoteSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swap == nil {
				m.Swap = &v1alpha11.SwapPayload{}
			}
			if err := m.Swap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatePayload_Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitment == nil {
				m.Commitment = &v1alpha1.StateCommitment{}
			}
			if err := m.Commitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpNft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LpNft == nil {
				m.LpNft = &v1alpha11.LpNft{}
			}
			if err := m.LpNft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnownAssets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnownAssets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnownAssets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &v1alpha1.Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoteSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoteSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoteSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteSource == nil {
				m.NoteSource = &NoteSource{}
			}
			if err := m.NoteSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendHeight", wireType)
			}
			m.SpendHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpendHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisAppState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisAppState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisAppState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParams == nil {
				m.ChainParams = &ChainParameters{}
			}
			if err := m.ChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &v1alpha12.Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocations = append(m.Allocations, &GenesisAppState_Allocation{})
			if err := m.Allocations[len(m.Allocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisAppState_Allocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Allocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Allocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v1alpha1.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChain = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/txhash/v1alpha1/txhash.proto

package txhashv1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The hash of a Penumbra transaction's _effecting data_, describing the effects
// of the transaction on the chain state.
type EffectHash struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *EffectHash) Reset()         { *m = EffectHash{} }
func (m *EffectHash) String() string { return proto.CompactTextString(m) }
func (*EffectHash) ProtoMessage()    {}
func (*EffectHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_be98fc5f1d1ce16e, []int{0}
}
func (m *EffectHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectHash.Merge(m, src)
}
func (m *EffectHash) XXX_Size() int {
	return m.Size()
}
func (m *EffectHash) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectHash.DiscardUnknown(m)
}

var xxx_messageInfo_EffectHash proto.InternalMessageInfo

func (m *EffectHash) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

// A transaction ID, the Sha256 hash of a transaction.
//
// This is the hash of the plain byte encoding, used by Tendermint.
type TransactionId struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *TransactionId) Reset()         { *m = TransactionId{} }
func (m *TransactionId) String() string { return proto.CompactTextString(m) }
func (*TransactionId) ProtoMessage()    {}
func (*TransactionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_be98fc5f1d1ce16e, []int{1}
}
func (m *TransactionId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionId.Merge(m, src)
}
func (m *TransactionId) XXX_Size() int {
	return m.Size()
}
func (m *TransactionId) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionId.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionId proto.InternalMessageInfo

func (m *TransactionId) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

func init() {
	proto.RegisterType((*EffectHash)(nil), "penumbra.core.txhash.v1alpha1.EffectHash")
	proto.RegisterType((*TransactionId)(nil), "penumbra.core.txhash.v1alpha1.TransactionId")
}

func init() {
	proto.RegisterFile("penumbra/core/txhash/v1alpha1/txhash.proto", fileDescriptor_be98fc5f1d1ce16e)
}

var fileDescriptor_be98fc5f1d1ce16e = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x48, 0xcd, 0x2b,
	0xcd, 0x4d, 0x2a, 0x4a, 0xd4, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0xa9, 0xc8, 0x48, 0x2c, 0xce,
	0xd0, 0x2f, 0x33, 0x4c, 0xcc, 0x29, 0xc8, 0x48, 0x34, 0x84, 0xf2, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0x64, 0x61, 0x6a, 0xf5, 0x40, 0x6a, 0xf5, 0xa0, 0x72, 0x30, 0xb5, 0x4a, 0x4a, 0x5c,
	0x5c, 0xae, 0x69, 0x69, 0xa9, 0xc9, 0x25, 0x1e, 0x89, 0xc5, 0x19, 0x42, 0x22, 0x5c, 0xac, 0x99,
	0x79, 0x79, 0xa9, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x10, 0x8e, 0x92, 0x2a, 0x17,
	0x6f, 0x48, 0x51, 0x62, 0x5e, 0x71, 0x62, 0x72, 0x49, 0x66, 0x7e, 0x9e, 0x67, 0x0a, 0x76, 0x65,
	0x4e, 0x3b, 0x99, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6,
	0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x81, 0x4b, 0x31, 0x39,
	0x3f, 0x57, 0x0f, 0xaf, 0x43, 0x9c, 0xb8, 0x43, 0xc0, 0x02, 0x01, 0x20, 0x47, 0x07, 0x30, 0x46,
	0x45, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x27, 0xe7, 0x17, 0xe7,
	0xe6, 0x17, 0xeb, 0x17, 0xa5, 0xe6, 0x24, 0x56, 0xa6, 0x16, 0xe9, 0x97, 0x19, 0xc1, 0x99, 0xc9,
	0x19, 0x89, 0x99, 0x79, 0xc5, 0xfa, 0x78, 0x83, 0xc3, 0x1a, 0xc2, 0x87, 0x71, 0x17, 0x31, 0x31,
	0x07, 0x38, 0x87, 0xac, 0x62, 0x92, 0x0d, 0x80, 0x39, 0xc7, 0x19, 0xe4, 0x1c, 0x88, 0xed, 0x7a,
	0x61, 0x50, 0x55, 0xa7, 0x10, 0xf2, 0x31, 0x20, 0xf9, 0x18, 0x88, 0x7c, 0x0c, 0x4c, 0xfe, 0x11,
	0x93, 0x26, 0x5e, 0xf9, 0x18, 0xf7, 0x00, 0x27, 0xdf, 0xd4, 0x92, 0xc4, 0x94, 0xc4, 0x92, 0xc4,
	0x57, 0x4c, 0x0a, 0x30, 0xb5, 0x56, 0x56, 0x20, 0xc5, 0x56, 0x56, 0x10, 0xd5, 0x56, 0x56, 0x30,
	0xe5, 0x49, 0x6c, 0xe0, 0xc8, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x59, 0x73, 0x13, 0x3f,
	0xda, 0x01, 0x00, 0x00,
}

func (m *EffectHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintTxhash(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintTxhash(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxhash(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxhash(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EffectHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovTxhash(uint64(l))
	}
	return n
}

func (m *TransactionId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovTxhash(uint64(l))
	}
	return n
}

func sovTxhash(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxhash(x uint64) (n int) {
	return sovTxhash(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EffectHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxhash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxhash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxhash
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxhash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxhash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxhash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxhash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxhash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxhash
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxhash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxhash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxhash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxhash(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxhash
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxhash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxhash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxhash
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxhash
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxhash
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxhash        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxhash          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxhash = fmt.Errorf("proto: unexpected end of group")
)

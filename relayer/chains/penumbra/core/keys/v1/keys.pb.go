// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/keys/v1/keys.proto

package keysv1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A Penumbra address. An address in Penumbra is a Bech32m-encoded
// string, with the human-readable prefix (HRP) `penumbrav2t`.
type Address struct {
	// The bytes of the address. Must be represented as a series of
	// `uint8` (i.e. values 0 through 255), with a length of 80 elements.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// Alternatively, a Bech32m-encoded string representation of the `inner`
	// bytes.
	//
	// NOTE: implementations are not required to support parsing this field.
	// Implementations should prefer to encode the bytes in all messages they
	// produce. Implementations must not accept messages with both `inner` and
	// `alt_bech32m` set.
	AltBech32M string `protobuf:"bytes,2,opt,name=alt_bech32m,json=altBech32m,proto3" json:"alt_bech32m,omitempty"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{0}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (m *Address) GetAltBech32M() string {
	if m != nil {
		return m.AltBech32M
	}
	return ""
}

type AddressView struct {
	// Types that are valid to be assigned to AddressView:
	//
	//	*AddressView_Decoded_
	//	*AddressView_Opaque_
	AddressView isAddressView_AddressView `protobuf_oneof:"address_view"`
}

func (m *AddressView) Reset()         { *m = AddressView{} }
func (m *AddressView) String() string { return proto.CompactTextString(m) }
func (*AddressView) ProtoMessage()    {}
func (*AddressView) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{1}
}
func (m *AddressView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressView.Merge(m, src)
}
func (m *AddressView) XXX_Size() int {
	return m.Size()
}
func (m *AddressView) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressView.DiscardUnknown(m)
}

var xxx_messageInfo_AddressView proto.InternalMessageInfo

type isAddressView_AddressView interface {
	isAddressView_AddressView()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AddressView_Decoded_ struct {
	Decoded *AddressView_Decoded `protobuf:"bytes,1,opt,name=decoded,proto3,oneof" json:"decoded,omitempty"`
}
type AddressView_Opaque_ struct {
	Opaque *AddressView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof" json:"opaque,omitempty"`
}

func (*AddressView_Decoded_) isAddressView_AddressView() {}
func (*AddressView_Opaque_) isAddressView_AddressView()  {}

func (m *AddressView) GetAddressView() isAddressView_AddressView {
	if m != nil {
		return m.AddressView
	}
	return nil
}

func (m *AddressView) GetDecoded() *AddressView_Decoded {
	if x, ok := m.GetAddressView().(*AddressView_Decoded_); ok {
		return x.Decoded
	}
	return nil
}

func (m *AddressView) GetOpaque() *AddressView_Opaque {
	if x, ok := m.GetAddressView().(*AddressView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AddressView) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AddressView_Decoded_)(nil),
		(*AddressView_Opaque_)(nil),
	}
}

// A decoded address, with information about the address index and wallet ID visible.
type AddressView_Decoded struct {
	Address  *Address      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Index    *AddressIndex `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	WalletId *WalletId     `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (m *AddressView_Decoded) Reset()         { *m = AddressView_Decoded{} }
func (m *AddressView_Decoded) String() string { return proto.CompactTextString(m) }
func (*AddressView_Decoded) ProtoMessage()    {}
func (*AddressView_Decoded) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{1, 0}
}
func (m *AddressView_Decoded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressView_Decoded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressView_Decoded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressView_Decoded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressView_Decoded.Merge(m, src)
}
func (m *AddressView_Decoded) XXX_Size() int {
	return m.Size()
}
func (m *AddressView_Decoded) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressView_Decoded.DiscardUnknown(m)
}

var xxx_messageInfo_AddressView_Decoded proto.InternalMessageInfo

func (m *AddressView_Decoded) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AddressView_Decoded) GetIndex() *AddressIndex {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *AddressView_Decoded) GetWalletId() *WalletId {
	if m != nil {
		return m.WalletId
	}
	return nil
}

// An opaque address, with no information about the address index or wallet ID visible.
type AddressView_Opaque struct {
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AddressView_Opaque) Reset()         { *m = AddressView_Opaque{} }
func (m *AddressView_Opaque) String() string { return proto.CompactTextString(m) }
func (*AddressView_Opaque) ProtoMessage()    {}
func (*AddressView_Opaque) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{1, 1}
}
func (m *AddressView_Opaque) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressView_Opaque) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressView_Opaque.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressView_Opaque) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressView_Opaque.Merge(m, src)
}
func (m *AddressView_Opaque) XXX_Size() int {
	return m.Size()
}
func (m *AddressView_Opaque) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressView_Opaque.DiscardUnknown(m)
}

var xxx_messageInfo_AddressView_Opaque proto.InternalMessageInfo

func (m *AddressView_Opaque) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type PayloadKey struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *PayloadKey) Reset()         { *m = PayloadKey{} }
func (m *PayloadKey) String() string { return proto.CompactTextString(m) }
func (*PayloadKey) ProtoMessage()    {}
func (*PayloadKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{2}
}
func (m *PayloadKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayloadKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayloadKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayloadKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadKey.Merge(m, src)
}
func (m *PayloadKey) XXX_Size() int {
	return m.Size()
}
func (m *PayloadKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadKey.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadKey proto.InternalMessageInfo

func (m *PayloadKey) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type SpendKey struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *SpendKey) Reset()         { *m = SpendKey{} }
func (m *SpendKey) String() string { return proto.CompactTextString(m) }
func (*SpendKey) ProtoMessage()    {}
func (*SpendKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{3}
}
func (m *SpendKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendKey.Merge(m, src)
}
func (m *SpendKey) XXX_Size() int {
	return m.Size()
}
func (m *SpendKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendKey.DiscardUnknown(m)
}

var xxx_messageInfo_SpendKey proto.InternalMessageInfo

func (m *SpendKey) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type FullViewingKey struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *FullViewingKey) Reset()         { *m = FullViewingKey{} }
func (m *FullViewingKey) String() string { return proto.CompactTextString(m) }
func (*FullViewingKey) ProtoMessage()    {}
func (*FullViewingKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{4}
}
func (m *FullViewingKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullViewingKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullViewingKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullViewingKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullViewingKey.Merge(m, src)
}
func (m *FullViewingKey) XXX_Size() int {
	return m.Size()
}
func (m *FullViewingKey) XXX_DiscardUnknown() {
	xxx_messageInfo_FullViewingKey.DiscardUnknown(m)
}

var xxx_messageInfo_FullViewingKey proto.InternalMessageInfo

func (m *FullViewingKey) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type WalletId struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *WalletId) Reset()         { *m = WalletId{} }
func (m *WalletId) String() string { return proto.CompactTextString(m) }
func (*WalletId) ProtoMessage()    {}
func (*WalletId) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{5}
}
func (m *WalletId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletId.Merge(m, src)
}
func (m *WalletId) XXX_Size() int {
	return m.Size()
}
func (m *WalletId) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletId.DiscardUnknown(m)
}

var xxx_messageInfo_WalletId proto.InternalMessageInfo

func (m *WalletId) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type Diversifier struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *Diversifier) Reset()         { *m = Diversifier{} }
func (m *Diversifier) String() string { return proto.CompactTextString(m) }
func (*Diversifier) ProtoMessage()    {}
func (*Diversifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{6}
}
func (m *Diversifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Diversifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Diversifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Diversifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Diversifier.Merge(m, src)
}
func (m *Diversifier) XXX_Size() int {
	return m.Size()
}
func (m *Diversifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Diversifier.DiscardUnknown(m)
}

var xxx_messageInfo_Diversifier proto.InternalMessageInfo

func (m *Diversifier) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type AddressIndex struct {
	Account    uint32 `protobuf:"varint,2,opt,name=account,proto3" json:"account,omitempty"`
	Randomizer []byte `protobuf:"bytes,3,opt,name=randomizer,proto3" json:"randomizer,omitempty"`
}

func (m *AddressIndex) Reset()         { *m = AddressIndex{} }
func (m *AddressIndex) String() string { return proto.CompactTextString(m) }
func (*AddressIndex) ProtoMessage()    {}
func (*AddressIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{7}
}
func (m *AddressIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressIndex.Merge(m, src)
}
func (m *AddressIndex) XXX_Size() int {
	return m.Size()
}
func (m *AddressIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressIndex.DiscardUnknown(m)
}

var xxx_messageInfo_AddressIndex proto.InternalMessageInfo

func (m *AddressIndex) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *AddressIndex) GetRandomizer() []byte {
	if m != nil {
		return m.Randomizer
	}
	return nil
}

// A validator's identity key (decaf377-rdsa spendauth verification key).
type IdentityKey struct {
	Ik []byte `protobuf:"bytes,1,opt,name=ik,proto3" json:"ik,omitempty"`
}

func (m *IdentityKey) Reset()         { *m = IdentityKey{} }
func (m *IdentityKey) String() string { return proto.CompactTextString(m) }
func (*IdentityKey) ProtoMessage()    {}
func (*IdentityKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{8}
}
func (m *IdentityKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityKey.Merge(m, src)
}
func (m *IdentityKey) XXX_Size() int {
	return m.Size()
}
func (m *IdentityKey) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityKey.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityKey proto.InternalMessageInfo

func (m *IdentityKey) GetIk() []byte {
	if m != nil {
		return m.Ik
	}
	return nil
}

// A validator's governance key (decaf377-rdsa spendauth verification key).
type GovernanceKey struct {
	Gk []byte `protobuf:"bytes,1,opt,name=gk,proto3" json:"gk,omitempty"`
}

func (m *GovernanceKey) Reset()         { *m = GovernanceKey{} }
func (m *GovernanceKey) String() string { return proto.CompactTextString(m) }
func (*GovernanceKey) ProtoMessage()    {}
func (*GovernanceKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{9}
}
func (m *GovernanceKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovernanceKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovernanceKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovernanceKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernanceKey.Merge(m, src)
}
func (m *GovernanceKey) XXX_Size() int {
	return m.Size()
}
func (m *GovernanceKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernanceKey.DiscardUnknown(m)
}

var xxx_messageInfo_GovernanceKey proto.InternalMessageInfo

func (m *GovernanceKey) GetGk() []byte {
	if m != nil {
		return m.Gk
	}
	return nil
}

type ConsensusKey struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *ConsensusKey) Reset()         { *m = ConsensusKey{} }
func (m *ConsensusKey) String() string { return proto.CompactTextString(m) }
func (*ConsensusKey) ProtoMessage()    {}
func (*ConsensusKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_171d3f5d66e6613e, []int{10}
}
func (m *ConsensusKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusKey.Merge(m, src)
}
func (m *ConsensusKey) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusKey.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusKey proto.InternalMessageInfo

func (m *ConsensusKey) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

func init() {
	proto.RegisterType((*Address)(nil), "penumbra.core.keys.v1.Address")
	proto.RegisterType((*AddressView)(nil), "penumbra.core.keys.v1.AddressView")
	proto.RegisterType((*AddressView_Decoded)(nil), "penumbra.core.keys.v1.AddressView.Decoded")
	proto.RegisterType((*AddressView_Opaque)(nil), "penumbra.core.keys.v1.AddressView.Opaque")
	proto.RegisterType((*PayloadKey)(nil), "penumbra.core.keys.v1.PayloadKey")
	proto.RegisterType((*SpendKey)(nil), "penumbra.core.keys.v1.SpendKey")
	proto.RegisterType((*FullViewingKey)(nil), "penumbra.core.keys.v1.FullViewingKey")
	proto.RegisterType((*WalletId)(nil), "penumbra.core.keys.v1.WalletId")
	proto.RegisterType((*Diversifier)(nil), "penumbra.core.keys.v1.Diversifier")
	proto.RegisterType((*AddressIndex)(nil), "penumbra.core.keys.v1.AddressIndex")
	proto.RegisterType((*IdentityKey)(nil), "penumbra.core.keys.v1.IdentityKey")
	proto.RegisterType((*GovernanceKey)(nil), "penumbra.core.keys.v1.GovernanceKey")
	proto.RegisterType((*ConsensusKey)(nil), "penumbra.core.keys.v1.ConsensusKey")
}

func init() { proto.RegisterFile("penumbra/core/keys/v1/keys.proto", fileDescriptor_171d3f5d66e6613e) }

var fileDescriptor_171d3f5d66e6613e = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0x63, 0x57, 0xbf, 0xa6, 0x9d, 0xa4, 0x3d, 0x58, 0xbf, 0x4a, 0xa1, 0x12, 0x6e, 0x70,
	0x11, 0x2a, 0x1c, 0x6c, 0x25, 0xbd, 0x40, 0xe0, 0x00, 0x49, 0xd5, 0xa6, 0xaa, 0x10, 0x91, 0x91,
	0x82, 0x84, 0x22, 0x55, 0x1b, 0xef, 0x90, 0xae, 0xe2, 0xec, 0x86, 0xf5, 0x9f, 0x60, 0x9e, 0x82,
	0x67, 0xe0, 0x88, 0xc4, 0x1b, 0xf0, 0x00, 0x88, 0x53, 0x8f, 0x1c, 0x51, 0x7a, 0xe3, 0x25, 0x40,
	0xeb, 0x3f, 0xa5, 0x87, 0x24, 0x42, 0x9c, 0x76, 0x77, 0xfc, 0xf9, 0xce, 0x77, 0x76, 0x46, 0x6b,
	0xa8, 0x4f, 0x91, 0x47, 0x93, 0xa1, 0x24, 0x8e, 0x27, 0x24, 0x3a, 0x63, 0x4c, 0x02, 0x27, 0x6e,
	0xa4, 0xab, 0x3d, 0x95, 0x22, 0x14, 0xc6, 0x4e, 0x41, 0xd8, 0x8a, 0xb0, 0xd3, 0x2f, 0x71, 0xc3,
	0x7a, 0x0a, 0xe5, 0x67, 0x94, 0x4a, 0x0c, 0x02, 0xe3, 0x7f, 0xf8, 0x8f, 0x71, 0x8e, 0xb2, 0xa6,
	0xd5, 0xb5, 0x83, 0xaa, 0x9b, 0x1d, 0x8c, 0x3d, 0xa8, 0x10, 0x3f, 0x3c, 0x1f, 0xa2, 0x77, 0x71,
	0xd8, 0x9c, 0xd4, 0xf4, 0xba, 0x76, 0xb0, 0xe9, 0x02, 0xf1, 0xc3, 0x76, 0x16, 0xb1, 0x3e, 0xaf,
	0x41, 0x25, 0x4f, 0xd1, 0x67, 0x38, 0x33, 0x8e, 0xa1, 0x4c, 0xd1, 0x13, 0x14, 0x69, 0x9a, 0xa8,
	0xd2, 0x7c, 0x60, 0x2f, 0xb4, 0xb6, 0x6f, 0x88, 0xec, 0xa3, 0x4c, 0xd1, 0x2d, 0xb9, 0x85, 0xd8,
	0xe8, 0xc0, 0xba, 0x98, 0x92, 0xb7, 0x11, 0xa6, 0x9e, 0x95, 0xe6, 0xfd, 0xbf, 0x48, 0xf3, 0x22,
	0x15, 0x74, 0x4b, 0x6e, 0x2e, 0xdd, 0xfd, 0xa2, 0x41, 0x39, 0xcf, 0x6d, 0x3c, 0x84, 0x32, 0xc9,
	0xd8, 0xbc, 0x30, 0x73, 0x75, 0x46, 0xb7, 0xc0, 0x8d, 0x47, 0xaa, 0x33, 0x14, 0xdf, 0xe5, 0x95,
	0xec, 0xaf, 0xd6, 0x9d, 0x2a, 0xd4, 0xcd, 0x14, 0xc6, 0x13, 0xd8, 0x9c, 0x11, 0xdf, 0xc7, 0xf0,
	0x9c, 0xd1, 0xda, 0x5a, 0x2a, 0xdf, 0x5b, 0x22, 0x7f, 0x95, 0x72, 0xa7, 0xd4, 0xdd, 0x98, 0xe5,
	0xbb, 0xdd, 0x36, 0xac, 0x67, 0x57, 0xfa, 0xf7, 0xe2, 0xdb, 0xdb, 0x50, 0xcd, 0xb7, 0xe7, 0x31,
	0xc3, 0x99, 0x65, 0x01, 0xf4, 0x48, 0xe2, 0x0b, 0x42, 0xcf, 0x30, 0x59, 0x3c, 0x74, 0xab, 0x0e,
	0x1b, 0x2f, 0xa7, 0xc8, 0x57, 0x10, 0xf7, 0x60, 0xfb, 0x38, 0xf2, 0x7d, 0xd5, 0x75, 0xc6, 0x47,
	0x2b, 0x33, 0x15, 0xf7, 0x5a, 0x42, 0xec, 0x43, 0xe5, 0x88, 0xc5, 0x28, 0x03, 0xf6, 0x86, 0xa1,
	0x5c, 0x02, 0x75, 0xa1, 0x7a, 0xb3, 0xbb, 0x46, 0x0d, 0xca, 0xc4, 0xf3, 0x44, 0xc4, 0xc3, 0x74,
	0x26, 0x5b, 0x6e, 0x71, 0x34, 0x4c, 0x00, 0x49, 0x38, 0x15, 0x13, 0xf6, 0x1e, 0x65, 0xda, 0xf1,
	0xaa, 0x7b, 0x23, 0x62, 0xdd, 0x86, 0xca, 0x29, 0x45, 0x1e, 0xb2, 0x30, 0x51, 0x55, 0x6f, 0x83,
	0xce, 0xc6, 0xb9, 0x97, 0xce, 0xc6, 0xd6, 0x1e, 0x6c, 0x9d, 0x88, 0x18, 0x25, 0x27, 0xdc, 0xc3,
	0x1c, 0x18, 0x5d, 0x03, 0xa3, 0xb1, 0x75, 0x17, 0xaa, 0x1d, 0xc1, 0x03, 0xe4, 0x41, 0x14, 0x2c,
	0xbd, 0x76, 0xfb, 0x97, 0xf6, 0x75, 0x6e, 0x6a, 0x97, 0x73, 0x53, 0xfb, 0x31, 0x37, 0xb5, 0x0f,
	0x57, 0x66, 0xe9, 0xf2, 0xca, 0x2c, 0x7d, 0xbf, 0x32, 0x4b, 0x70, 0xcb, 0x13, 0x93, 0xc5, 0xb3,
	0x6b, 0x6f, 0x9e, 0x61, 0x12, 0xf4, 0xd4, 0x73, 0xed, 0x69, 0xaf, 0xbb, 0x23, 0x16, 0x5e, 0x44,
	0x43, 0xdb, 0x13, 0x13, 0xc7, 0x13, 0xc1, 0x44, 0x04, 0x8e, 0x44, 0x9f, 0x24, 0x28, 0x9d, 0xb8,
	0x79, 0xbd, 0xf5, 0x2e, 0x08, 0xe3, 0x81, 0xb3, 0xf0, 0xf9, 0x3f, 0x56, 0x6b, 0xdc, 0xf8, 0xa8,
	0xaf, 0xf5, 0x3a, 0x67, 0x9f, 0xf4, 0x9d, 0x5e, 0x61, 0xda, 0x51, 0xa6, 0xca, 0xcb, 0xee, 0x37,
	0xbe, 0xfd, 0x89, 0x0f, 0x54, 0x7c, 0xa0, 0xe2, 0x83, 0x7e, 0x63, 0xae, 0xdf, 0x59, 0x18, 0x1f,
	0x9c, 0xf4, 0xda, 0xcf, 0x31, 0x24, 0x94, 0x84, 0xe4, 0xa7, 0x5e, 0x2b, 0x98, 0x56, 0x4b, 0x41,
	0xad, 0x96, 0xa2, 0x5a, 0xad, 0x7e, 0x63, 0xb8, 0x9e, 0xfe, 0x76, 0x0e, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xfb, 0x78, 0x03, 0x9a, 0x04, 0x00, 0x00,
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AltBech32M) > 0 {
		i -= len(m.AltBech32M)
		copy(dAtA[i:], m.AltBech32M)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.AltBech32M)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressView != nil {
		{
			size := m.AddressView.Size()
			i -= size
			if _, err := m.AddressView.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddressView_Decoded_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressView_Decoded_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Decoded != nil {
		{
			size, err := m.Decoded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeys(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AddressView_Opaque_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressView_Opaque_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opaque != nil {
		{
			size, err := m.Opaque.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeys(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AddressView_Decoded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressView_Decoded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressView_Decoded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WalletId != nil {
		{
			size, err := m.WalletId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeys(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeys(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeys(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressView_Opaque) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressView_Opaque) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressView_Opaque) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeys(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayloadKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayloadKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayloadKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpendKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullViewingKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullViewingKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullViewingKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WalletId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Diversifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Diversifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Diversifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Randomizer) > 0 {
		i -= len(m.Randomizer)
		copy(dAtA[i:], m.Randomizer)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Randomizer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != 0 {
		i = encodeVarintKeys(dAtA, i, uint64(m.Account))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *IdentityKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ik) > 0 {
		i -= len(m.Ik)
		copy(dAtA[i:], m.Ik)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Ik)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovernanceKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovernanceKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovernanceKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gk) > 0 {
		i -= len(m.Gk)
		copy(dAtA[i:], m.Gk)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Gk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintKeys(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeys(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeys(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	l = len(m.AltBech32M)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *AddressView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressView != nil {
		n += m.AddressView.Size()
	}
	return n
}

func (m *AddressView_Decoded_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Decoded != nil {
		l = m.Decoded.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}
func (m *AddressView_Opaque_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opaque != nil {
		l = m.Opaque.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}
func (m *AddressView_Decoded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	if m.WalletId != nil {
		l = m.WalletId.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *AddressView_Opaque) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *PayloadKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *SpendKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *FullViewingKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *WalletId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *Diversifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *AddressIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != 0 {
		n += 1 + sovKeys(uint64(m.Account))
	}
	l = len(m.Randomizer)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *IdentityKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ik)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *GovernanceKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Gk)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func (m *ConsensusKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovKeys(uint64(l))
	}
	return n
}

func sovKeys(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeys(x uint64) (n int) {
	return sovKeys(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AltBech32M", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AltBech32M = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decoded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddressView_Decoded{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressView = &AddressView_Decoded_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opaque", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddressView_Opaque{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressView = &AddressView_Opaque_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressView_Decoded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decoded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decoded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Index == nil {
				m.Index = &AddressIndex{}
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WalletId == nil {
				m.WalletId = &WalletId{}
			}
			if err := m.WalletId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressView_Opaque) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Opaque: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Opaque: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayloadKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayloadKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayloadKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullViewingKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullViewingKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullViewingKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Diversifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Diversifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Diversifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Account |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomizer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Randomizer = append(m.Randomizer[:0], dAtA[iNdEx:postIndex]...)
			if m.Randomizer == nil {
				m.Randomizer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentityKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ik", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ik = append(m.Ik[:0], dAtA[iNdEx:postIndex]...)
			if m.Ik == nil {
				m.Ik = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovernanceKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovernanceKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovernanceKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gk = append(m.Gk[:0], dAtA[iNdEx:postIndex]...)
			if m.Gk == nil {
				m.Gk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeys
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeys(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeys
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeys
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeys
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeys
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeys        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeys          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeys = fmt.Errorf("proto: unexpected end of group")
)

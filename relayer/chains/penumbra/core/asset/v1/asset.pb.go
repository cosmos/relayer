// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/asset/v1/asset.proto

package assetv1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/cosmos/gogoproto/proto"
	v1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/num/v1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BalanceCommitment struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *BalanceCommitment) Reset()         { *m = BalanceCommitment{} }
func (m *BalanceCommitment) String() string { return proto.CompactTextString(m) }
func (*BalanceCommitment) ProtoMessage()    {}
func (*BalanceCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{0}
}
func (m *BalanceCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceCommitment.Merge(m, src)
}
func (m *BalanceCommitment) XXX_Size() int {
	return m.Size()
}
func (m *BalanceCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceCommitment proto.InternalMessageInfo

func (m *BalanceCommitment) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

// A Penumbra asset ID.
type AssetId struct {
	// The bytes of the asset ID.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// Alternatively, a Bech32m-encoded string representation of the `inner`
	// bytes.
	//
	// NOTE: implementations are not required to support parsing this field.
	// Implementations should prefer to encode the `inner` bytes in all messages they
	// produce. Implementations must not accept messages with both `inner` and
	// `alt_bech32m` set.  This field exists for convenience of RPC users.
	AltBech32M string `protobuf:"bytes,2,opt,name=alt_bech32m,json=altBech32m,proto3" json:"alt_bech32m,omitempty"`
	// Alternatively, a base denomination string which should be hashed to obtain the asset ID.
	//
	// NOTE: implementations are not required to support parsing this field.
	// Implementations should prefer to encode the bytes in all messages they
	// produce. Implementations must not accept messages with both `inner` and
	// `alt_base_denom` set.  This field exists for convenience of RPC users.
	AltBaseDenom string `protobuf:"bytes,3,opt,name=alt_base_denom,json=altBaseDenom,proto3" json:"alt_base_denom,omitempty"`
}

func (m *AssetId) Reset()         { *m = AssetId{} }
func (m *AssetId) String() string { return proto.CompactTextString(m) }
func (*AssetId) ProtoMessage()    {}
func (*AssetId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{1}
}
func (m *AssetId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetId.Merge(m, src)
}
func (m *AssetId) XXX_Size() int {
	return m.Size()
}
func (m *AssetId) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetId.DiscardUnknown(m)
}

var xxx_messageInfo_AssetId proto.InternalMessageInfo

func (m *AssetId) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (m *AssetId) GetAltBech32M() string {
	if m != nil {
		return m.AltBech32M
	}
	return ""
}

func (m *AssetId) GetAltBaseDenom() string {
	if m != nil {
		return m.AltBaseDenom
	}
	return ""
}

type Denom struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *Denom) Reset()         { *m = Denom{} }
func (m *Denom) String() string { return proto.CompactTextString(m) }
func (*Denom) ProtoMessage()    {}
func (*Denom) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{2}
}
func (m *Denom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Denom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Denom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Denom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Denom.Merge(m, src)
}
func (m *Denom) XXX_Size() int {
	return m.Size()
}
func (m *Denom) XXX_DiscardUnknown() {
	xxx_messageInfo_Denom.DiscardUnknown(m)
}

var xxx_messageInfo_Denom proto.InternalMessageInfo

func (m *Denom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// Describes metadata about a given asset.
type Metadata struct {
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// denom_units represents the list of DenomUnit's for a given coin
	DenomUnits []*DenomUnit `protobuf:"bytes,2,rep,name=denom_units,json=denomUnits,proto3" json:"denom_units,omitempty"`
	// base represents the base denom (should be the DenomUnit with exponent = 0).
	Base string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	// display indicates the suggested denom that should be
	// displayed in clients.
	Display string `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty"`
	// name defines the name of the token (eg: Cosmos Atom)
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
	// be the same as the display.
	Symbol string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// the asset ID on Penumbra for this denomination.
	PenumbraAssetId *AssetId      `protobuf:"bytes,1984,opt,name=penumbra_asset_id,json=penumbraAssetId,proto3" json:"penumbra_asset_id,omitempty"`
	Images          []*AssetImage `protobuf:"bytes,1985,rep,name=images,proto3" json:"images,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{3}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Metadata) GetDenomUnits() []*DenomUnit {
	if m != nil {
		return m.DenomUnits
	}
	return nil
}

func (m *Metadata) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *Metadata) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Metadata) GetPenumbraAssetId() *AssetId {
	if m != nil {
		return m.PenumbraAssetId
	}
	return nil
}

func (m *Metadata) GetImages() []*AssetImage {
	if m != nil {
		return m.Images
	}
	return nil
}

// DenomUnit represents a struct that describes a given denomination unit of the basic token.
type DenomUnit struct {
	// denom represents the string name of the given denom unit (e.g uatom).
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// exponent represents power of 10 exponent that one must
	// raise the base_denom to in order to equal the given DenomUnit's denom
	// 1 denom = 10^exponent base_denom
	// (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
	// exponent = 6, thus: 1 atom = 10^6 uatom).
	Exponent uint32 `protobuf:"varint,2,opt,name=exponent,proto3" json:"exponent,omitempty"`
	// aliases is a list of string aliases for the given denom
	Aliases []string `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (m *DenomUnit) Reset()         { *m = DenomUnit{} }
func (m *DenomUnit) String() string { return proto.CompactTextString(m) }
func (*DenomUnit) ProtoMessage()    {}
func (*DenomUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{4}
}
func (m *DenomUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomUnit.Merge(m, src)
}
func (m *DenomUnit) XXX_Size() int {
	return m.Size()
}
func (m *DenomUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomUnit.DiscardUnknown(m)
}

var xxx_messageInfo_DenomUnit proto.InternalMessageInfo

func (m *DenomUnit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomUnit) GetExponent() uint32 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func (m *DenomUnit) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type Value struct {
	Amount  *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetId *AssetId   `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{5}
}
func (m *Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return m.Size()
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetAmount() *v1.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Value) GetAssetId() *AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

// Represents a value of a known or unknown denomination.
type ValueView struct {
	// Types that are valid to be assigned to ValueView:
	//
	//	*ValueView_KnownAssetId_
	//	*ValueView_UnknownAssetId_
	ValueView isValueView_ValueView `protobuf_oneof:"value_view"`
}

func (m *ValueView) Reset()         { *m = ValueView{} }
func (m *ValueView) String() string { return proto.CompactTextString(m) }
func (*ValueView) ProtoMessage()    {}
func (*ValueView) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{6}
}
func (m *ValueView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueView.Merge(m, src)
}
func (m *ValueView) XXX_Size() int {
	return m.Size()
}
func (m *ValueView) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueView.DiscardUnknown(m)
}

var xxx_messageInfo_ValueView proto.InternalMessageInfo

type isValueView_ValueView interface {
	isValueView_ValueView()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ValueView_KnownAssetId_ struct {
	KnownAssetId *ValueView_KnownAssetId `protobuf:"bytes,1,opt,name=known_asset_id,json=knownAssetId,proto3,oneof" json:"known_asset_id,omitempty"`
}
type ValueView_UnknownAssetId_ struct {
	UnknownAssetId *ValueView_UnknownAssetId `protobuf:"bytes,2,opt,name=unknown_asset_id,json=unknownAssetId,proto3,oneof" json:"unknown_asset_id,omitempty"`
}

func (*ValueView_KnownAssetId_) isValueView_ValueView()   {}
func (*ValueView_UnknownAssetId_) isValueView_ValueView() {}

func (m *ValueView) GetValueView() isValueView_ValueView {
	if m != nil {
		return m.ValueView
	}
	return nil
}

func (m *ValueView) GetKnownAssetId() *ValueView_KnownAssetId {
	if x, ok := m.GetValueView().(*ValueView_KnownAssetId_); ok {
		return x.KnownAssetId
	}
	return nil
}

func (m *ValueView) GetUnknownAssetId() *ValueView_UnknownAssetId {
	if x, ok := m.GetValueView().(*ValueView_UnknownAssetId_); ok {
		return x.UnknownAssetId
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValueView) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValueView_KnownAssetId_)(nil),
		(*ValueView_UnknownAssetId_)(nil),
	}
}

// A value whose asset ID is known and has metadata.
type ValueView_KnownAssetId struct {
	// The amount of the value.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The asset metadata describing the asset of the value.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Optionally, a list of equivalent values in other numeraires.
	EquivalentValues []*EquivalentValue `protobuf:"bytes,3,rep,name=equivalent_values,json=equivalentValues,proto3" json:"equivalent_values,omitempty"`
	// Optionally, extended, dynamically-typed metadata about the object this
	// token represents.
	//
	// This is left flexible to allow future extensions. For instance, a view
	// server could augment an LPNFT with a message describing the current state
	// of the position and its reserves, allowing a frontend to render LPNFTs
	// with their position information (trading pair, etc). However, because
	// this is in an extension, a frontend that does not have special handling
	// logic would fall back on the ordinary asset metadata.
	ExtendedMetadata *types.Any `protobuf:"bytes,4,opt,name=extended_metadata,json=extendedMetadata,proto3" json:"extended_metadata,omitempty"`
}

func (m *ValueView_KnownAssetId) Reset()         { *m = ValueView_KnownAssetId{} }
func (m *ValueView_KnownAssetId) String() string { return proto.CompactTextString(m) }
func (*ValueView_KnownAssetId) ProtoMessage()    {}
func (*ValueView_KnownAssetId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{6, 0}
}
func (m *ValueView_KnownAssetId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueView_KnownAssetId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueView_KnownAssetId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueView_KnownAssetId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueView_KnownAssetId.Merge(m, src)
}
func (m *ValueView_KnownAssetId) XXX_Size() int {
	return m.Size()
}
func (m *ValueView_KnownAssetId) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueView_KnownAssetId.DiscardUnknown(m)
}

var xxx_messageInfo_ValueView_KnownAssetId proto.InternalMessageInfo

func (m *ValueView_KnownAssetId) GetAmount() *v1.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *ValueView_KnownAssetId) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ValueView_KnownAssetId) GetEquivalentValues() []*EquivalentValue {
	if m != nil {
		return m.EquivalentValues
	}
	return nil
}

func (m *ValueView_KnownAssetId) GetExtendedMetadata() *types.Any {
	if m != nil {
		return m.ExtendedMetadata
	}
	return nil
}

// A value whose asset ID is unknown, with no metadata.
type ValueView_UnknownAssetId struct {
	Amount  *v1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetId *AssetId   `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *ValueView_UnknownAssetId) Reset()         { *m = ValueView_UnknownAssetId{} }
func (m *ValueView_UnknownAssetId) String() string { return proto.CompactTextString(m) }
func (*ValueView_UnknownAssetId) ProtoMessage()    {}
func (*ValueView_UnknownAssetId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{6, 1}
}
func (m *ValueView_UnknownAssetId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueView_UnknownAssetId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueView_UnknownAssetId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueView_UnknownAssetId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueView_UnknownAssetId.Merge(m, src)
}
func (m *ValueView_UnknownAssetId) XXX_Size() int {
	return m.Size()
}
func (m *ValueView_UnknownAssetId) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueView_UnknownAssetId.DiscardUnknown(m)
}

var xxx_messageInfo_ValueView_UnknownAssetId proto.InternalMessageInfo

func (m *ValueView_UnknownAssetId) GetAmount() *v1.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *ValueView_UnknownAssetId) GetAssetId() *AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

// An image related to an asset.
type AssetImage struct {
	// The URI of the image in PNG format.
	Png string `protobuf:"bytes,1,opt,name=png,proto3" json:"png,omitempty"`
	// The URI of the image in SVG format.
	Svg   string            `protobuf:"bytes,2,opt,name=svg,proto3" json:"svg,omitempty"`
	Theme *AssetImage_Theme `protobuf:"bytes,3,opt,name=theme,proto3" json:"theme,omitempty"`
}

func (m *AssetImage) Reset()         { *m = AssetImage{} }
func (m *AssetImage) String() string { return proto.CompactTextString(m) }
func (*AssetImage) ProtoMessage()    {}
func (*AssetImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{7}
}
func (m *AssetImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetImage.Merge(m, src)
}
func (m *AssetImage) XXX_Size() int {
	return m.Size()
}
func (m *AssetImage) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetImage.DiscardUnknown(m)
}

var xxx_messageInfo_AssetImage proto.InternalMessageInfo

func (m *AssetImage) GetPng() string {
	if m != nil {
		return m.Png
	}
	return ""
}

func (m *AssetImage) GetSvg() string {
	if m != nil {
		return m.Svg
	}
	return ""
}

func (m *AssetImage) GetTheme() *AssetImage_Theme {
	if m != nil {
		return m.Theme
	}
	return nil
}

type AssetImage_Theme struct {
	// Should be in hex format, `^#[0-9a-fA-F]{6}$`.
	PrimaryColorHex string `protobuf:"bytes,1,opt,name=primary_color_hex,json=primaryColorHex,proto3" json:"primary_color_hex,omitempty"`
	Circle          bool   `protobuf:"varint,2,opt,name=circle,proto3" json:"circle,omitempty"`
	DarkMode        bool   `protobuf:"varint,3,opt,name=dark_mode,json=darkMode,proto3" json:"dark_mode,omitempty"`
}

func (m *AssetImage_Theme) Reset()         { *m = AssetImage_Theme{} }
func (m *AssetImage_Theme) String() string { return proto.CompactTextString(m) }
func (*AssetImage_Theme) ProtoMessage()    {}
func (*AssetImage_Theme) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{7, 0}
}
func (m *AssetImage_Theme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetImage_Theme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetImage_Theme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetImage_Theme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetImage_Theme.Merge(m, src)
}
func (m *AssetImage_Theme) XXX_Size() int {
	return m.Size()
}
func (m *AssetImage_Theme) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetImage_Theme.DiscardUnknown(m)
}

var xxx_messageInfo_AssetImage_Theme proto.InternalMessageInfo

func (m *AssetImage_Theme) GetPrimaryColorHex() string {
	if m != nil {
		return m.PrimaryColorHex
	}
	return ""
}

func (m *AssetImage_Theme) GetCircle() bool {
	if m != nil {
		return m.Circle
	}
	return false
}

func (m *AssetImage_Theme) GetDarkMode() bool {
	if m != nil {
		return m.DarkMode
	}
	return false
}

// The estimated price of one asset in terms of a numeraire.
//
// This is used for generating "equivalent values" in ValueViews.
type EstimatedPrice struct {
	PricedAsset *AssetId `protobuf:"bytes,1,opt,name=priced_asset,json=pricedAsset,proto3" json:"priced_asset,omitempty"`
	Numeraire   *AssetId `protobuf:"bytes,2,opt,name=numeraire,proto3" json:"numeraire,omitempty"`
	// Multiply units of the priced asset by this value to get the value in the numeraire.
	//
	// This is a floating-point number since the price is approximate.
	NumerairePerUnit float64 `protobuf:"fixed64,3,opt,name=numeraire_per_unit,json=numerairePerUnit,proto3" json:"numeraire_per_unit,omitempty"`
	// If set, gives some idea of when the price was estimated.
	AsOfHeight uint64 `protobuf:"varint,4,opt,name=as_of_height,json=asOfHeight,proto3" json:"as_of_height,omitempty"`
}

func (m *EstimatedPrice) Reset()         { *m = EstimatedPrice{} }
func (m *EstimatedPrice) String() string { return proto.CompactTextString(m) }
func (*EstimatedPrice) ProtoMessage()    {}
func (*EstimatedPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{8}
}
func (m *EstimatedPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimatedPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimatedPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimatedPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimatedPrice.Merge(m, src)
}
func (m *EstimatedPrice) XXX_Size() int {
	return m.Size()
}
func (m *EstimatedPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimatedPrice.DiscardUnknown(m)
}

var xxx_messageInfo_EstimatedPrice proto.InternalMessageInfo

func (m *EstimatedPrice) GetPricedAsset() *AssetId {
	if m != nil {
		return m.PricedAsset
	}
	return nil
}

func (m *EstimatedPrice) GetNumeraire() *AssetId {
	if m != nil {
		return m.Numeraire
	}
	return nil
}

func (m *EstimatedPrice) GetNumerairePerUnit() float64 {
	if m != nil {
		return m.NumerairePerUnit
	}
	return 0
}

func (m *EstimatedPrice) GetAsOfHeight() uint64 {
	if m != nil {
		return m.AsOfHeight
	}
	return 0
}

// An "equivalent" value to a given value, in terms of a numeraire.
//
// For instance, this can provide a USD-equivalent value relative to a
// stablecoin, or an amount of the staking token, etc.  A view server can
// optionally include this information to assist a frontend in displaying
// information about the value in a user-friendly way.
type EquivalentValue struct {
	// The equivalent amount of the parent Value in terms of the numeraire.
	EquivalentAmount *v1.Amount `protobuf:"bytes,1,opt,name=equivalent_amount,json=equivalentAmount,proto3" json:"equivalent_amount,omitempty"`
	// Metadata describing the numeraire.
	Numeraire *Metadata `protobuf:"bytes,2,opt,name=numeraire,proto3" json:"numeraire,omitempty"`
	// If set, gives some idea of when the price/equivalence was estimated.
	AsOfHeight uint64 `protobuf:"varint,3,opt,name=as_of_height,json=asOfHeight,proto3" json:"as_of_height,omitempty"`
}

func (m *EquivalentValue) Reset()         { *m = EquivalentValue{} }
func (m *EquivalentValue) String() string { return proto.CompactTextString(m) }
func (*EquivalentValue) ProtoMessage()    {}
func (*EquivalentValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2e6e948c9ed8f1e, []int{9}
}
func (m *EquivalentValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquivalentValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquivalentValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquivalentValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquivalentValue.Merge(m, src)
}
func (m *EquivalentValue) XXX_Size() int {
	return m.Size()
}
func (m *EquivalentValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EquivalentValue.DiscardUnknown(m)
}

var xxx_messageInfo_EquivalentValue proto.InternalMessageInfo

func (m *EquivalentValue) GetEquivalentAmount() *v1.Amount {
	if m != nil {
		return m.EquivalentAmount
	}
	return nil
}

func (m *EquivalentValue) GetNumeraire() *Metadata {
	if m != nil {
		return m.Numeraire
	}
	return nil
}

func (m *EquivalentValue) GetAsOfHeight() uint64 {
	if m != nil {
		return m.AsOfHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*BalanceCommitment)(nil), "penumbra.core.asset.v1.BalanceCommitment")
	proto.RegisterType((*AssetId)(nil), "penumbra.core.asset.v1.AssetId")
	proto.RegisterType((*Denom)(nil), "penumbra.core.asset.v1.Denom")
	proto.RegisterType((*Metadata)(nil), "penumbra.core.asset.v1.Metadata")
	proto.RegisterType((*DenomUnit)(nil), "penumbra.core.asset.v1.DenomUnit")
	proto.RegisterType((*Value)(nil), "penumbra.core.asset.v1.Value")
	proto.RegisterType((*ValueView)(nil), "penumbra.core.asset.v1.ValueView")
	proto.RegisterType((*ValueView_KnownAssetId)(nil), "penumbra.core.asset.v1.ValueView.KnownAssetId")
	proto.RegisterType((*ValueView_UnknownAssetId)(nil), "penumbra.core.asset.v1.ValueView.UnknownAssetId")
	proto.RegisterType((*AssetImage)(nil), "penumbra.core.asset.v1.AssetImage")
	proto.RegisterType((*AssetImage_Theme)(nil), "penumbra.core.asset.v1.AssetImage.Theme")
	proto.RegisterType((*EstimatedPrice)(nil), "penumbra.core.asset.v1.EstimatedPrice")
	proto.RegisterType((*EquivalentValue)(nil), "penumbra.core.asset.v1.EquivalentValue")
}

func init() {
	proto.RegisterFile("penumbra/core/asset/v1/asset.proto", fileDescriptor_c2e6e948c9ed8f1e)
}

var fileDescriptor_c2e6e948c9ed8f1e = []byte{
	// 1048 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0xf3, 0xa7, 0x75, 0x5e, 0x42, 0x9b, 0x8e, 0x56, 0x55, 0x36, 0x40, 0x36, 0x58, 0x48,
	0x14, 0x84, 0x1c, 0x92, 0xe5, 0x94, 0x85, 0x95, 0x9a, 0xb2, 0xa2, 0x2d, 0xac, 0x88, 0xac, 0x6d,
	0x90, 0x50, 0x25, 0x6b, 0x62, 0x4f, 0xe3, 0x51, 0x3d, 0x33, 0xc1, 0x63, 0xa7, 0xcd, 0x95, 0x0b,
	0x57, 0xee, 0xdc, 0x38, 0xf2, 0x21, 0x10, 0xdc, 0x10, 0xa7, 0x3d, 0x22, 0x4e, 0xa8, 0xbd, 0x71,
	0xe4, 0x03, 0x20, 0x34, 0x63, 0x3b, 0x6d, 0x4a, 0x4b, 0x17, 0x0e, 0x7b, 0x7b, 0x7f, 0x7e, 0xef,
	0xbd, 0xdf, 0x7b, 0x7e, 0x6f, 0x12, 0xb0, 0xa6, 0x84, 0x27, 0x6c, 0x1c, 0xe1, 0x8e, 0x27, 0x22,
	0xd2, 0xc1, 0x52, 0x92, 0xb8, 0x33, 0xeb, 0xa6, 0x82, 0x3d, 0x8d, 0x44, 0x2c, 0xd0, 0x56, 0x8e,
	0xb1, 0x15, 0xc6, 0x4e, 0x5d, 0xb3, 0x6e, 0xf3, 0xfe, 0x44, 0x88, 0x49, 0x48, 0x3a, 0x1a, 0x35,
	0x4e, 0x8e, 0x3b, 0x98, 0xcf, 0xd3, 0x90, 0x66, 0x6b, 0x39, 0x2d, 0x4f, 0x98, 0x4a, 0xca, 0x13,
	0x96, 0xfa, 0xad, 0xb7, 0x61, 0x73, 0x80, 0x43, 0xcc, 0x3d, 0xb2, 0x2b, 0x18, 0xa3, 0x31, 0x23,
	0x3c, 0x46, 0xf7, 0xa0, 0x4c, 0x39, 0x27, 0x51, 0xc3, 0x68, 0x1b, 0xdb, 0x35, 0x27, 0x55, 0xac,
	0x63, 0x58, 0xdb, 0x51, 0x15, 0xf7, 0xfd, 0x9b, 0x01, 0xe8, 0x01, 0x54, 0x71, 0x18, 0xbb, 0x63,
	0xe2, 0x05, 0x0f, 0x7b, 0xac, 0x51, 0x68, 0x1b, 0xdb, 0x15, 0x07, 0x70, 0x18, 0x0f, 0x52, 0x0b,
	0x7a, 0x13, 0xd6, 0x35, 0x00, 0x4b, 0xe2, 0xfa, 0x84, 0x0b, 0xd6, 0x28, 0x6a, 0x4c, 0x4d, 0x61,
	0xb0, 0x24, 0x1f, 0x29, 0x9b, 0xf5, 0x3a, 0x94, 0xb5, 0xa0, 0xaa, 0xa4, 0x28, 0x43, 0xa3, 0x52,
	0xc5, 0xfa, 0xab, 0x00, 0xe6, 0x53, 0x12, 0x63, 0x1f, 0xc7, 0x18, 0xb5, 0xa1, 0xea, 0x13, 0xe9,
	0x45, 0x74, 0x1a, 0x53, 0xc1, 0x33, 0xe0, 0x55, 0x13, 0x1a, 0x28, 0x04, 0x17, 0xcc, 0x4d, 0x38,
	0x8d, 0x65, 0xa3, 0xd0, 0x2e, 0x6e, 0x57, 0x7b, 0x6f, 0xd8, 0x37, 0x4f, 0xd2, 0xd6, 0x85, 0x0f,
	0x39, 0x8d, 0x1d, 0xf0, 0x73, 0x51, 0x22, 0x04, 0x25, 0xc5, 0x39, 0x63, 0xab, 0x65, 0xd4, 0x80,
	0x35, 0x9f, 0xca, 0x69, 0x88, 0xe7, 0x8d, 0x92, 0x36, 0xe7, 0xaa, 0x42, 0x73, 0xcc, 0x48, 0xa3,
	0x9c, 0xa2, 0x95, 0x8c, 0xb6, 0x60, 0x55, 0xce, 0xd9, 0x58, 0x84, 0x8d, 0x55, 0x6d, 0xcd, 0x34,
	0xf4, 0x29, 0x6c, 0xe6, 0x4c, 0x5c, 0x4d, 0xc2, 0xa5, 0x7e, 0xe3, 0xc7, 0x8d, 0xb6, 0xb1, 0x5d,
	0xed, 0x3d, 0xb8, 0x8d, 0x64, 0xf6, 0x15, 0x9c, 0x8d, 0xdc, 0x9f, 0x7f, 0x96, 0x47, 0xb0, 0x4a,
	0x19, 0x9e, 0x10, 0xd9, 0xf8, 0x69, 0x43, 0xf7, 0x69, 0xfd, 0x7b, 0x0a, 0x85, 0x75, 0xb2, 0x90,
	0x83, 0x92, 0xb9, 0x56, 0x37, 0x0f, 0x4a, 0xa6, 0x59, 0xaf, 0x38, 0xc5, 0x24, 0xa2, 0x4e, 0xf1,
	0xd0, 0xd9, 0x77, 0xcc, 0x24, 0xa2, 0x6e, 0x80, 0x65, 0xe0, 0xac, 0x1d, 0x3a, 0xfb, 0x7b, 0x58,
	0x06, 0xd6, 0xe7, 0x50, 0x59, 0x8c, 0xe9, 0xe6, 0x6f, 0x84, 0x9a, 0x60, 0x92, 0xb3, 0xa9, 0xe0,
	0x84, 0xc7, 0x7a, 0x0d, 0x5e, 0x71, 0x16, 0xba, 0x1a, 0x1c, 0x0e, 0x29, 0x96, 0x44, 0x36, 0x8a,
	0xed, 0xa2, 0x1a, 0x5c, 0xa6, 0x5a, 0x73, 0x28, 0x8f, 0x70, 0x98, 0x10, 0xf4, 0x3e, 0xac, 0x62,
	0x26, 0x12, 0x1e, 0xeb, 0xac, 0xd5, 0xde, 0x6b, 0xd7, 0xda, 0x50, 0xeb, 0xab, 0x9a, 0xd0, 0x18,
	0x27, 0xc3, 0xa2, 0x3e, 0x98, 0x8b, 0x11, 0x16, 0x5e, 0x6c, 0x82, 0x6b, 0x38, 0x15, 0xac, 0x3f,
	0x4b, 0x50, 0xd1, 0xb5, 0x47, 0x94, 0x9c, 0xa2, 0x11, 0xac, 0x9f, 0x70, 0x71, 0xca, 0x2f, 0x3f,
	0x49, 0xca, 0xc3, 0xbe, 0x2d, 0xdf, 0x22, 0xd4, 0xfe, 0x44, 0xc5, 0x65, 0xe9, 0xf7, 0x56, 0x9c,
	0xda, 0xc9, 0x15, 0x1d, 0x1d, 0x41, 0x3d, 0xe1, 0xd7, 0x32, 0xa7, 0x4c, 0xdf, 0xbb, 0x3b, 0xf3,
	0x21, 0x3f, 0x59, 0xce, 0xbd, 0x9e, 0x2c, 0x59, 0x9a, 0xdf, 0x16, 0xa0, 0x76, 0xb5, 0xfc, 0xff,
	0x1c, 0xe3, 0x07, 0x60, 0xb2, 0xec, 0xbc, 0x32, 0x72, 0xed, 0xdb, 0xc8, 0xe5, 0x67, 0xe8, 0x2c,
	0x22, 0xd0, 0x33, 0xd8, 0x24, 0x5f, 0x26, 0x74, 0x86, 0x43, 0xc2, 0x63, 0x77, 0xa6, 0xd8, 0xa7,
	0xdf, 0xb9, 0xda, 0x7b, 0xeb, 0xb6, 0x34, 0x4f, 0x16, 0x01, 0xba, 0x5b, 0xa7, 0x4e, 0x96, 0x0d,
	0x12, 0xed, 0xc0, 0x26, 0x39, 0x8b, 0x09, 0xf7, 0x89, 0xef, 0x2e, 0xc8, 0x95, 0x34, 0xb9, 0x7b,
	0x76, 0xfa, 0xf8, 0xd9, 0xf9, 0xe3, 0x67, 0xef, 0xf0, 0xb9, 0x53, 0xcf, 0xe1, 0x39, 0xc5, 0xe6,
	0x57, 0x06, 0xac, 0x2f, 0x8f, 0xf0, 0xe5, 0xaf, 0xd9, 0xa0, 0x06, 0xa0, 0x47, 0xe2, 0xce, 0x28,
	0x39, 0xb5, 0x7e, 0x33, 0x00, 0x2e, 0x0f, 0x11, 0xd5, 0xa1, 0x38, 0xe5, 0x93, 0xec, 0x90, 0x94,
	0xa8, 0x2c, 0x72, 0x36, 0xc9, 0x1e, 0x52, 0x25, 0xa2, 0xc7, 0x50, 0x8e, 0x03, 0xc2, 0xd2, 0xa7,
	0xa8, 0xda, 0xdb, 0xbe, 0xfb, 0xbe, 0xed, 0x67, 0x0a, 0xef, 0xa4, 0x61, 0xcd, 0x00, 0xca, 0x5a,
	0x47, 0xef, 0xc0, 0xe6, 0x34, 0xa2, 0x0c, 0x47, 0x73, 0xd7, 0x13, 0xa1, 0x88, 0xdc, 0x80, 0x9c,
	0x65, 0xa5, 0x37, 0x32, 0xc7, 0xae, 0xb2, 0xef, 0x91, 0x33, 0xf5, 0x78, 0x79, 0x34, 0xf2, 0x42,
	0xa2, 0x99, 0x98, 0x4e, 0xa6, 0xa1, 0x57, 0xa1, 0xe2, 0xe3, 0xe8, 0xc4, 0x65, 0xc2, 0x4f, 0x09,
	0x99, 0x8e, 0xa9, 0x0c, 0x4f, 0x85, 0x4f, 0xac, 0x0b, 0x03, 0xd6, 0x9f, 0xc8, 0x98, 0x32, 0x1c,
	0x13, 0x7f, 0x18, 0x51, 0x8f, 0xa0, 0x01, 0xd4, 0xa6, 0x4a, 0xf0, 0xd3, 0xed, 0xcf, 0xa6, 0x7e,
	0xe7, 0xf4, 0xaa, 0x69, 0x90, 0x56, 0xd1, 0x87, 0x50, 0xe1, 0x09, 0x23, 0x11, 0xa6, 0x11, 0x79,
	0xd1, 0xf1, 0x5f, 0x46, 0xa0, 0x77, 0x01, 0x2d, 0x14, 0x77, 0x4a, 0x22, 0xfd, 0xab, 0xa0, 0xb9,
	0x1b, 0x4e, 0x7d, 0xe1, 0x19, 0x92, 0x48, 0x3f, 0x6e, 0x6d, 0xa8, 0x61, 0xe9, 0x8a, 0x63, 0x37,
	0x20, 0x74, 0x12, 0xc4, 0x7a, 0xe3, 0x4a, 0x0e, 0x60, 0xf9, 0xd9, 0xf1, 0x9e, 0xb6, 0x58, 0x3f,
	0x18, 0xb0, 0x71, 0x6d, 0x7d, 0xd1, 0xfe, 0xd2, 0x09, 0xfc, 0x87, 0x0d, 0xbb, 0xb2, 0xf7, 0xa9,
	0x05, 0x3d, 0xfe, 0x67, 0xb7, 0x77, 0x1f, 0xe3, 0x95, 0x76, 0xaf, 0x37, 0x50, 0xbc, 0xde, 0xc0,
	0xe0, 0xeb, 0xc2, 0xcf, 0xe7, 0x2d, 0xe3, 0xf9, 0x79, 0xcb, 0xf8, 0xfd, 0xbc, 0x65, 0x7c, 0x73,
	0xd1, 0x5a, 0x79, 0x7e, 0xd1, 0x5a, 0xf9, 0xf5, 0xa2, 0xb5, 0x02, 0x4d, 0x4f, 0xb0, 0x5b, 0x8a,
	0x0d, 0xd2, 0xbd, 0x1d, 0xaa, 0x93, 0x1b, 0x1a, 0x5f, 0x1c, 0x4c, 0x68, 0x1c, 0x24, 0x63, 0xdb,
	0x13, 0xac, 0xe3, 0x09, 0xc9, 0x84, 0xec, 0x44, 0x24, 0xc4, 0x73, 0x12, 0x75, 0x66, 0xbd, 0x85,
	0xe8, 0x05, 0x98, 0x72, 0xd9, 0xb9, 0xf9, 0x7f, 0xce, 0x23, 0x2d, 0xcc, 0xba, 0xdf, 0x15, 0x8a,
	0xc3, 0xdd, 0x9d, 0xef, 0x0b, 0x5b, 0xc3, 0xbc, 0xf0, 0xae, 0x2a, 0xac, 0xcb, 0xd9, 0xa3, 0xee,
	0x2f, 0x97, 0x8e, 0x23, 0xe5, 0x38, 0xd2, 0x8e, 0xa3, 0x51, 0xf7, 0xbc, 0x60, 0xdd, 0xec, 0x38,
	0xfa, 0x78, 0x38, 0xc8, 0x47, 0xf3, 0x47, 0xe1, 0x7e, 0x0e, 0xea, 0xf7, 0x15, 0xaa, 0xdf, 0xd7,
	0xb0, 0x7e, 0x7f, 0xd4, 0x1d, 0xaf, 0xea, 0x07, 0xe4, 0xe1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xad, 0x5c, 0xe1, 0xd0, 0x89, 0x09, 0x00, 0x00,
}

func (m *BalanceCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AltBaseDenom) > 0 {
		i -= len(m.AltBaseDenom)
		copy(dAtA[i:], m.AltBaseDenom)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.AltBaseDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AltBech32M) > 0 {
		i -= len(m.AltBech32M)
		copy(dAtA[i:], m.AltBech32M)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.AltBech32M)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Denom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Denom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Denom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7c
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.PenumbraAssetId != nil {
		{
			size, err := m.PenumbraAssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7c
		i--
		dAtA[i] = 0x82
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Display) > 0 {
		i -= len(m.Display)
		copy(dAtA[i:], m.Display)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Display)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DenomUnits) > 0 {
		for iNdEx := len(m.DenomUnits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DenomUnits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomUnit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomUnit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Aliases[iNdEx])
			copy(dAtA[i:], m.Aliases[iNdEx])
			i = encodeVarintAsset(dAtA, i, uint64(len(m.Aliases[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Exponent != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueView != nil {
		{
			size := m.ValueView.Size()
			i -= size
			if _, err := m.ValueView.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueView_KnownAssetId_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueView_KnownAssetId_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KnownAssetId != nil {
		{
			size, err := m.KnownAssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ValueView_UnknownAssetId_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueView_UnknownAssetId_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnknownAssetId != nil {
		{
			size, err := m.UnknownAssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ValueView_KnownAssetId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueView_KnownAssetId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueView_KnownAssetId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedMetadata != nil {
		{
			size, err := m.ExtendedMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.EquivalentValues) > 0 {
		for iNdEx := len(m.EquivalentValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EquivalentValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAsset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueView_UnknownAssetId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueView_UnknownAssetId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueView_UnknownAssetId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Theme != nil {
		{
			size, err := m.Theme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Svg) > 0 {
		i -= len(m.Svg)
		copy(dAtA[i:], m.Svg)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Svg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Png) > 0 {
		i -= len(m.Png)
		copy(dAtA[i:], m.Png)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Png)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetImage_Theme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetImage_Theme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetImage_Theme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DarkMode {
		i--
		if m.DarkMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Circle {
		i--
		if m.Circle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PrimaryColorHex) > 0 {
		i -= len(m.PrimaryColorHex)
		copy(dAtA[i:], m.PrimaryColorHex)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.PrimaryColorHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstimatedPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimatedPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimatedPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AsOfHeight != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.AsOfHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.NumerairePerUnit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NumerairePerUnit))))
		i--
		dAtA[i] = 0x19
	}
	if m.Numeraire != nil {
		{
			size, err := m.Numeraire.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PricedAsset != nil {
		{
			size, err := m.PricedAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EquivalentValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquivalentValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquivalentValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AsOfHeight != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.AsOfHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Numeraire != nil {
		{
			size, err := m.Numeraire.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EquivalentAmount != nil {
		{
			size, err := m.EquivalentAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAsset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsset(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BalanceCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *AssetId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.AltBech32M)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.AltBaseDenom)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *Denom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if len(m.DenomUnits) > 0 {
		for _, e := range m.DenomUnits {
			l = e.Size()
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Display)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.PenumbraAssetId != nil {
		l = m.PenumbraAssetId.Size()
		n += 2 + l + sovAsset(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 2 + l + sovAsset(uint64(l))
		}
	}
	return n
}

func (m *DenomUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Exponent != 0 {
		n += 1 + sovAsset(uint64(m.Exponent))
	}
	if len(m.Aliases) > 0 {
		for _, s := range m.Aliases {
			l = len(s)
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	return n
}

func (m *Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *ValueView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueView != nil {
		n += m.ValueView.Size()
	}
	return n
}

func (m *ValueView_KnownAssetId_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KnownAssetId != nil {
		l = m.KnownAssetId.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}
func (m *ValueView_UnknownAssetId_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnknownAssetId != nil {
		l = m.UnknownAssetId.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}
func (m *ValueView_KnownAssetId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	if len(m.EquivalentValues) > 0 {
		for _, e := range m.EquivalentValues {
			l = e.Size()
			n += 1 + l + sovAsset(uint64(l))
		}
	}
	if m.ExtendedMetadata != nil {
		l = m.ExtendedMetadata.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *ValueView_UnknownAssetId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *AssetImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Png)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Svg)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Theme != nil {
		l = m.Theme.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func (m *AssetImage_Theme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrimaryColorHex)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Circle {
		n += 2
	}
	if m.DarkMode {
		n += 2
	}
	return n
}

func (m *EstimatedPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PricedAsset != nil {
		l = m.PricedAsset.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Numeraire != nil {
		l = m.Numeraire.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.NumerairePerUnit != 0 {
		n += 9
	}
	if m.AsOfHeight != 0 {
		n += 1 + sovAsset(uint64(m.AsOfHeight))
	}
	return n
}

func (m *EquivalentValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EquivalentAmount != nil {
		l = m.EquivalentAmount.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.Numeraire != nil {
		l = m.Numeraire.Size()
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.AsOfHeight != 0 {
		n += 1 + sovAsset(uint64(m.AsOfHeight))
	}
	return n
}

func sovAsset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsset(x uint64) (n int) {
	return sovAsset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BalanceCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AltBech32M", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AltBech32M = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AltBaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AltBaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Denom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Denom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Denom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomUnits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomUnits = append(m.DenomUnits, &DenomUnit{})
			if err := m.DenomUnits[len(m.DenomUnits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Display = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1984:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenumbraAssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PenumbraAssetId == nil {
				m.PenumbraAssetId = &AssetId{}
			}
			if err := m.PenumbraAssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1985:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &AssetImage{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &v1.Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownAssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValueView_KnownAssetId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueView = &ValueView_KnownAssetId_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnknownAssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValueView_UnknownAssetId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueView = &ValueView_UnknownAssetId_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueView_KnownAssetId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnownAssetId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnownAssetId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &v1.Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalentValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalentValues = append(m.EquivalentValues, &EquivalentValue{})
			if err := m.EquivalentValues[len(m.EquivalentValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedMetadata == nil {
				m.ExtendedMetadata = &types.Any{}
			}
			if err := m.ExtendedMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueView_UnknownAssetId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnknownAssetId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnknownAssetId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &v1.Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Png", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Png = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Svg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theme == nil {
				m.Theme = &AssetImage_Theme{}
			}
			if err := m.Theme.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetImage_Theme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Theme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Theme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryColorHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryColorHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Circle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Circle = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DarkMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DarkMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimatedPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimatedPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimatedPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricedAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PricedAsset == nil {
				m.PricedAsset = &AssetId{}
			}
			if err := m.PricedAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeraire", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Numeraire == nil {
				m.Numeraire = &AssetId{}
			}
			if err := m.Numeraire.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumerairePerUnit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NumerairePerUnit = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOfHeight", wireType)
			}
			m.AsOfHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOfHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquivalentValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquivalentValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquivalentValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquivalentAmount == nil {
				m.EquivalentAmount = &v1.Amount{}
			}
			if err := m.EquivalentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeraire", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Numeraire == nil {
				m.Numeraire = &Metadata{}
			}
			if err := m.Numeraire.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOfHeight", wireType)
			}
			m.AsOfHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsOfHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAsset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAsset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAsset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAsset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAsset = fmt.Errorf("proto: unexpected end of group")
)

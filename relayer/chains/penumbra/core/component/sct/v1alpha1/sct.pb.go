// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/component/sct/v1alpha1/sct.proto

package sctv1alpha1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	v1alpha11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/chain/v1alpha1"
	v1alpha1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/crypto/tct/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Nullifier struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *Nullifier) Reset()         { *m = Nullifier{} }
func (m *Nullifier) String() string { return proto.CompactTextString(m) }
func (*Nullifier) ProtoMessage()    {}
func (*Nullifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_e99589ee3b6c1a3a, []int{0}
}
func (m *Nullifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nullifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nullifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nullifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nullifier.Merge(m, src)
}
func (m *Nullifier) XXX_Size() int {
	return m.Size()
}
func (m *Nullifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Nullifier.DiscardUnknown(m)
}

var xxx_messageInfo_Nullifier proto.InternalMessageInfo

func (m *Nullifier) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type TransactionByNoteRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId        string                    `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	NoteCommitment *v1alpha1.StateCommitment `protobuf:"bytes,2,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
}

func (m *TransactionByNoteRequest) Reset()         { *m = TransactionByNoteRequest{} }
func (m *TransactionByNoteRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionByNoteRequest) ProtoMessage()    {}
func (*TransactionByNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e99589ee3b6c1a3a, []int{1}
}
func (m *TransactionByNoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionByNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionByNoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionByNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionByNoteRequest.Merge(m, src)
}
func (m *TransactionByNoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionByNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionByNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionByNoteRequest proto.InternalMessageInfo

func (m *TransactionByNoteRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *TransactionByNoteRequest) GetNoteCommitment() *v1alpha1.StateCommitment {
	if m != nil {
		return m.NoteCommitment
	}
	return nil
}

type TransactionByNoteResponse struct {
	NoteSource *v1alpha11.NoteSource `protobuf:"bytes,1,opt,name=note_source,json=noteSource,proto3" json:"note_source,omitempty"`
}

func (m *TransactionByNoteResponse) Reset()         { *m = TransactionByNoteResponse{} }
func (m *TransactionByNoteResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionByNoteResponse) ProtoMessage()    {}
func (*TransactionByNoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e99589ee3b6c1a3a, []int{2}
}
func (m *TransactionByNoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionByNoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionByNoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionByNoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionByNoteResponse.Merge(m, src)
}
func (m *TransactionByNoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionByNoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionByNoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionByNoteResponse proto.InternalMessageInfo

func (m *TransactionByNoteResponse) GetNoteSource() *v1alpha11.NoteSource {
	if m != nil {
		return m.NoteSource
	}
	return nil
}

func init() {
	proto.RegisterType((*Nullifier)(nil), "penumbra.core.component.sct.v1alpha1.Nullifier")
	proto.RegisterType((*TransactionByNoteRequest)(nil), "penumbra.core.component.sct.v1alpha1.TransactionByNoteRequest")
	proto.RegisterType((*TransactionByNoteResponse)(nil), "penumbra.core.component.sct.v1alpha1.TransactionByNoteResponse")
}

func init() {
	proto.RegisterFile("penumbra/core/component/sct/v1alpha1/sct.proto", fileDescriptor_e99589ee3b6c1a3a)
}

var fileDescriptor_e99589ee3b6c1a3a = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0xd3, 0x83, 0x7f, 0x76, 0x3b, 0x8b, 0xe2, 0xe0, 0x21, 0x9b, 0xc3, 0xb0, 0x86, 0x45,
	0x72, 0xb1, 0xc7, 0x1d, 0x6f, 0x23, 0x28, 0x24, 0x07, 0xf1, 0xe0, 0x12, 0x33, 0xb2, 0x07, 0x19,
	0x58, 0x3a, 0x9d, 0xd2, 0x0c, 0x64, 0xba, 0xc7, 0xee, 0x9a, 0x40, 0x1e, 0x42, 0xf0, 0xe0, 0x13,
	0x08, 0x5e, 0x7c, 0x12, 0xf1, 0xb4, 0x47, 0x6f, 0x4a, 0x72, 0xf3, 0x29, 0xa4, 0x3b, 0x3b, 0x33,
	0x0b, 0x1a, 0x08, 0x7b, 0x09, 0x55, 0xf0, 0xfb, 0xbe, 0xfa, 0xaa, 0xd2, 0x43, 0x59, 0x01, 0xb2,
	0xcc, 0x27, 0x9a, 0x87, 0x42, 0x69, 0x08, 0x85, 0xca, 0x0b, 0x25, 0x41, 0x62, 0x68, 0x04, 0x86,
	0x8b, 0x13, 0x3e, 0x2f, 0x66, 0xfc, 0xc4, 0x36, 0xac, 0xd0, 0x0a, 0x95, 0x7f, 0x5c, 0xf1, 0xcc,
	0xf2, 0xac, 0xe6, 0x99, 0x45, 0x2a, 0xbe, 0xfb, 0xb0, 0x71, 0xd5, 0xcb, 0x02, 0x55, 0x88, 0x57,
	0xdd, 0xb0, 0x72, 0xeb, 0x46, 0xdb, 0xa6, 0x8b, 0x19, 0xcf, 0x64, 0xa3, 0x70, 0xed, 0x46, 0xd3,
	0x7b, 0x40, 0xf7, 0x4f, 0xcb, 0xf9, 0x3c, 0x7b, 0x97, 0x81, 0xf6, 0xef, 0xd3, 0x9b, 0x99, 0x94,
	0xa0, 0x3b, 0xe4, 0x88, 0xf4, 0x0f, 0xc6, 0x9b, 0xa6, 0xf7, 0x91, 0xd0, 0xce, 0x1b, 0xcd, 0xa5,
	0xe1, 0x02, 0x33, 0x25, 0x07, 0xcb, 0x53, 0x85, 0x30, 0x86, 0x0f, 0x25, 0x18, 0xf4, 0x0f, 0xe9,
	0x9e, 0xb3, 0x3b, 0xcf, 0xa6, 0x4e, 0xb5, 0x3f, 0xbe, 0xed, 0xfa, 0x97, 0x53, 0xff, 0x8c, 0xde,
	0x95, 0x0a, 0xe1, 0x5c, 0xa8, 0x3c, 0xcf, 0x30, 0x07, 0x89, 0x1d, 0xef, 0x88, 0xf4, 0xdb, 0xd1,
	0x23, 0xd6, 0xac, 0xed, 0x16, 0x62, 0x78, 0x65, 0x5d, 0x96, 0x20, 0x47, 0x18, 0xd6, 0xa2, 0xf1,
	0x1d, 0xeb, 0xd2, 0xf4, 0xbd, 0x82, 0x1e, 0xfe, 0x27, 0x8e, 0x29, 0x94, 0x34, 0xe0, 0x27, 0xb4,
	0xed, 0x86, 0x1a, 0x55, 0x6a, 0x01, 0x2e, 0x52, 0x3b, 0x8a, 0xd8, 0xb6, 0x3b, 0x6f, 0x4e, 0x51,
	0x8f, 0xb6, 0x56, 0x89, 0x53, 0x8e, 0xa9, 0xac, 0xeb, 0xe8, 0x2b, 0xa1, 0x07, 0xaf, 0x4b, 0xd0,
	0xcb, 0x04, 0xf4, 0x22, 0x13, 0xe0, 0x7f, 0x26, 0xf4, 0xde, 0x3f, 0x19, 0xfc, 0x67, 0x6c, 0x97,
	0xbf, 0x93, 0x6d, 0xbb, 0x65, 0xf7, 0xf9, 0xb5, 0xf5, 0x9b, 0xe5, 0x07, 0xbf, 0xbc, 0xef, 0xab,
	0x80, 0x5c, 0xac, 0x02, 0xf2, 0x7b, 0x15, 0x90, 0x4f, 0xeb, 0xa0, 0x75, 0xb1, 0x0e, 0x5a, 0x3f,
	0xd7, 0x41, 0x8b, 0xf6, 0x85, 0xca, 0x77, 0xb2, 0x1f, 0xec, 0x25, 0x02, 0x47, 0xf6, 0x6d, 0x8c,
	0xc8, 0xdb, 0xf4, 0x7d, 0x86, 0xb3, 0x72, 0x62, 0xd1, 0x50, 0x28, 0x93, 0x2b, 0x13, 0x6a, 0x98,
	0xf3, 0x25, 0xe8, 0x70, 0x11, 0xd5, 0xa5, 0x3b, 0xa2, 0x09, 0x77, 0x79, 0xfb, 0x4f, 0x8d, 0xc0,
	0xaa, 0xfe, 0xe2, 0xdd, 0x18, 0x0d, 0x87, 0xc9, 0x37, 0xef, 0x78, 0x54, 0xe5, 0x1a, 0xda, 0x5c,
	0xc3, 0x3a, 0x57, 0x22, 0x90, 0x9d, 0x5d, 0xd2, 0x3f, 0x1a, 0x2c, 0xb5, 0x58, 0x5a, 0x63, 0x69,
	0x22, 0x30, 0xad, 0xb0, 0x95, 0xf7, 0x78, 0x17, 0x2c, 0x7d, 0x31, 0x1a, 0xbc, 0x02, 0xe4, 0x53,
	0x8e, 0xfc, 0x8f, 0xd7, 0xaf, 0x24, 0x71, 0x6c, 0x35, 0xf6, 0xf7, 0x52, 0x14, 0xc7, 0x89, 0xc0,
	0x38, 0xae, 0x64, 0x93, 0x5b, 0xee, 0xab, 0x79, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x68, 0xc4,
	0x34, 0xb6, 0xe9, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// TODO: change to generic tx-by-commitment
	TransactionByNote(ctx context.Context, in *TransactionByNoteRequest, opts ...grpc.CallOption) (*TransactionByNoteResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) TransactionByNote(ctx context.Context, in *TransactionByNoteRequest, opts ...grpc.CallOption) (*TransactionByNoteResponse, error) {
	out := new(TransactionByNoteResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.sct.v1alpha1.QueryService/TransactionByNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// TODO: change to generic tx-by-commitment
	TransactionByNote(context.Context, *TransactionByNoteRequest) (*TransactionByNoteResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) TransactionByNote(ctx context.Context, req *TransactionByNoteRequest) (*TransactionByNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionByNote not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_TransactionByNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionByNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TransactionByNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.sct.v1alpha1.QueryService/TransactionByNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TransactionByNote(ctx, req.(*TransactionByNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.core.component.sct.v1alpha1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransactionByNote",
			Handler:    _QueryService_TransactionByNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "penumbra/core/component/sct/v1alpha1/sct.proto",
}

func (m *Nullifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nullifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nullifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintSct(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionByNoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionByNoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionByNoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoteCommitment != nil {
		{
			size, err := m.NoteCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintSct(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionByNoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionByNoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionByNoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NoteSource != nil {
		{
			size, err := m.NoteSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSct(dAtA []byte, offset int, v uint64) int {
	offset -= sovSct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Nullifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *TransactionByNoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovSct(uint64(l))
	}
	if m.NoteCommitment != nil {
		l = m.NoteCommitment.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func (m *TransactionByNoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoteSource != nil {
		l = m.NoteSource.Size()
		n += 1 + l + sovSct(uint64(l))
	}
	return n
}

func sovSct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSct(x uint64) (n int) {
	return sovSct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Nullifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nullifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nullifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionByNoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionByNoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionByNoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteCommitment == nil {
				m.NoteCommitment = &v1alpha1.StateCommitment{}
			}
			if err := m.NoteCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionByNoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionByNoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionByNoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoteSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoteSource == nil {
				m.NoteSource = &v1alpha11.NoteSource{}
			}
			if err := m.NoteSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSct = fmt.Errorf("proto: unexpected end of group")
)

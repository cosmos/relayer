// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/component/governance/v1/governance.proto

package governancev1

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	v13 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/asset/v1"
	v17 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/community_pool/v1"
	v112 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/dex/v1"
	v110 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/distributions/v1"
	v19 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/fee/v1"
	v111 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/funding/v1"
	v18 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/ibc/v1"
	v14 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/sct/v1"
	v15 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/shielded_pool/v1"
	v16 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/stake/v1"
	v12 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/keys/v1"
	v1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/num/v1"
	v11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/crypto/decaf377_rdsa/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A vote.
type Vote_Vote int32

const (
	Vote_VOTE_UNSPECIFIED Vote_Vote = 0
	Vote_VOTE_ABSTAIN     Vote_Vote = 1
	Vote_VOTE_YES         Vote_Vote = 2
	Vote_VOTE_NO          Vote_Vote = 3
)

var Vote_Vote_name = map[int32]string{
	0: "VOTE_UNSPECIFIED",
	1: "VOTE_ABSTAIN",
	2: "VOTE_YES",
	3: "VOTE_NO",
}

var Vote_Vote_value = map[string]int32{
	"VOTE_UNSPECIFIED": 0,
	"VOTE_ABSTAIN":     1,
	"VOTE_YES":         2,
	"VOTE_NO":          3,
}

func (x Vote_Vote) String() string {
	return proto.EnumName(Vote_Vote_name, int32(x))
}

func (Vote_Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{14, 0}
}

// A Penumbra ZK delegator vote proof.
type ZKDelegatorVoteProof struct {
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *ZKDelegatorVoteProof) Reset()         { *m = ZKDelegatorVoteProof{} }
func (m *ZKDelegatorVoteProof) String() string { return proto.CompactTextString(m) }
func (*ZKDelegatorVoteProof) ProtoMessage()    {}
func (*ZKDelegatorVoteProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{0}
}
func (m *ZKDelegatorVoteProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKDelegatorVoteProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZKDelegatorVoteProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZKDelegatorVoteProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKDelegatorVoteProof.Merge(m, src)
}
func (m *ZKDelegatorVoteProof) XXX_Size() int {
	return m.Size()
}
func (m *ZKDelegatorVoteProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKDelegatorVoteProof.DiscardUnknown(m)
}

var xxx_messageInfo_ZKDelegatorVoteProof proto.InternalMessageInfo

func (m *ZKDelegatorVoteProof) GetInner() []byte {
	if m != nil {
		return m.Inner
	}
	return nil
}

type ProposalSubmit struct {
	// The proposal to be submitted.
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The amount of the proposal deposit.
	DepositAmount *v1.Amount `protobuf:"bytes,3,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
}

func (m *ProposalSubmit) Reset()         { *m = ProposalSubmit{} }
func (m *ProposalSubmit) String() string { return proto.CompactTextString(m) }
func (*ProposalSubmit) ProtoMessage()    {}
func (*ProposalSubmit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{1}
}
func (m *ProposalSubmit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalSubmit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalSubmit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalSubmit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalSubmit.Merge(m, src)
}
func (m *ProposalSubmit) XXX_Size() int {
	return m.Size()
}
func (m *ProposalSubmit) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalSubmit.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalSubmit proto.InternalMessageInfo

func (m *ProposalSubmit) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *ProposalSubmit) GetDepositAmount() *v1.Amount {
	if m != nil {
		return m.DepositAmount
	}
	return nil
}

type ProposalWithdraw struct {
	// The proposal to be withdrawn.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The reason for the proposal being withdrawn.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ProposalWithdraw) Reset()         { *m = ProposalWithdraw{} }
func (m *ProposalWithdraw) String() string { return proto.CompactTextString(m) }
func (*ProposalWithdraw) ProtoMessage()    {}
func (*ProposalWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{2}
}
func (m *ProposalWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalWithdraw.Merge(m, src)
}
func (m *ProposalWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *ProposalWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalWithdraw proto.InternalMessageInfo

func (m *ProposalWithdraw) GetProposal() uint64 {
	if m != nil {
		return m.Proposal
	}
	return 0
}

func (m *ProposalWithdraw) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ProposalDepositClaim struct {
	// The proposal to claim the deposit for.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The expected deposit amount.
	DepositAmount *v1.Amount `protobuf:"bytes,2,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	// The outcome of the proposal.
	Outcome *ProposalOutcome `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (m *ProposalDepositClaim) Reset()         { *m = ProposalDepositClaim{} }
func (m *ProposalDepositClaim) String() string { return proto.CompactTextString(m) }
func (*ProposalDepositClaim) ProtoMessage()    {}
func (*ProposalDepositClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{3}
}
func (m *ProposalDepositClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalDepositClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalDepositClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalDepositClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalDepositClaim.Merge(m, src)
}
func (m *ProposalDepositClaim) XXX_Size() int {
	return m.Size()
}
func (m *ProposalDepositClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalDepositClaim.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalDepositClaim proto.InternalMessageInfo

func (m *ProposalDepositClaim) GetProposal() uint64 {
	if m != nil {
		return m.Proposal
	}
	return 0
}

func (m *ProposalDepositClaim) GetDepositAmount() *v1.Amount {
	if m != nil {
		return m.DepositAmount
	}
	return nil
}

func (m *ProposalDepositClaim) GetOutcome() *ProposalOutcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

type ValidatorVote struct {
	// The effecting data for the vote.
	Body *ValidatorVoteBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The vote authorization signature is authorizing data.
	AuthSig *v11.SpendAuthSignature `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
}

func (m *ValidatorVote) Reset()         { *m = ValidatorVote{} }
func (m *ValidatorVote) String() string { return proto.CompactTextString(m) }
func (*ValidatorVote) ProtoMessage()    {}
func (*ValidatorVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{4}
}
func (m *ValidatorVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorVote.Merge(m, src)
}
func (m *ValidatorVote) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorVote.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorVote proto.InternalMessageInfo

func (m *ValidatorVote) GetBody() *ValidatorVoteBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ValidatorVote) GetAuthSig() *v11.SpendAuthSignature {
	if m != nil {
		return m.AuthSig
	}
	return nil
}

type ValidatorVoteReason struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ValidatorVoteReason) Reset()         { *m = ValidatorVoteReason{} }
func (m *ValidatorVoteReason) String() string { return proto.CompactTextString(m) }
func (*ValidatorVoteReason) ProtoMessage()    {}
func (*ValidatorVoteReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{5}
}
func (m *ValidatorVoteReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorVoteReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorVoteReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorVoteReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorVoteReason.Merge(m, src)
}
func (m *ValidatorVoteReason) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorVoteReason) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorVoteReason.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorVoteReason proto.InternalMessageInfo

func (m *ValidatorVoteReason) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ValidatorVoteBody struct {
	// The proposal being voted on.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The vote.
	Vote *Vote `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	// The validator identity.
	IdentityKey *v12.IdentityKey `protobuf:"bytes,3,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	// The validator governance key.
	GovernanceKey *v12.GovernanceKey `protobuf:"bytes,4,opt,name=governance_key,json=governanceKey,proto3" json:"governance_key,omitempty"`
	// A justification of the vote.
	Reason *ValidatorVoteReason `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ValidatorVoteBody) Reset()         { *m = ValidatorVoteBody{} }
func (m *ValidatorVoteBody) String() string { return proto.CompactTextString(m) }
func (*ValidatorVoteBody) ProtoMessage()    {}
func (*ValidatorVoteBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{6}
}
func (m *ValidatorVoteBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorVoteBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorVoteBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorVoteBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorVoteBody.Merge(m, src)
}
func (m *ValidatorVoteBody) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorVoteBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorVoteBody.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorVoteBody proto.InternalMessageInfo

func (m *ValidatorVoteBody) GetProposal() uint64 {
	if m != nil {
		return m.Proposal
	}
	return 0
}

func (m *ValidatorVoteBody) GetVote() *Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *ValidatorVoteBody) GetIdentityKey() *v12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

func (m *ValidatorVoteBody) GetGovernanceKey() *v12.GovernanceKey {
	if m != nil {
		return m.GovernanceKey
	}
	return nil
}

func (m *ValidatorVoteBody) GetReason() *ValidatorVoteReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

type DelegatorVote struct {
	// The effecting data for the vote.
	Body *DelegatorVoteBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The vote authorization signature is authorizing data.
	AuthSig *v11.SpendAuthSignature `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
	// The vote proof is authorizing data.
	Proof *ZKDelegatorVoteProof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *DelegatorVote) Reset()         { *m = DelegatorVote{} }
func (m *DelegatorVote) String() string { return proto.CompactTextString(m) }
func (*DelegatorVote) ProtoMessage()    {}
func (*DelegatorVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{7}
}
func (m *DelegatorVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorVote.Merge(m, src)
}
func (m *DelegatorVote) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorVote) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorVote.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorVote proto.InternalMessageInfo

func (m *DelegatorVote) GetBody() *DelegatorVoteBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *DelegatorVote) GetAuthSig() *v11.SpendAuthSignature {
	if m != nil {
		return m.AuthSig
	}
	return nil
}

func (m *DelegatorVote) GetProof() *ZKDelegatorVoteProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type DelegatorVoteBody struct {
	// The proposal being voted on.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The start position of the proposal in the TCT.
	StartPosition uint64 `protobuf:"varint,2,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The vote.
	Vote *Vote `protobuf:"bytes,3,opt,name=vote,proto3" json:"vote,omitempty"`
	// The value of the delegation note.
	Value *v13.Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// The amount of the delegation note, in unbonded penumbra.
	UnbondedAmount *v1.Amount `protobuf:"bytes,5,opt,name=unbonded_amount,json=unbondedAmount,proto3" json:"unbonded_amount,omitempty"`
	// The nullifier of the input note.
	Nullifier *v14.Nullifier `protobuf:"bytes,6,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The randomized validating key for the spend authorization signature.
	Rk *v11.SpendVerificationKey `protobuf:"bytes,7,opt,name=rk,proto3" json:"rk,omitempty"`
}

func (m *DelegatorVoteBody) Reset()         { *m = DelegatorVoteBody{} }
func (m *DelegatorVoteBody) String() string { return proto.CompactTextString(m) }
func (*DelegatorVoteBody) ProtoMessage()    {}
func (*DelegatorVoteBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{8}
}
func (m *DelegatorVoteBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorVoteBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorVoteBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorVoteBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorVoteBody.Merge(m, src)
}
func (m *DelegatorVoteBody) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorVoteBody) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorVoteBody.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorVoteBody proto.InternalMessageInfo

func (m *DelegatorVoteBody) GetProposal() uint64 {
	if m != nil {
		return m.Proposal
	}
	return 0
}

func (m *DelegatorVoteBody) GetStartPosition() uint64 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

func (m *DelegatorVoteBody) GetVote() *Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *DelegatorVoteBody) GetValue() *v13.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DelegatorVoteBody) GetUnbondedAmount() *v1.Amount {
	if m != nil {
		return m.UnbondedAmount
	}
	return nil
}

func (m *DelegatorVoteBody) GetNullifier() *v14.Nullifier {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *DelegatorVoteBody) GetRk() *v11.SpendVerificationKey {
	if m != nil {
		return m.Rk
	}
	return nil
}

type DelegatorVoteView struct {
	// Types that are valid to be assigned to DelegatorVote:
	//	*DelegatorVoteView_Visible_
	//	*DelegatorVoteView_Opaque_
	DelegatorVote isDelegatorVoteView_DelegatorVote `protobuf_oneof:"delegator_vote"`
}

func (m *DelegatorVoteView) Reset()         { *m = DelegatorVoteView{} }
func (m *DelegatorVoteView) String() string { return proto.CompactTextString(m) }
func (*DelegatorVoteView) ProtoMessage()    {}
func (*DelegatorVoteView) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{9}
}
func (m *DelegatorVoteView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorVoteView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorVoteView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorVoteView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorVoteView.Merge(m, src)
}
func (m *DelegatorVoteView) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorVoteView) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorVoteView.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorVoteView proto.InternalMessageInfo

type isDelegatorVoteView_DelegatorVote interface {
	isDelegatorVoteView_DelegatorVote()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DelegatorVoteView_Visible_ struct {
	Visible *DelegatorVoteView_Visible `protobuf:"bytes,1,opt,name=visible,proto3,oneof" json:"visible,omitempty"`
}
type DelegatorVoteView_Opaque_ struct {
	Opaque *DelegatorVoteView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof" json:"opaque,omitempty"`
}

func (*DelegatorVoteView_Visible_) isDelegatorVoteView_DelegatorVote() {}
func (*DelegatorVoteView_Opaque_) isDelegatorVoteView_DelegatorVote()  {}

func (m *DelegatorVoteView) GetDelegatorVote() isDelegatorVoteView_DelegatorVote {
	if m != nil {
		return m.DelegatorVote
	}
	return nil
}

func (m *DelegatorVoteView) GetVisible() *DelegatorVoteView_Visible {
	if x, ok := m.GetDelegatorVote().(*DelegatorVoteView_Visible_); ok {
		return x.Visible
	}
	return nil
}

func (m *DelegatorVoteView) GetOpaque() *DelegatorVoteView_Opaque {
	if x, ok := m.GetDelegatorVote().(*DelegatorVoteView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DelegatorVoteView) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DelegatorVoteView_Visible_)(nil),
		(*DelegatorVoteView_Opaque_)(nil),
	}
}

type DelegatorVoteView_Visible struct {
	DelegatorVote *DelegatorVote `protobuf:"bytes,1,opt,name=delegator_vote,json=delegatorVote,proto3" json:"delegator_vote,omitempty"`
	Note          *v15.NoteView  `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (m *DelegatorVoteView_Visible) Reset()         { *m = DelegatorVoteView_Visible{} }
func (m *DelegatorVoteView_Visible) String() string { return proto.CompactTextString(m) }
func (*DelegatorVoteView_Visible) ProtoMessage()    {}
func (*DelegatorVoteView_Visible) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{9, 0}
}
func (m *DelegatorVoteView_Visible) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorVoteView_Visible) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorVoteView_Visible.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorVoteView_Visible) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorVoteView_Visible.Merge(m, src)
}
func (m *DelegatorVoteView_Visible) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorVoteView_Visible) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorVoteView_Visible.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorVoteView_Visible proto.InternalMessageInfo

func (m *DelegatorVoteView_Visible) GetDelegatorVote() *DelegatorVote {
	if m != nil {
		return m.DelegatorVote
	}
	return nil
}

func (m *DelegatorVoteView_Visible) GetNote() *v15.NoteView {
	if m != nil {
		return m.Note
	}
	return nil
}

type DelegatorVoteView_Opaque struct {
	DelegatorVote *DelegatorVote `protobuf:"bytes,1,opt,name=delegator_vote,json=delegatorVote,proto3" json:"delegator_vote,omitempty"`
}

func (m *DelegatorVoteView_Opaque) Reset()         { *m = DelegatorVoteView_Opaque{} }
func (m *DelegatorVoteView_Opaque) String() string { return proto.CompactTextString(m) }
func (*DelegatorVoteView_Opaque) ProtoMessage()    {}
func (*DelegatorVoteView_Opaque) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{9, 1}
}
func (m *DelegatorVoteView_Opaque) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorVoteView_Opaque) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorVoteView_Opaque.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorVoteView_Opaque) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorVoteView_Opaque.Merge(m, src)
}
func (m *DelegatorVoteView_Opaque) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorVoteView_Opaque) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorVoteView_Opaque.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorVoteView_Opaque proto.InternalMessageInfo

func (m *DelegatorVoteView_Opaque) GetDelegatorVote() *DelegatorVote {
	if m != nil {
		return m.DelegatorVote
	}
	return nil
}

type DelegatorVotePlan struct {
	// The proposal to vote on.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The start position of the proposal in the TCT.
	StartPosition uint64 `protobuf:"varint,2,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The vote to cast.
	Vote *Vote `protobuf:"bytes,3,opt,name=vote,proto3" json:"vote,omitempty"`
	// The delegation note to prove that we can vote.
	StakedNote *v15.Note `protobuf:"bytes,4,opt,name=staked_note,json=stakedNote,proto3" json:"staked_note,omitempty"`
	// The position of that delegation note.
	StakedNotePosition uint64 `protobuf:"varint,5,opt,name=staked_note_position,json=stakedNotePosition,proto3" json:"staked_note_position,omitempty"`
	// The unbonded amount equivalent to the delegation note.
	UnbondedAmount *v1.Amount `protobuf:"bytes,6,opt,name=unbonded_amount,json=unbondedAmount,proto3" json:"unbonded_amount,omitempty"`
	// The randomizer to use for the proof of spend capability.
	Randomizer []byte `protobuf:"bytes,7,opt,name=randomizer,proto3" json:"randomizer,omitempty"`
	// The first blinding factor to use for the ZK delegator vote proof.
	ProofBlindingR []byte `protobuf:"bytes,8,opt,name=proof_blinding_r,json=proofBlindingR,proto3" json:"proof_blinding_r,omitempty"`
	// The second blinding factor to use for the ZK delegator vote proof.
	ProofBlindingS []byte `protobuf:"bytes,9,opt,name=proof_blinding_s,json=proofBlindingS,proto3" json:"proof_blinding_s,omitempty"`
}

func (m *DelegatorVotePlan) Reset()         { *m = DelegatorVotePlan{} }
func (m *DelegatorVotePlan) String() string { return proto.CompactTextString(m) }
func (*DelegatorVotePlan) ProtoMessage()    {}
func (*DelegatorVotePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{10}
}
func (m *DelegatorVotePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorVotePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorVotePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorVotePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorVotePlan.Merge(m, src)
}
func (m *DelegatorVotePlan) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorVotePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorVotePlan.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorVotePlan proto.InternalMessageInfo

func (m *DelegatorVotePlan) GetProposal() uint64 {
	if m != nil {
		return m.Proposal
	}
	return 0
}

func (m *DelegatorVotePlan) GetStartPosition() uint64 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

func (m *DelegatorVotePlan) GetVote() *Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *DelegatorVotePlan) GetStakedNote() *v15.Note {
	if m != nil {
		return m.StakedNote
	}
	return nil
}

func (m *DelegatorVotePlan) GetStakedNotePosition() uint64 {
	if m != nil {
		return m.StakedNotePosition
	}
	return 0
}

func (m *DelegatorVotePlan) GetUnbondedAmount() *v1.Amount {
	if m != nil {
		return m.UnbondedAmount
	}
	return nil
}

func (m *DelegatorVotePlan) GetRandomizer() []byte {
	if m != nil {
		return m.Randomizer
	}
	return nil
}

func (m *DelegatorVotePlan) GetProofBlindingR() []byte {
	if m != nil {
		return m.ProofBlindingR
	}
	return nil
}

func (m *DelegatorVotePlan) GetProofBlindingS() []byte {
	if m != nil {
		return m.ProofBlindingS
	}
	return nil
}

type CommunityPoolDeposit struct {
	// The value to deposit into the Community Pool.
	Value *v13.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommunityPoolDeposit) Reset()         { *m = CommunityPoolDeposit{} }
func (m *CommunityPoolDeposit) String() string { return proto.CompactTextString(m) }
func (*CommunityPoolDeposit) ProtoMessage()    {}
func (*CommunityPoolDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{11}
}
func (m *CommunityPoolDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityPoolDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityPoolDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityPoolDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityPoolDeposit.Merge(m, src)
}
func (m *CommunityPoolDeposit) XXX_Size() int {
	return m.Size()
}
func (m *CommunityPoolDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityPoolDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityPoolDeposit proto.InternalMessageInfo

func (m *CommunityPoolDeposit) GetValue() *v13.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type CommunityPoolSpend struct {
	// The value to spend from the Community Pool.
	Value *v13.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommunityPoolSpend) Reset()         { *m = CommunityPoolSpend{} }
func (m *CommunityPoolSpend) String() string { return proto.CompactTextString(m) }
func (*CommunityPoolSpend) ProtoMessage()    {}
func (*CommunityPoolSpend) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{12}
}
func (m *CommunityPoolSpend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityPoolSpend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityPoolSpend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityPoolSpend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityPoolSpend.Merge(m, src)
}
func (m *CommunityPoolSpend) XXX_Size() int {
	return m.Size()
}
func (m *CommunityPoolSpend) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityPoolSpend.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityPoolSpend proto.InternalMessageInfo

func (m *CommunityPoolSpend) GetValue() *v13.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type CommunityPoolOutput struct {
	// The value to output from the Community Pool.
	Value *v13.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The address to send the output to.
	Address *v12.Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CommunityPoolOutput) Reset()         { *m = CommunityPoolOutput{} }
func (m *CommunityPoolOutput) String() string { return proto.CompactTextString(m) }
func (*CommunityPoolOutput) ProtoMessage()    {}
func (*CommunityPoolOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{13}
}
func (m *CommunityPoolOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityPoolOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityPoolOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityPoolOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityPoolOutput.Merge(m, src)
}
func (m *CommunityPoolOutput) XXX_Size() int {
	return m.Size()
}
func (m *CommunityPoolOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityPoolOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityPoolOutput proto.InternalMessageInfo

func (m *CommunityPoolOutput) GetValue() *v13.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CommunityPoolOutput) GetAddress() *v12.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// A vote on a proposal.
type Vote struct {
	// The vote.
	Vote Vote_Vote `protobuf:"varint,1,opt,name=vote,proto3,enum=penumbra.core.component.governance.v1.Vote_Vote" json:"vote,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{14}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetVote() Vote_Vote {
	if m != nil {
		return m.Vote
	}
	return Vote_VOTE_UNSPECIFIED
}

// The current state of a proposal.
type ProposalState struct {
	// The state of the proposal.
	//
	// Types that are valid to be assigned to State:
	//	*ProposalState_Voting_
	//	*ProposalState_Withdrawn_
	//	*ProposalState_Finished_
	//	*ProposalState_Claimed_
	State isProposalState_State `protobuf_oneof:"state"`
}

func (m *ProposalState) Reset()         { *m = ProposalState{} }
func (m *ProposalState) String() string { return proto.CompactTextString(m) }
func (*ProposalState) ProtoMessage()    {}
func (*ProposalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{15}
}
func (m *ProposalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalState.Merge(m, src)
}
func (m *ProposalState) XXX_Size() int {
	return m.Size()
}
func (m *ProposalState) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalState.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalState proto.InternalMessageInfo

type isProposalState_State interface {
	isProposalState_State()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProposalState_Voting_ struct {
	Voting *ProposalState_Voting `protobuf:"bytes,2,opt,name=voting,proto3,oneof" json:"voting,omitempty"`
}
type ProposalState_Withdrawn_ struct {
	Withdrawn *ProposalState_Withdrawn `protobuf:"bytes,3,opt,name=withdrawn,proto3,oneof" json:"withdrawn,omitempty"`
}
type ProposalState_Finished_ struct {
	Finished *ProposalState_Finished `protobuf:"bytes,4,opt,name=finished,proto3,oneof" json:"finished,omitempty"`
}
type ProposalState_Claimed_ struct {
	Claimed *ProposalState_Claimed `protobuf:"bytes,5,opt,name=claimed,proto3,oneof" json:"claimed,omitempty"`
}

func (*ProposalState_Voting_) isProposalState_State()    {}
func (*ProposalState_Withdrawn_) isProposalState_State() {}
func (*ProposalState_Finished_) isProposalState_State()  {}
func (*ProposalState_Claimed_) isProposalState_State()   {}

func (m *ProposalState) GetState() isProposalState_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ProposalState) GetVoting() *ProposalState_Voting {
	if x, ok := m.GetState().(*ProposalState_Voting_); ok {
		return x.Voting
	}
	return nil
}

func (m *ProposalState) GetWithdrawn() *ProposalState_Withdrawn {
	if x, ok := m.GetState().(*ProposalState_Withdrawn_); ok {
		return x.Withdrawn
	}
	return nil
}

func (m *ProposalState) GetFinished() *ProposalState_Finished {
	if x, ok := m.GetState().(*ProposalState_Finished_); ok {
		return x.Finished
	}
	return nil
}

func (m *ProposalState) GetClaimed() *ProposalState_Claimed {
	if x, ok := m.GetState().(*ProposalState_Claimed_); ok {
		return x.Claimed
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProposalState) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProposalState_Voting_)(nil),
		(*ProposalState_Withdrawn_)(nil),
		(*ProposalState_Finished_)(nil),
		(*ProposalState_Claimed_)(nil),
	}
}

// Voting is in progress and the proposal has not yet concluded voting or been withdrawn.
type ProposalState_Voting struct {
}

func (m *ProposalState_Voting) Reset()         { *m = ProposalState_Voting{} }
func (m *ProposalState_Voting) String() string { return proto.CompactTextString(m) }
func (*ProposalState_Voting) ProtoMessage()    {}
func (*ProposalState_Voting) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{15, 0}
}
func (m *ProposalState_Voting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalState_Voting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalState_Voting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalState_Voting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalState_Voting.Merge(m, src)
}
func (m *ProposalState_Voting) XXX_Size() int {
	return m.Size()
}
func (m *ProposalState_Voting) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalState_Voting.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalState_Voting proto.InternalMessageInfo

// The proposal has been withdrawn but the voting period is not yet concluded.
type ProposalState_Withdrawn struct {
	// The reason for the withdrawal.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ProposalState_Withdrawn) Reset()         { *m = ProposalState_Withdrawn{} }
func (m *ProposalState_Withdrawn) String() string { return proto.CompactTextString(m) }
func (*ProposalState_Withdrawn) ProtoMessage()    {}
func (*ProposalState_Withdrawn) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{15, 1}
}
func (m *ProposalState_Withdrawn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalState_Withdrawn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalState_Withdrawn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalState_Withdrawn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalState_Withdrawn.Merge(m, src)
}
func (m *ProposalState_Withdrawn) XXX_Size() int {
	return m.Size()
}
func (m *ProposalState_Withdrawn) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalState_Withdrawn.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalState_Withdrawn proto.InternalMessageInfo

func (m *ProposalState_Withdrawn) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// The voting period has ended, and the proposal has been assigned an outcome.
type ProposalState_Finished struct {
	Outcome *ProposalOutcome `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (m *ProposalState_Finished) Reset()         { *m = ProposalState_Finished{} }
func (m *ProposalState_Finished) String() string { return proto.CompactTextString(m) }
func (*ProposalState_Finished) ProtoMessage()    {}
func (*ProposalState_Finished) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{15, 2}
}
func (m *ProposalState_Finished) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalState_Finished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalState_Finished.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalState_Finished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalState_Finished.Merge(m, src)
}
func (m *ProposalState_Finished) XXX_Size() int {
	return m.Size()
}
func (m *ProposalState_Finished) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalState_Finished.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalState_Finished proto.InternalMessageInfo

func (m *ProposalState_Finished) GetOutcome() *ProposalOutcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

// The voting period has ended, and the original proposer has claimed their deposit.
type ProposalState_Claimed struct {
	Outcome *ProposalOutcome `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (m *ProposalState_Claimed) Reset()         { *m = ProposalState_Claimed{} }
func (m *ProposalState_Claimed) String() string { return proto.CompactTextString(m) }
func (*ProposalState_Claimed) ProtoMessage()    {}
func (*ProposalState_Claimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{15, 3}
}
func (m *ProposalState_Claimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalState_Claimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalState_Claimed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalState_Claimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalState_Claimed.Merge(m, src)
}
func (m *ProposalState_Claimed) XXX_Size() int {
	return m.Size()
}
func (m *ProposalState_Claimed) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalState_Claimed.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalState_Claimed proto.InternalMessageInfo

func (m *ProposalState_Claimed) GetOutcome() *ProposalOutcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

// The outcome of a concluded proposal.
type ProposalOutcome struct {
	// Types that are valid to be assigned to Outcome:
	//	*ProposalOutcome_Passed_
	//	*ProposalOutcome_Failed_
	//	*ProposalOutcome_Slashed_
	Outcome isProposalOutcome_Outcome `protobuf_oneof:"outcome"`
}

func (m *ProposalOutcome) Reset()         { *m = ProposalOutcome{} }
func (m *ProposalOutcome) String() string { return proto.CompactTextString(m) }
func (*ProposalOutcome) ProtoMessage()    {}
func (*ProposalOutcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{16}
}
func (m *ProposalOutcome) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalOutcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalOutcome.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalOutcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalOutcome.Merge(m, src)
}
func (m *ProposalOutcome) XXX_Size() int {
	return m.Size()
}
func (m *ProposalOutcome) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalOutcome.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalOutcome proto.InternalMessageInfo

type isProposalOutcome_Outcome interface {
	isProposalOutcome_Outcome()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProposalOutcome_Passed_ struct {
	Passed *ProposalOutcome_Passed `protobuf:"bytes,1,opt,name=passed,proto3,oneof" json:"passed,omitempty"`
}
type ProposalOutcome_Failed_ struct {
	Failed *ProposalOutcome_Failed `protobuf:"bytes,2,opt,name=failed,proto3,oneof" json:"failed,omitempty"`
}
type ProposalOutcome_Slashed_ struct {
	Slashed *ProposalOutcome_Slashed `protobuf:"bytes,3,opt,name=slashed,proto3,oneof" json:"slashed,omitempty"`
}

func (*ProposalOutcome_Passed_) isProposalOutcome_Outcome()  {}
func (*ProposalOutcome_Failed_) isProposalOutcome_Outcome()  {}
func (*ProposalOutcome_Slashed_) isProposalOutcome_Outcome() {}

func (m *ProposalOutcome) GetOutcome() isProposalOutcome_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *ProposalOutcome) GetPassed() *ProposalOutcome_Passed {
	if x, ok := m.GetOutcome().(*ProposalOutcome_Passed_); ok {
		return x.Passed
	}
	return nil
}

func (m *ProposalOutcome) GetFailed() *ProposalOutcome_Failed {
	if x, ok := m.GetOutcome().(*ProposalOutcome_Failed_); ok {
		return x.Failed
	}
	return nil
}

func (m *ProposalOutcome) GetSlashed() *ProposalOutcome_Slashed {
	if x, ok := m.GetOutcome().(*ProposalOutcome_Slashed_); ok {
		return x.Slashed
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProposalOutcome) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProposalOutcome_Passed_)(nil),
		(*ProposalOutcome_Failed_)(nil),
		(*ProposalOutcome_Slashed_)(nil),
	}
}

// Whether or not the proposal was withdrawn.
type ProposalOutcome_Withdrawn struct {
	// The reason for withdrawing the proposal during the voting period.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ProposalOutcome_Withdrawn) Reset()         { *m = ProposalOutcome_Withdrawn{} }
func (m *ProposalOutcome_Withdrawn) String() string { return proto.CompactTextString(m) }
func (*ProposalOutcome_Withdrawn) ProtoMessage()    {}
func (*ProposalOutcome_Withdrawn) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{16, 0}
}
func (m *ProposalOutcome_Withdrawn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalOutcome_Withdrawn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalOutcome_Withdrawn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalOutcome_Withdrawn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalOutcome_Withdrawn.Merge(m, src)
}
func (m *ProposalOutcome_Withdrawn) XXX_Size() int {
	return m.Size()
}
func (m *ProposalOutcome_Withdrawn) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalOutcome_Withdrawn.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalOutcome_Withdrawn proto.InternalMessageInfo

func (m *ProposalOutcome_Withdrawn) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// The proposal was passed.
type ProposalOutcome_Passed struct {
}

func (m *ProposalOutcome_Passed) Reset()         { *m = ProposalOutcome_Passed{} }
func (m *ProposalOutcome_Passed) String() string { return proto.CompactTextString(m) }
func (*ProposalOutcome_Passed) ProtoMessage()    {}
func (*ProposalOutcome_Passed) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{16, 1}
}
func (m *ProposalOutcome_Passed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalOutcome_Passed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalOutcome_Passed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalOutcome_Passed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalOutcome_Passed.Merge(m, src)
}
func (m *ProposalOutcome_Passed) XXX_Size() int {
	return m.Size()
}
func (m *ProposalOutcome_Passed) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalOutcome_Passed.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalOutcome_Passed proto.InternalMessageInfo

// The proposal did not pass.
type ProposalOutcome_Failed struct {
	// Present if the proposal was withdrawn during the voting period.
	Withdrawn *ProposalOutcome_Withdrawn `protobuf:"bytes,1,opt,name=withdrawn,proto3" json:"withdrawn,omitempty"`
}

func (m *ProposalOutcome_Failed) Reset()         { *m = ProposalOutcome_Failed{} }
func (m *ProposalOutcome_Failed) String() string { return proto.CompactTextString(m) }
func (*ProposalOutcome_Failed) ProtoMessage()    {}
func (*ProposalOutcome_Failed) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{16, 2}
}
func (m *ProposalOutcome_Failed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalOutcome_Failed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalOutcome_Failed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalOutcome_Failed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalOutcome_Failed.Merge(m, src)
}
func (m *ProposalOutcome_Failed) XXX_Size() int {
	return m.Size()
}
func (m *ProposalOutcome_Failed) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalOutcome_Failed.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalOutcome_Failed proto.InternalMessageInfo

func (m *ProposalOutcome_Failed) GetWithdrawn() *ProposalOutcome_Withdrawn {
	if m != nil {
		return m.Withdrawn
	}
	return nil
}

// The proposal did not pass, and was slashed.
type ProposalOutcome_Slashed struct {
	// Present if the proposal was withdrawn during the voting period.
	Withdrawn *ProposalOutcome_Withdrawn `protobuf:"bytes,1,opt,name=withdrawn,proto3" json:"withdrawn,omitempty"`
}

func (m *ProposalOutcome_Slashed) Reset()         { *m = ProposalOutcome_Slashed{} }
func (m *ProposalOutcome_Slashed) String() string { return proto.CompactTextString(m) }
func (*ProposalOutcome_Slashed) ProtoMessage()    {}
func (*ProposalOutcome_Slashed) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{16, 3}
}
func (m *ProposalOutcome_Slashed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalOutcome_Slashed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalOutcome_Slashed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalOutcome_Slashed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalOutcome_Slashed.Merge(m, src)
}
func (m *ProposalOutcome_Slashed) XXX_Size() int {
	return m.Size()
}
func (m *ProposalOutcome_Slashed) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalOutcome_Slashed.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalOutcome_Slashed proto.InternalMessageInfo

func (m *ProposalOutcome_Slashed) GetWithdrawn() *ProposalOutcome_Withdrawn {
	if m != nil {
		return m.Withdrawn
	}
	return nil
}

// A tally of votes on a proposal.
type Tally struct {
	// The number of votes in favor of the proposal.
	Yes uint64 `protobuf:"varint,1,opt,name=yes,proto3" json:"yes,omitempty"`
	// The number of votes against the proposal.
	No uint64 `protobuf:"varint,2,opt,name=no,proto3" json:"no,omitempty"`
	// The number of abstentions.
	Abstain uint64 `protobuf:"varint,3,opt,name=abstain,proto3" json:"abstain,omitempty"`
}

func (m *Tally) Reset()         { *m = Tally{} }
func (m *Tally) String() string { return proto.CompactTextString(m) }
func (*Tally) ProtoMessage()    {}
func (*Tally) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{17}
}
func (m *Tally) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tally) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tally.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tally) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tally.Merge(m, src)
}
func (m *Tally) XXX_Size() int {
	return m.Size()
}
func (m *Tally) XXX_DiscardUnknown() {
	xxx_messageInfo_Tally.DiscardUnknown(m)
}

var xxx_messageInfo_Tally proto.InternalMessageInfo

func (m *Tally) GetYes() uint64 {
	if m != nil {
		return m.Yes
	}
	return 0
}

func (m *Tally) GetNo() uint64 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *Tally) GetAbstain() uint64 {
	if m != nil {
		return m.Abstain
	}
	return 0
}

// A proposal to be voted upon.
type Proposal struct {
	// The unique identifier of the proposal.
	Id uint64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	// A short title for the proposal.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// A natural-language description of the effect of the proposal and its justification.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The proposal's payload.
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*Proposal_Signaling_
	//	*Proposal_Emergency_
	//	*Proposal_ParameterChange_
	//	*Proposal_CommunityPoolSpend_
	//	*Proposal_UpgradePlan_
	//	*Proposal_FreezeIbcClient_
	//	*Proposal_UnfreezeIbcClient_
	Payload isProposal_Payload `protobuf_oneof:"payload"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{18}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

type isProposal_Payload interface {
	isProposal_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Proposal_Signaling_ struct {
	Signaling *Proposal_Signaling `protobuf:"bytes,5,opt,name=signaling,proto3,oneof" json:"signaling,omitempty"`
}
type Proposal_Emergency_ struct {
	Emergency *Proposal_Emergency `protobuf:"bytes,6,opt,name=emergency,proto3,oneof" json:"emergency,omitempty"`
}
type Proposal_ParameterChange_ struct {
	ParameterChange *Proposal_ParameterChange `protobuf:"bytes,7,opt,name=parameter_change,json=parameterChange,proto3,oneof" json:"parameter_change,omitempty"`
}
type Proposal_CommunityPoolSpend_ struct {
	CommunityPoolSpend *Proposal_CommunityPoolSpend `protobuf:"bytes,8,opt,name=community_pool_spend,json=communityPoolSpend,proto3,oneof" json:"community_pool_spend,omitempty"`
}
type Proposal_UpgradePlan_ struct {
	UpgradePlan *Proposal_UpgradePlan `protobuf:"bytes,9,opt,name=upgrade_plan,json=upgradePlan,proto3,oneof" json:"upgrade_plan,omitempty"`
}
type Proposal_FreezeIbcClient_ struct {
	FreezeIbcClient *Proposal_FreezeIbcClient `protobuf:"bytes,10,opt,name=freeze_ibc_client,json=freezeIbcClient,proto3,oneof" json:"freeze_ibc_client,omitempty"`
}
type Proposal_UnfreezeIbcClient_ struct {
	UnfreezeIbcClient *Proposal_UnfreezeIbcClient `protobuf:"bytes,11,opt,name=unfreeze_ibc_client,json=unfreezeIbcClient,proto3,oneof" json:"unfreeze_ibc_client,omitempty"`
}

func (*Proposal_Signaling_) isProposal_Payload()          {}
func (*Proposal_Emergency_) isProposal_Payload()          {}
func (*Proposal_ParameterChange_) isProposal_Payload()    {}
func (*Proposal_CommunityPoolSpend_) isProposal_Payload() {}
func (*Proposal_UpgradePlan_) isProposal_Payload()        {}
func (*Proposal_FreezeIbcClient_) isProposal_Payload()    {}
func (*Proposal_UnfreezeIbcClient_) isProposal_Payload()  {}

func (m *Proposal) GetPayload() isProposal_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Proposal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Proposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Proposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Proposal) GetSignaling() *Proposal_Signaling {
	if x, ok := m.GetPayload().(*Proposal_Signaling_); ok {
		return x.Signaling
	}
	return nil
}

func (m *Proposal) GetEmergency() *Proposal_Emergency {
	if x, ok := m.GetPayload().(*Proposal_Emergency_); ok {
		return x.Emergency
	}
	return nil
}

func (m *Proposal) GetParameterChange() *Proposal_ParameterChange {
	if x, ok := m.GetPayload().(*Proposal_ParameterChange_); ok {
		return x.ParameterChange
	}
	return nil
}

func (m *Proposal) GetCommunityPoolSpend() *Proposal_CommunityPoolSpend {
	if x, ok := m.GetPayload().(*Proposal_CommunityPoolSpend_); ok {
		return x.CommunityPoolSpend
	}
	return nil
}

func (m *Proposal) GetUpgradePlan() *Proposal_UpgradePlan {
	if x, ok := m.GetPayload().(*Proposal_UpgradePlan_); ok {
		return x.UpgradePlan
	}
	return nil
}

func (m *Proposal) GetFreezeIbcClient() *Proposal_FreezeIbcClient {
	if x, ok := m.GetPayload().(*Proposal_FreezeIbcClient_); ok {
		return x.FreezeIbcClient
	}
	return nil
}

func (m *Proposal) GetUnfreezeIbcClient() *Proposal_UnfreezeIbcClient {
	if x, ok := m.GetPayload().(*Proposal_UnfreezeIbcClient_); ok {
		return x.UnfreezeIbcClient
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Proposal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Proposal_Signaling_)(nil),
		(*Proposal_Emergency_)(nil),
		(*Proposal_ParameterChange_)(nil),
		(*Proposal_CommunityPoolSpend_)(nil),
		(*Proposal_UpgradePlan_)(nil),
		(*Proposal_FreezeIbcClient_)(nil),
		(*Proposal_UnfreezeIbcClient_)(nil),
	}
}

// A signaling proposal is meant to register a vote on-chain, but does not have an automatic
// effect when passed.
//
// It optionally contains a reference to a commit which contains code to upgrade the chain.
type Proposal_Signaling struct {
	// The commit to be voted upon, if any is relevant.
	Commit string `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (m *Proposal_Signaling) Reset()         { *m = Proposal_Signaling{} }
func (m *Proposal_Signaling) String() string { return proto.CompactTextString(m) }
func (*Proposal_Signaling) ProtoMessage()    {}
func (*Proposal_Signaling) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{18, 0}
}
func (m *Proposal_Signaling) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal_Signaling) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal_Signaling.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal_Signaling) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal_Signaling.Merge(m, src)
}
func (m *Proposal_Signaling) XXX_Size() int {
	return m.Size()
}
func (m *Proposal_Signaling) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal_Signaling.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal_Signaling proto.InternalMessageInfo

func (m *Proposal_Signaling) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

// An emergency proposal can be passed instantaneously by a 2/3 majority of validators, without
// waiting for the voting period to expire.
//
// If the boolean `halt_chain` is set to `true`, then the chain will halt immediately when the
// proposal is passed.
type Proposal_Emergency struct {
	// If `true`, the chain will halt immediately when the proposal is passed.
	HaltChain bool `protobuf:"varint,1,opt,name=halt_chain,json=haltChain,proto3" json:"halt_chain,omitempty"`
}

func (m *Proposal_Emergency) Reset()         { *m = Proposal_Emergency{} }
func (m *Proposal_Emergency) String() string { return proto.CompactTextString(m) }
func (*Proposal_Emergency) ProtoMessage()    {}
func (*Proposal_Emergency) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{18, 1}
}
func (m *Proposal_Emergency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal_Emergency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal_Emergency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal_Emergency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal_Emergency.Merge(m, src)
}
func (m *Proposal_Emergency) XXX_Size() int {
	return m.Size()
}
func (m *Proposal_Emergency) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal_Emergency.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal_Emergency proto.InternalMessageInfo

func (m *Proposal_Emergency) GetHaltChain() bool {
	if m != nil {
		return m.HaltChain
	}
	return false
}

// A parameter change proposal describes a replacement of the app parameters, which should take
// effect when the proposal is passed.
type Proposal_ParameterChange struct {
	// The old app parameters to be replaced: even if the proposal passes, the update will not be
	// applied if the app parameters have changed *at all* from these app parameters. Usually,
	// this should be set to the current app parameters at time of proposal.
	OldParameters *ChangedAppParameters `protobuf:"bytes,1,opt,name=old_parameters,json=oldParameters,proto3" json:"old_parameters,omitempty"`
	// The new app parameters to be set: the *entire* app parameters will be replaced with these
	// at the time the proposal is passed, for every component's parameters that is set. If a component's
	// parameters are not set, then they were not changed by the proposal, and will not be updated.
	NewParameters *ChangedAppParameters `protobuf:"bytes,2,opt,name=new_parameters,json=newParameters,proto3" json:"new_parameters,omitempty"`
}

func (m *Proposal_ParameterChange) Reset()         { *m = Proposal_ParameterChange{} }
func (m *Proposal_ParameterChange) String() string { return proto.CompactTextString(m) }
func (*Proposal_ParameterChange) ProtoMessage()    {}
func (*Proposal_ParameterChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{18, 2}
}
func (m *Proposal_ParameterChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal_ParameterChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal_ParameterChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal_ParameterChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal_ParameterChange.Merge(m, src)
}
func (m *Proposal_ParameterChange) XXX_Size() int {
	return m.Size()
}
func (m *Proposal_ParameterChange) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal_ParameterChange.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal_ParameterChange proto.InternalMessageInfo

func (m *Proposal_ParameterChange) GetOldParameters() *ChangedAppParameters {
	if m != nil {
		return m.OldParameters
	}
	return nil
}

func (m *Proposal_ParameterChange) GetNewParameters() *ChangedAppParameters {
	if m != nil {
		return m.NewParameters
	}
	return nil
}

// A Community Pool spend proposal describes zero or more transactions to execute on behalf of the Community Pool, with
// access to its funds, and zero or more scheduled transactions from previous passed proposals to
// cancel.
type Proposal_CommunityPoolSpend struct {
	// The transaction plan to be executed at the time the proposal is passed. This must be a
	// transaction plan which can be executed by the Community Pool, which means it can't require any witness
	// data or authorization signatures, but it may use the `CommunityPoolSpend` action.
	TransactionPlan *types.Any `protobuf:"bytes,2,opt,name=transaction_plan,json=transactionPlan,proto3" json:"transaction_plan,omitempty"`
}

func (m *Proposal_CommunityPoolSpend) Reset()         { *m = Proposal_CommunityPoolSpend{} }
func (m *Proposal_CommunityPoolSpend) String() string { return proto.CompactTextString(m) }
func (*Proposal_CommunityPoolSpend) ProtoMessage()    {}
func (*Proposal_CommunityPoolSpend) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{18, 3}
}
func (m *Proposal_CommunityPoolSpend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal_CommunityPoolSpend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal_CommunityPoolSpend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal_CommunityPoolSpend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal_CommunityPoolSpend.Merge(m, src)
}
func (m *Proposal_CommunityPoolSpend) XXX_Size() int {
	return m.Size()
}
func (m *Proposal_CommunityPoolSpend) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal_CommunityPoolSpend.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal_CommunityPoolSpend proto.InternalMessageInfo

func (m *Proposal_CommunityPoolSpend) GetTransactionPlan() *types.Any {
	if m != nil {
		return m.TransactionPlan
	}
	return nil
}

// An upgrade plan describes a candidate upgrade to be executed at a certain height. If passed, the chain
// will halt at the specified height.
type Proposal_UpgradePlan struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Proposal_UpgradePlan) Reset()         { *m = Proposal_UpgradePlan{} }
func (m *Proposal_UpgradePlan) String() string { return proto.CompactTextString(m) }
func (*Proposal_UpgradePlan) ProtoMessage()    {}
func (*Proposal_UpgradePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{18, 4}
}
func (m *Proposal_UpgradePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal_UpgradePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal_UpgradePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal_UpgradePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal_UpgradePlan.Merge(m, src)
}
func (m *Proposal_UpgradePlan) XXX_Size() int {
	return m.Size()
}
func (m *Proposal_UpgradePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal_UpgradePlan.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal_UpgradePlan proto.InternalMessageInfo

func (m *Proposal_UpgradePlan) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Freeze an existing IBC client.
// Like `Emergency` proposals, it is enacted immediately after receiving
// +2/3 of validator votes.
type Proposal_FreezeIbcClient struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *Proposal_FreezeIbcClient) Reset()         { *m = Proposal_FreezeIbcClient{} }
func (m *Proposal_FreezeIbcClient) String() string { return proto.CompactTextString(m) }
func (*Proposal_FreezeIbcClient) ProtoMessage()    {}
func (*Proposal_FreezeIbcClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{18, 5}
}
func (m *Proposal_FreezeIbcClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal_FreezeIbcClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal_FreezeIbcClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal_FreezeIbcClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal_FreezeIbcClient.Merge(m, src)
}
func (m *Proposal_FreezeIbcClient) XXX_Size() int {
	return m.Size()
}
func (m *Proposal_FreezeIbcClient) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal_FreezeIbcClient.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal_FreezeIbcClient proto.InternalMessageInfo

func (m *Proposal_FreezeIbcClient) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// Unfreeze an existing IBC client.
// Like `Emergency` proposals, it is enacted immediately after receiving
// +2/3 of validator votes.
type Proposal_UnfreezeIbcClient struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *Proposal_UnfreezeIbcClient) Reset()         { *m = Proposal_UnfreezeIbcClient{} }
func (m *Proposal_UnfreezeIbcClient) String() string { return proto.CompactTextString(m) }
func (*Proposal_UnfreezeIbcClient) ProtoMessage()    {}
func (*Proposal_UnfreezeIbcClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{18, 6}
}
func (m *Proposal_UnfreezeIbcClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal_UnfreezeIbcClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal_UnfreezeIbcClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal_UnfreezeIbcClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal_UnfreezeIbcClient.Merge(m, src)
}
func (m *Proposal_UnfreezeIbcClient) XXX_Size() int {
	return m.Size()
}
func (m *Proposal_UnfreezeIbcClient) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal_UnfreezeIbcClient.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal_UnfreezeIbcClient proto.InternalMessageInfo

func (m *Proposal_UnfreezeIbcClient) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type ProposalInfoRequest struct {
	// The proposal id to request information on.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *ProposalInfoRequest) Reset()         { *m = ProposalInfoRequest{} }
func (m *ProposalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ProposalInfoRequest) ProtoMessage()    {}
func (*ProposalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{19}
}
func (m *ProposalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalInfoRequest.Merge(m, src)
}
func (m *ProposalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalInfoRequest proto.InternalMessageInfo

func (m *ProposalInfoRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

type ProposalInfoResponse struct {
	// The block height at which the proposal started voting.
	StartBlockHeight uint64 `protobuf:"varint,1,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	// The position of the state commitment tree at which the proposal is considered to have started voting.
	StartPosition uint64 `protobuf:"varint,2,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
}

func (m *ProposalInfoResponse) Reset()         { *m = ProposalInfoResponse{} }
func (m *ProposalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ProposalInfoResponse) ProtoMessage()    {}
func (*ProposalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{20}
}
func (m *ProposalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalInfoResponse.Merge(m, src)
}
func (m *ProposalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalInfoResponse proto.InternalMessageInfo

func (m *ProposalInfoResponse) GetStartBlockHeight() uint64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *ProposalInfoResponse) GetStartPosition() uint64 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

type ProposalDataRequest struct {
	// The proposal id to request information on.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *ProposalDataRequest) Reset()         { *m = ProposalDataRequest{} }
func (m *ProposalDataRequest) String() string { return proto.CompactTextString(m) }
func (*ProposalDataRequest) ProtoMessage()    {}
func (*ProposalDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{21}
}
func (m *ProposalDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalDataRequest.Merge(m, src)
}
func (m *ProposalDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposalDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalDataRequest proto.InternalMessageInfo

func (m *ProposalDataRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

type ProposalDataResponse struct {
	// The proposal metadata.
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The block height at which the proposal started voting.
	StartBlockHeight uint64 `protobuf:"varint,2,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	// The block height at which the proposal ends voting.
	EndBlockHeight uint64 `protobuf:"varint,3,opt,name=end_block_height,json=endBlockHeight,proto3" json:"end_block_height,omitempty"`
	// The position of the state commitment tree at which the proposal is considered to have started voting.
	StartPosition uint64 `protobuf:"varint,4,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The current state of the proposal.
	State *ProposalState `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// The deposit amount paid for the proposal.
	ProposalDepositAmount *v1.Amount `protobuf:"bytes,6,opt,name=proposal_deposit_amount,json=proposalDepositAmount,proto3" json:"proposal_deposit_amount,omitempty"`
}

func (m *ProposalDataResponse) Reset()         { *m = ProposalDataResponse{} }
func (m *ProposalDataResponse) String() string { return proto.CompactTextString(m) }
func (*ProposalDataResponse) ProtoMessage()    {}
func (*ProposalDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{22}
}
func (m *ProposalDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalDataResponse.Merge(m, src)
}
func (m *ProposalDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposalDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalDataResponse proto.InternalMessageInfo

func (m *ProposalDataResponse) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *ProposalDataResponse) GetStartBlockHeight() uint64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *ProposalDataResponse) GetEndBlockHeight() uint64 {
	if m != nil {
		return m.EndBlockHeight
	}
	return 0
}

func (m *ProposalDataResponse) GetStartPosition() uint64 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

func (m *ProposalDataResponse) GetState() *ProposalState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ProposalDataResponse) GetProposalDepositAmount() *v1.Amount {
	if m != nil {
		return m.ProposalDepositAmount
	}
	return nil
}

// Requests the validator rate data for a proposal.
type ProposalRateDataRequest struct {
	// The proposal id to request information on.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *ProposalRateDataRequest) Reset()         { *m = ProposalRateDataRequest{} }
func (m *ProposalRateDataRequest) String() string { return proto.CompactTextString(m) }
func (*ProposalRateDataRequest) ProtoMessage()    {}
func (*ProposalRateDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{23}
}
func (m *ProposalRateDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalRateDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalRateDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalRateDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalRateDataRequest.Merge(m, src)
}
func (m *ProposalRateDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposalRateDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalRateDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalRateDataRequest proto.InternalMessageInfo

func (m *ProposalRateDataRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// The rate data for a single validator.
type ProposalRateDataResponse struct {
	RateData *v16.RateData `protobuf:"bytes,1,opt,name=rate_data,json=rateData,proto3" json:"rate_data,omitempty"`
}

func (m *ProposalRateDataResponse) Reset()         { *m = ProposalRateDataResponse{} }
func (m *ProposalRateDataResponse) String() string { return proto.CompactTextString(m) }
func (*ProposalRateDataResponse) ProtoMessage()    {}
func (*ProposalRateDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{24}
}
func (m *ProposalRateDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalRateDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalRateDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalRateDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalRateDataResponse.Merge(m, src)
}
func (m *ProposalRateDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposalRateDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalRateDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalRateDataResponse proto.InternalMessageInfo

func (m *ProposalRateDataResponse) GetRateData() *v16.RateData {
	if m != nil {
		return m.RateData
	}
	return nil
}

// Requests the list of all proposals.
type ProposalListRequest struct {
	// Whether to include proposals that are no longer active.;
	Inactive bool `protobuf:"varint,2,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (m *ProposalListRequest) Reset()         { *m = ProposalListRequest{} }
func (m *ProposalListRequest) String() string { return proto.CompactTextString(m) }
func (*ProposalListRequest) ProtoMessage()    {}
func (*ProposalListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{25}
}
func (m *ProposalListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalListRequest.Merge(m, src)
}
func (m *ProposalListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposalListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalListRequest proto.InternalMessageInfo

func (m *ProposalListRequest) GetInactive() bool {
	if m != nil {
		return m.Inactive
	}
	return false
}

// The data for a single proposal.
type ProposalListResponse struct {
	// The proposal metadata.
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The block height at which the proposal started voting.
	StartBlockHeight uint64 `protobuf:"varint,2,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	// The block height at which the proposal ends voting.
	EndBlockHeight uint64 `protobuf:"varint,3,opt,name=end_block_height,json=endBlockHeight,proto3" json:"end_block_height,omitempty"`
	// The position of the state commitment tree at which the proposal is considered to have started voting.
	StartPosition uint64 `protobuf:"varint,4,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The current state of the proposal.
	State *ProposalState `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ProposalListResponse) Reset()         { *m = ProposalListResponse{} }
func (m *ProposalListResponse) String() string { return proto.CompactTextString(m) }
func (*ProposalListResponse) ProtoMessage()    {}
func (*ProposalListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{26}
}
func (m *ProposalListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalListResponse.Merge(m, src)
}
func (m *ProposalListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposalListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalListResponse proto.InternalMessageInfo

func (m *ProposalListResponse) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *ProposalListResponse) GetStartBlockHeight() uint64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *ProposalListResponse) GetEndBlockHeight() uint64 {
	if m != nil {
		return m.EndBlockHeight
	}
	return 0
}

func (m *ProposalListResponse) GetStartPosition() uint64 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

func (m *ProposalListResponse) GetState() *ProposalState {
	if m != nil {
		return m.State
	}
	return nil
}

// Requests the list of all validator votes for a given proposal.
type ValidatorVotesRequest struct {
	// The proposal id to request information on.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *ValidatorVotesRequest) Reset()         { *m = ValidatorVotesRequest{} }
func (m *ValidatorVotesRequest) String() string { return proto.CompactTextString(m) }
func (*ValidatorVotesRequest) ProtoMessage()    {}
func (*ValidatorVotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{27}
}
func (m *ValidatorVotesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorVotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorVotesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorVotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorVotesRequest.Merge(m, src)
}
func (m *ValidatorVotesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorVotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorVotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorVotesRequest proto.InternalMessageInfo

func (m *ValidatorVotesRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// The data for a single validator vote.
type ValidatorVotesResponse struct {
	// The vote.
	Vote *Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	// The validator identity.
	IdentityKey *v12.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *ValidatorVotesResponse) Reset()         { *m = ValidatorVotesResponse{} }
func (m *ValidatorVotesResponse) String() string { return proto.CompactTextString(m) }
func (*ValidatorVotesResponse) ProtoMessage()    {}
func (*ValidatorVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{28}
}
func (m *ValidatorVotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorVotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorVotesResponse.Merge(m, src)
}
func (m *ValidatorVotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorVotesResponse proto.InternalMessageInfo

func (m *ValidatorVotesResponse) GetVote() *Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *ValidatorVotesResponse) GetIdentityKey() *v12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

// Governance configuration data.
type GovernanceParameters struct {
	// The number of blocks during which a proposal is voted on.
	ProposalVotingBlocks uint64 `protobuf:"varint,1,opt,name=proposal_voting_blocks,json=proposalVotingBlocks,proto3" json:"proposal_voting_blocks,omitempty"`
	// The deposit required to create a proposal.
	ProposalDepositAmount *v1.Amount `protobuf:"bytes,2,opt,name=proposal_deposit_amount,json=proposalDepositAmount,proto3" json:"proposal_deposit_amount,omitempty"`
	// The quorum required for a proposal to be considered valid, as a fraction of the total stake
	// weight of the network.
	ProposalValidQuorum string `protobuf:"bytes,3,opt,name=proposal_valid_quorum,json=proposalValidQuorum,proto3" json:"proposal_valid_quorum,omitempty"`
	// The threshold for a proposal to pass voting, as a ratio of "yes" votes over "no" votes.
	ProposalPassThreshold string `protobuf:"bytes,4,opt,name=proposal_pass_threshold,json=proposalPassThreshold,proto3" json:"proposal_pass_threshold,omitempty"`
	// The threshold for a proposal to be slashed, regardless of whether the "yes" and "no" votes
	// would have passed it, as a ratio of "no" votes over all total votes.
	ProposalSlashThreshold string `protobuf:"bytes,5,opt,name=proposal_slash_threshold,json=proposalSlashThreshold,proto3" json:"proposal_slash_threshold,omitempty"`
}

func (m *GovernanceParameters) Reset()         { *m = GovernanceParameters{} }
func (m *GovernanceParameters) String() string { return proto.CompactTextString(m) }
func (*GovernanceParameters) ProtoMessage()    {}
func (*GovernanceParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{29}
}
func (m *GovernanceParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovernanceParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovernanceParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovernanceParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernanceParameters.Merge(m, src)
}
func (m *GovernanceParameters) XXX_Size() int {
	return m.Size()
}
func (m *GovernanceParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernanceParameters.DiscardUnknown(m)
}

var xxx_messageInfo_GovernanceParameters proto.InternalMessageInfo

func (m *GovernanceParameters) GetProposalVotingBlocks() uint64 {
	if m != nil {
		return m.ProposalVotingBlocks
	}
	return 0
}

func (m *GovernanceParameters) GetProposalDepositAmount() *v1.Amount {
	if m != nil {
		return m.ProposalDepositAmount
	}
	return nil
}

func (m *GovernanceParameters) GetProposalValidQuorum() string {
	if m != nil {
		return m.ProposalValidQuorum
	}
	return ""
}

func (m *GovernanceParameters) GetProposalPassThreshold() string {
	if m != nil {
		return m.ProposalPassThreshold
	}
	return ""
}

func (m *GovernanceParameters) GetProposalSlashThreshold() string {
	if m != nil {
		return m.ProposalSlashThreshold
	}
	return ""
}

// Governance genesis state.
type GenesisContent struct {
	// Governance parameters.
	GovernanceParams *GovernanceParameters `protobuf:"bytes,1,opt,name=governance_params,json=governanceParams,proto3" json:"governance_params,omitempty"`
}

func (m *GenesisContent) Reset()         { *m = GenesisContent{} }
func (m *GenesisContent) String() string { return proto.CompactTextString(m) }
func (*GenesisContent) ProtoMessage()    {}
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{30}
}
func (m *GenesisContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContent.Merge(m, src)
}
func (m *GenesisContent) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContent) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContent.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContent proto.InternalMessageInfo

func (m *GenesisContent) GetGovernanceParams() *GovernanceParameters {
	if m != nil {
		return m.GovernanceParams
	}
	return nil
}

// Note: must be kept in sync with AppParameters.
// Each field here is optional.
type ChangedAppParameters struct {
	// Sct module parameters.
	SctParams *v14.SctParameters `protobuf:"bytes,1,opt,name=sct_params,json=sctParams,proto3" json:"sct_params,omitempty"`
	// Community Pool module parameters.
	CommunityPoolParams *v17.CommunityPoolParameters `protobuf:"bytes,2,opt,name=community_pool_params,json=communityPoolParams,proto3" json:"community_pool_params,omitempty"`
	// Governance module parameters.
	GovernanceParams *GovernanceParameters `protobuf:"bytes,3,opt,name=governance_params,json=governanceParams,proto3" json:"governance_params,omitempty"`
	// IBC module parameters.
	IbcParams *v18.IbcParameters `protobuf:"bytes,4,opt,name=ibc_params,json=ibcParams,proto3" json:"ibc_params,omitempty"`
	// Stake module parameters.
	StakeParams *v16.StakeParameters `protobuf:"bytes,5,opt,name=stake_params,json=stakeParams,proto3" json:"stake_params,omitempty"`
	// Fee module parameters.
	FeeParams *v19.FeeParameters `protobuf:"bytes,6,opt,name=fee_params,json=feeParams,proto3" json:"fee_params,omitempty"`
	// Distributions module parameters.
	DistributionsParams *v110.DistributionsParameters `protobuf:"bytes,7,opt,name=distributions_params,json=distributionsParams,proto3" json:"distributions_params,omitempty"`
	// Funding module parameters.
	FundingParams *v111.FundingParameters `protobuf:"bytes,8,opt,name=funding_params,json=fundingParams,proto3" json:"funding_params,omitempty"`
	// Shielded pool module parameters
	ShieldedPoolParams *v15.ShieldedPoolParameters `protobuf:"bytes,9,opt,name=shielded_pool_params,json=shieldedPoolParams,proto3" json:"shielded_pool_params,omitempty"`
	// DEX component parameters
	DexParams *v112.DexParameters `protobuf:"bytes,10,opt,name=dex_params,json=dexParams,proto3" json:"dex_params,omitempty"`
}

func (m *ChangedAppParameters) Reset()         { *m = ChangedAppParameters{} }
func (m *ChangedAppParameters) String() string { return proto.CompactTextString(m) }
func (*ChangedAppParameters) ProtoMessage()    {}
func (*ChangedAppParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{31}
}
func (m *ChangedAppParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangedAppParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangedAppParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangedAppParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangedAppParameters.Merge(m, src)
}
func (m *ChangedAppParameters) XXX_Size() int {
	return m.Size()
}
func (m *ChangedAppParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangedAppParameters.DiscardUnknown(m)
}

var xxx_messageInfo_ChangedAppParameters proto.InternalMessageInfo

func (m *ChangedAppParameters) GetSctParams() *v14.SctParameters {
	if m != nil {
		return m.SctParams
	}
	return nil
}

func (m *ChangedAppParameters) GetCommunityPoolParams() *v17.CommunityPoolParameters {
	if m != nil {
		return m.CommunityPoolParams
	}
	return nil
}

func (m *ChangedAppParameters) GetGovernanceParams() *GovernanceParameters {
	if m != nil {
		return m.GovernanceParams
	}
	return nil
}

func (m *ChangedAppParameters) GetIbcParams() *v18.IbcParameters {
	if m != nil {
		return m.IbcParams
	}
	return nil
}

func (m *ChangedAppParameters) GetStakeParams() *v16.StakeParameters {
	if m != nil {
		return m.StakeParams
	}
	return nil
}

func (m *ChangedAppParameters) GetFeeParams() *v19.FeeParameters {
	if m != nil {
		return m.FeeParams
	}
	return nil
}

func (m *ChangedAppParameters) GetDistributionsParams() *v110.DistributionsParameters {
	if m != nil {
		return m.DistributionsParams
	}
	return nil
}

func (m *ChangedAppParameters) GetFundingParams() *v111.FundingParameters {
	if m != nil {
		return m.FundingParams
	}
	return nil
}

func (m *ChangedAppParameters) GetShieldedPoolParams() *v15.ShieldedPoolParameters {
	if m != nil {
		return m.ShieldedPoolParams
	}
	return nil
}

func (m *ChangedAppParameters) GetDexParams() *v112.DexParameters {
	if m != nil {
		return m.DexParams
	}
	return nil
}

type ChangedAppParametersSet struct {
	// The set of app parameters at the time the proposal was submitted.
	Old *ChangedAppParameters `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	// The new set of parameters the proposal is trying to enact.
	New *ChangedAppParameters `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (m *ChangedAppParametersSet) Reset()         { *m = ChangedAppParametersSet{} }
func (m *ChangedAppParametersSet) String() string { return proto.CompactTextString(m) }
func (*ChangedAppParametersSet) ProtoMessage()    {}
func (*ChangedAppParametersSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{32}
}
func (m *ChangedAppParametersSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangedAppParametersSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangedAppParametersSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangedAppParametersSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangedAppParametersSet.Merge(m, src)
}
func (m *ChangedAppParametersSet) XXX_Size() int {
	return m.Size()
}
func (m *ChangedAppParametersSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangedAppParametersSet.DiscardUnknown(m)
}

var xxx_messageInfo_ChangedAppParametersSet proto.InternalMessageInfo

func (m *ChangedAppParametersSet) GetOld() *ChangedAppParameters {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *ChangedAppParametersSet) GetNew() *ChangedAppParameters {
	if m != nil {
		return m.New
	}
	return nil
}

type VotingPowerAtProposalStartRequest struct {
	// The proposal id to request information on.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// The validator identity key to request information on.
	IdentityKey *v12.IdentityKey `protobuf:"bytes,3,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *VotingPowerAtProposalStartRequest) Reset()         { *m = VotingPowerAtProposalStartRequest{} }
func (m *VotingPowerAtProposalStartRequest) String() string { return proto.CompactTextString(m) }
func (*VotingPowerAtProposalStartRequest) ProtoMessage()    {}
func (*VotingPowerAtProposalStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{33}
}
func (m *VotingPowerAtProposalStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotingPowerAtProposalStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotingPowerAtProposalStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotingPowerAtProposalStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingPowerAtProposalStartRequest.Merge(m, src)
}
func (m *VotingPowerAtProposalStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *VotingPowerAtProposalStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingPowerAtProposalStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VotingPowerAtProposalStartRequest proto.InternalMessageInfo

func (m *VotingPowerAtProposalStartRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *VotingPowerAtProposalStartRequest) GetIdentityKey() *v12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

type VotingPowerAtProposalStartResponse struct {
	// The voting power for the given identity key at the start of the proposal.
	// TODO: since we don't support optional fields in our protos any more,
	// this will be set to 0 if the validator was not active at the start of the proposal.
	// Is this potentially an issue?
	VotingPower uint64 `protobuf:"varint,1,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *VotingPowerAtProposalStartResponse) Reset()         { *m = VotingPowerAtProposalStartResponse{} }
func (m *VotingPowerAtProposalStartResponse) String() string { return proto.CompactTextString(m) }
func (*VotingPowerAtProposalStartResponse) ProtoMessage()    {}
func (*VotingPowerAtProposalStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{34}
}
func (m *VotingPowerAtProposalStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotingPowerAtProposalStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotingPowerAtProposalStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotingPowerAtProposalStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingPowerAtProposalStartResponse.Merge(m, src)
}
func (m *VotingPowerAtProposalStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *VotingPowerAtProposalStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingPowerAtProposalStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VotingPowerAtProposalStartResponse proto.InternalMessageInfo

func (m *VotingPowerAtProposalStartResponse) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

type AllTalliedDelegatorVotesForProposalRequest struct {
	// The proposal id to request information on.
	ProposalId uint64 `protobuf:"varint,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *AllTalliedDelegatorVotesForProposalRequest) Reset() {
	*m = AllTalliedDelegatorVotesForProposalRequest{}
}
func (m *AllTalliedDelegatorVotesForProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*AllTalliedDelegatorVotesForProposalRequest) ProtoMessage() {}
func (*AllTalliedDelegatorVotesForProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{35}
}
func (m *AllTalliedDelegatorVotesForProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllTalliedDelegatorVotesForProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllTalliedDelegatorVotesForProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllTalliedDelegatorVotesForProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllTalliedDelegatorVotesForProposalRequest.Merge(m, src)
}
func (m *AllTalliedDelegatorVotesForProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllTalliedDelegatorVotesForProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllTalliedDelegatorVotesForProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllTalliedDelegatorVotesForProposalRequest proto.InternalMessageInfo

func (m *AllTalliedDelegatorVotesForProposalRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

type AllTalliedDelegatorVotesForProposalResponse struct {
	// The tally of delegator votes for a given validator for the proposal.
	Tally *Tally `protobuf:"bytes,1,opt,name=tally,proto3" json:"tally,omitempty"`
	// The validator identity associated with the tally.
	IdentityKey *v12.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (m *AllTalliedDelegatorVotesForProposalResponse) Reset() {
	*m = AllTalliedDelegatorVotesForProposalResponse{}
}
func (m *AllTalliedDelegatorVotesForProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*AllTalliedDelegatorVotesForProposalResponse) ProtoMessage() {}
func (*AllTalliedDelegatorVotesForProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{36}
}
func (m *AllTalliedDelegatorVotesForProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllTalliedDelegatorVotesForProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllTalliedDelegatorVotesForProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllTalliedDelegatorVotesForProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllTalliedDelegatorVotesForProposalResponse.Merge(m, src)
}
func (m *AllTalliedDelegatorVotesForProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllTalliedDelegatorVotesForProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllTalliedDelegatorVotesForProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllTalliedDelegatorVotesForProposalResponse proto.InternalMessageInfo

func (m *AllTalliedDelegatorVotesForProposalResponse) GetTally() *Tally {
	if m != nil {
		return m.Tally
	}
	return nil
}

func (m *AllTalliedDelegatorVotesForProposalResponse) GetIdentityKey() *v12.IdentityKey {
	if m != nil {
		return m.IdentityKey
	}
	return nil
}

type NextProposalIdRequest struct {
}

func (m *NextProposalIdRequest) Reset()         { *m = NextProposalIdRequest{} }
func (m *NextProposalIdRequest) String() string { return proto.CompactTextString(m) }
func (*NextProposalIdRequest) ProtoMessage()    {}
func (*NextProposalIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{37}
}
func (m *NextProposalIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextProposalIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextProposalIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextProposalIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextProposalIdRequest.Merge(m, src)
}
func (m *NextProposalIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *NextProposalIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextProposalIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextProposalIdRequest proto.InternalMessageInfo

type NextProposalIdResponse struct {
	// The next proposal ID.
	NextProposalId uint64 `protobuf:"varint,1,opt,name=next_proposal_id,json=nextProposalId,proto3" json:"next_proposal_id,omitempty"`
}

func (m *NextProposalIdResponse) Reset()         { *m = NextProposalIdResponse{} }
func (m *NextProposalIdResponse) String() string { return proto.CompactTextString(m) }
func (*NextProposalIdResponse) ProtoMessage()    {}
func (*NextProposalIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{38}
}
func (m *NextProposalIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextProposalIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextProposalIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextProposalIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextProposalIdResponse.Merge(m, src)
}
func (m *NextProposalIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *NextProposalIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NextProposalIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NextProposalIdResponse proto.InternalMessageInfo

func (m *NextProposalIdResponse) GetNextProposalId() uint64 {
	if m != nil {
		return m.NextProposalId
	}
	return 0
}

// The ratio between two numbers, used in governance to describe vote thresholds and quorums.
type Ratio struct {
	// The numerator.
	Numerator uint64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// The denominator.
	Denominator uint64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (m *Ratio) Reset()         { *m = Ratio{} }
func (m *Ratio) String() string { return proto.CompactTextString(m) }
func (*Ratio) ProtoMessage()    {}
func (*Ratio) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{39}
}
func (m *Ratio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ratio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ratio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ratio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ratio.Merge(m, src)
}
func (m *Ratio) XXX_Size() int {
	return m.Size()
}
func (m *Ratio) XXX_DiscardUnknown() {
	xxx_messageInfo_Ratio.DiscardUnknown(m)
}

var xxx_messageInfo_Ratio proto.InternalMessageInfo

func (m *Ratio) GetNumerator() uint64 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *Ratio) GetDenominator() uint64 {
	if m != nil {
		return m.Denominator
	}
	return 0
}

type EventDelegatorVote struct {
	// The delegator vote.
	Vote *DelegatorVote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *EventDelegatorVote) Reset()         { *m = EventDelegatorVote{} }
func (m *EventDelegatorVote) String() string { return proto.CompactTextString(m) }
func (*EventDelegatorVote) ProtoMessage()    {}
func (*EventDelegatorVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{40}
}
func (m *EventDelegatorVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDelegatorVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDelegatorVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDelegatorVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDelegatorVote.Merge(m, src)
}
func (m *EventDelegatorVote) XXX_Size() int {
	return m.Size()
}
func (m *EventDelegatorVote) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDelegatorVote.DiscardUnknown(m)
}

var xxx_messageInfo_EventDelegatorVote proto.InternalMessageInfo

func (m *EventDelegatorVote) GetVote() *DelegatorVote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type EventProposalDepositClaim struct {
	// The deposit claim body.
	DepositClaim *ProposalDepositClaim `protobuf:"bytes,1,opt,name=deposit_claim,json=depositClaim,proto3" json:"deposit_claim,omitempty"`
}

func (m *EventProposalDepositClaim) Reset()         { *m = EventProposalDepositClaim{} }
func (m *EventProposalDepositClaim) String() string { return proto.CompactTextString(m) }
func (*EventProposalDepositClaim) ProtoMessage()    {}
func (*EventProposalDepositClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{41}
}
func (m *EventProposalDepositClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProposalDepositClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProposalDepositClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProposalDepositClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProposalDepositClaim.Merge(m, src)
}
func (m *EventProposalDepositClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventProposalDepositClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProposalDepositClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventProposalDepositClaim proto.InternalMessageInfo

func (m *EventProposalDepositClaim) GetDepositClaim() *ProposalDepositClaim {
	if m != nil {
		return m.DepositClaim
	}
	return nil
}

type EventValidatorVote struct {
	// The validator vote.
	Vote *ValidatorVote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *EventValidatorVote) Reset()         { *m = EventValidatorVote{} }
func (m *EventValidatorVote) String() string { return proto.CompactTextString(m) }
func (*EventValidatorVote) ProtoMessage()    {}
func (*EventValidatorVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{42}
}
func (m *EventValidatorVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValidatorVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValidatorVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValidatorVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValidatorVote.Merge(m, src)
}
func (m *EventValidatorVote) XXX_Size() int {
	return m.Size()
}
func (m *EventValidatorVote) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValidatorVote.DiscardUnknown(m)
}

var xxx_messageInfo_EventValidatorVote proto.InternalMessageInfo

func (m *EventValidatorVote) GetVote() *ValidatorVote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type EventProposalWithdraw struct {
	// Details on the withdrawn proposal.
	Withdraw *ProposalWithdraw `protobuf:"bytes,1,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
}

func (m *EventProposalWithdraw) Reset()         { *m = EventProposalWithdraw{} }
func (m *EventProposalWithdraw) String() string { return proto.CompactTextString(m) }
func (*EventProposalWithdraw) ProtoMessage()    {}
func (*EventProposalWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{43}
}
func (m *EventProposalWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProposalWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProposalWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProposalWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProposalWithdraw.Merge(m, src)
}
func (m *EventProposalWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *EventProposalWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProposalWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_EventProposalWithdraw proto.InternalMessageInfo

func (m *EventProposalWithdraw) GetWithdraw() *ProposalWithdraw {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

type EventProposalSubmit struct {
	// Details on the submitted proposal.
	Submit *ProposalSubmit `protobuf:"bytes,1,opt,name=submit,proto3" json:"submit,omitempty"`
}

func (m *EventProposalSubmit) Reset()         { *m = EventProposalSubmit{} }
func (m *EventProposalSubmit) String() string { return proto.CompactTextString(m) }
func (*EventProposalSubmit) ProtoMessage()    {}
func (*EventProposalSubmit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{44}
}
func (m *EventProposalSubmit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProposalSubmit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProposalSubmit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProposalSubmit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProposalSubmit.Merge(m, src)
}
func (m *EventProposalSubmit) XXX_Size() int {
	return m.Size()
}
func (m *EventProposalSubmit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProposalSubmit.DiscardUnknown(m)
}

var xxx_messageInfo_EventProposalSubmit proto.InternalMessageInfo

func (m *EventProposalSubmit) GetSubmit() *ProposalSubmit {
	if m != nil {
		return m.Submit
	}
	return nil
}

type EventEnactProposal struct {
	// The enacted proposal.
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (m *EventEnactProposal) Reset()         { *m = EventEnactProposal{} }
func (m *EventEnactProposal) String() string { return proto.CompactTextString(m) }
func (*EventEnactProposal) ProtoMessage()    {}
func (*EventEnactProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{45}
}
func (m *EventEnactProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventEnactProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventEnactProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventEnactProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventEnactProposal.Merge(m, src)
}
func (m *EventEnactProposal) XXX_Size() int {
	return m.Size()
}
func (m *EventEnactProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_EventEnactProposal.DiscardUnknown(m)
}

var xxx_messageInfo_EventEnactProposal proto.InternalMessageInfo

func (m *EventEnactProposal) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

type EventProposalFailed struct {
	// The failed proposal.
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (m *EventProposalFailed) Reset()         { *m = EventProposalFailed{} }
func (m *EventProposalFailed) String() string { return proto.CompactTextString(m) }
func (*EventProposalFailed) ProtoMessage()    {}
func (*EventProposalFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{46}
}
func (m *EventProposalFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProposalFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProposalFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProposalFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProposalFailed.Merge(m, src)
}
func (m *EventProposalFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventProposalFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProposalFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventProposalFailed proto.InternalMessageInfo

func (m *EventProposalFailed) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

type EventProposalSlashed struct {
	// The slashed proposal.
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (m *EventProposalSlashed) Reset()         { *m = EventProposalSlashed{} }
func (m *EventProposalSlashed) String() string { return proto.CompactTextString(m) }
func (*EventProposalSlashed) ProtoMessage()    {}
func (*EventProposalSlashed) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9098f9e68b782a3, []int{47}
}
func (m *EventProposalSlashed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProposalSlashed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProposalSlashed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProposalSlashed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProposalSlashed.Merge(m, src)
}
func (m *EventProposalSlashed) XXX_Size() int {
	return m.Size()
}
func (m *EventProposalSlashed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProposalSlashed.DiscardUnknown(m)
}

var xxx_messageInfo_EventProposalSlashed proto.InternalMessageInfo

func (m *EventProposalSlashed) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func init() {
	proto.RegisterEnum("penumbra.core.component.governance.v1.Vote_Vote", Vote_Vote_name, Vote_Vote_value)
	proto.RegisterType((*ZKDelegatorVoteProof)(nil), "penumbra.core.component.governance.v1.ZKDelegatorVoteProof")
	proto.RegisterType((*ProposalSubmit)(nil), "penumbra.core.component.governance.v1.ProposalSubmit")
	proto.RegisterType((*ProposalWithdraw)(nil), "penumbra.core.component.governance.v1.ProposalWithdraw")
	proto.RegisterType((*ProposalDepositClaim)(nil), "penumbra.core.component.governance.v1.ProposalDepositClaim")
	proto.RegisterType((*ValidatorVote)(nil), "penumbra.core.component.governance.v1.ValidatorVote")
	proto.RegisterType((*ValidatorVoteReason)(nil), "penumbra.core.component.governance.v1.ValidatorVoteReason")
	proto.RegisterType((*ValidatorVoteBody)(nil), "penumbra.core.component.governance.v1.ValidatorVoteBody")
	proto.RegisterType((*DelegatorVote)(nil), "penumbra.core.component.governance.v1.DelegatorVote")
	proto.RegisterType((*DelegatorVoteBody)(nil), "penumbra.core.component.governance.v1.DelegatorVoteBody")
	proto.RegisterType((*DelegatorVoteView)(nil), "penumbra.core.component.governance.v1.DelegatorVoteView")
	proto.RegisterType((*DelegatorVoteView_Visible)(nil), "penumbra.core.component.governance.v1.DelegatorVoteView.Visible")
	proto.RegisterType((*DelegatorVoteView_Opaque)(nil), "penumbra.core.component.governance.v1.DelegatorVoteView.Opaque")
	proto.RegisterType((*DelegatorVotePlan)(nil), "penumbra.core.component.governance.v1.DelegatorVotePlan")
	proto.RegisterType((*CommunityPoolDeposit)(nil), "penumbra.core.component.governance.v1.CommunityPoolDeposit")
	proto.RegisterType((*CommunityPoolSpend)(nil), "penumbra.core.component.governance.v1.CommunityPoolSpend")
	proto.RegisterType((*CommunityPoolOutput)(nil), "penumbra.core.component.governance.v1.CommunityPoolOutput")
	proto.RegisterType((*Vote)(nil), "penumbra.core.component.governance.v1.Vote")
	proto.RegisterType((*ProposalState)(nil), "penumbra.core.component.governance.v1.ProposalState")
	proto.RegisterType((*ProposalState_Voting)(nil), "penumbra.core.component.governance.v1.ProposalState.Voting")
	proto.RegisterType((*ProposalState_Withdrawn)(nil), "penumbra.core.component.governance.v1.ProposalState.Withdrawn")
	proto.RegisterType((*ProposalState_Finished)(nil), "penumbra.core.component.governance.v1.ProposalState.Finished")
	proto.RegisterType((*ProposalState_Claimed)(nil), "penumbra.core.component.governance.v1.ProposalState.Claimed")
	proto.RegisterType((*ProposalOutcome)(nil), "penumbra.core.component.governance.v1.ProposalOutcome")
	proto.RegisterType((*ProposalOutcome_Withdrawn)(nil), "penumbra.core.component.governance.v1.ProposalOutcome.Withdrawn")
	proto.RegisterType((*ProposalOutcome_Passed)(nil), "penumbra.core.component.governance.v1.ProposalOutcome.Passed")
	proto.RegisterType((*ProposalOutcome_Failed)(nil), "penumbra.core.component.governance.v1.ProposalOutcome.Failed")
	proto.RegisterType((*ProposalOutcome_Slashed)(nil), "penumbra.core.component.governance.v1.ProposalOutcome.Slashed")
	proto.RegisterType((*Tally)(nil), "penumbra.core.component.governance.v1.Tally")
	proto.RegisterType((*Proposal)(nil), "penumbra.core.component.governance.v1.Proposal")
	proto.RegisterType((*Proposal_Signaling)(nil), "penumbra.core.component.governance.v1.Proposal.Signaling")
	proto.RegisterType((*Proposal_Emergency)(nil), "penumbra.core.component.governance.v1.Proposal.Emergency")
	proto.RegisterType((*Proposal_ParameterChange)(nil), "penumbra.core.component.governance.v1.Proposal.ParameterChange")
	proto.RegisterType((*Proposal_CommunityPoolSpend)(nil), "penumbra.core.component.governance.v1.Proposal.CommunityPoolSpend")
	proto.RegisterType((*Proposal_UpgradePlan)(nil), "penumbra.core.component.governance.v1.Proposal.UpgradePlan")
	proto.RegisterType((*Proposal_FreezeIbcClient)(nil), "penumbra.core.component.governance.v1.Proposal.FreezeIbcClient")
	proto.RegisterType((*Proposal_UnfreezeIbcClient)(nil), "penumbra.core.component.governance.v1.Proposal.UnfreezeIbcClient")
	proto.RegisterType((*ProposalInfoRequest)(nil), "penumbra.core.component.governance.v1.ProposalInfoRequest")
	proto.RegisterType((*ProposalInfoResponse)(nil), "penumbra.core.component.governance.v1.ProposalInfoResponse")
	proto.RegisterType((*ProposalDataRequest)(nil), "penumbra.core.component.governance.v1.ProposalDataRequest")
	proto.RegisterType((*ProposalDataResponse)(nil), "penumbra.core.component.governance.v1.ProposalDataResponse")
	proto.RegisterType((*ProposalRateDataRequest)(nil), "penumbra.core.component.governance.v1.ProposalRateDataRequest")
	proto.RegisterType((*ProposalRateDataResponse)(nil), "penumbra.core.component.governance.v1.ProposalRateDataResponse")
	proto.RegisterType((*ProposalListRequest)(nil), "penumbra.core.component.governance.v1.ProposalListRequest")
	proto.RegisterType((*ProposalListResponse)(nil), "penumbra.core.component.governance.v1.ProposalListResponse")
	proto.RegisterType((*ValidatorVotesRequest)(nil), "penumbra.core.component.governance.v1.ValidatorVotesRequest")
	proto.RegisterType((*ValidatorVotesResponse)(nil), "penumbra.core.component.governance.v1.ValidatorVotesResponse")
	proto.RegisterType((*GovernanceParameters)(nil), "penumbra.core.component.governance.v1.GovernanceParameters")
	proto.RegisterType((*GenesisContent)(nil), "penumbra.core.component.governance.v1.GenesisContent")
	proto.RegisterType((*ChangedAppParameters)(nil), "penumbra.core.component.governance.v1.ChangedAppParameters")
	proto.RegisterType((*ChangedAppParametersSet)(nil), "penumbra.core.component.governance.v1.ChangedAppParametersSet")
	proto.RegisterType((*VotingPowerAtProposalStartRequest)(nil), "penumbra.core.component.governance.v1.VotingPowerAtProposalStartRequest")
	proto.RegisterType((*VotingPowerAtProposalStartResponse)(nil), "penumbra.core.component.governance.v1.VotingPowerAtProposalStartResponse")
	proto.RegisterType((*AllTalliedDelegatorVotesForProposalRequest)(nil), "penumbra.core.component.governance.v1.AllTalliedDelegatorVotesForProposalRequest")
	proto.RegisterType((*AllTalliedDelegatorVotesForProposalResponse)(nil), "penumbra.core.component.governance.v1.AllTalliedDelegatorVotesForProposalResponse")
	proto.RegisterType((*NextProposalIdRequest)(nil), "penumbra.core.component.governance.v1.NextProposalIdRequest")
	proto.RegisterType((*NextProposalIdResponse)(nil), "penumbra.core.component.governance.v1.NextProposalIdResponse")
	proto.RegisterType((*Ratio)(nil), "penumbra.core.component.governance.v1.Ratio")
	proto.RegisterType((*EventDelegatorVote)(nil), "penumbra.core.component.governance.v1.EventDelegatorVote")
	proto.RegisterType((*EventProposalDepositClaim)(nil), "penumbra.core.component.governance.v1.EventProposalDepositClaim")
	proto.RegisterType((*EventValidatorVote)(nil), "penumbra.core.component.governance.v1.EventValidatorVote")
	proto.RegisterType((*EventProposalWithdraw)(nil), "penumbra.core.component.governance.v1.EventProposalWithdraw")
	proto.RegisterType((*EventProposalSubmit)(nil), "penumbra.core.component.governance.v1.EventProposalSubmit")
	proto.RegisterType((*EventEnactProposal)(nil), "penumbra.core.component.governance.v1.EventEnactProposal")
	proto.RegisterType((*EventProposalFailed)(nil), "penumbra.core.component.governance.v1.EventProposalFailed")
	proto.RegisterType((*EventProposalSlashed)(nil), "penumbra.core.component.governance.v1.EventProposalSlashed")
}

func init() {
	proto.RegisterFile("penumbra/core/component/governance/v1/governance.proto", fileDescriptor_a9098f9e68b782a3)
}

var fileDescriptor_a9098f9e68b782a3 = []byte{
	// 3138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcd, 0x8f, 0x1b, 0xc7,
	0xb1, 0xdf, 0xe1, 0x7e, 0x90, 0xac, 0x5d, 0x51, 0x54, 0x8b, 0x92, 0xd6, 0x7c, 0xf6, 0x3e, 0x79,
	0xfc, 0x04, 0xc8, 0xb6, 0xcc, 0x15, 0x65, 0x59, 0xd6, 0x5b, 0xd9, 0xd6, 0xdb, 0xa5, 0xf6, 0xeb,
	0xc9, 0x92, 0xa8, 0xa1, 0xb4, 0x8e, 0xed, 0x85, 0xe9, 0xe1, 0x4c, 0x93, 0x1c, 0x68, 0xd8, 0x43,
	0xcf, 0xf4, 0x50, 0xa2, 0x81, 0x1c, 0x02, 0x18, 0x08, 0x82, 0x20, 0x48, 0x2e, 0x41, 0xae, 0x81,
	0x91, 0x53, 0x0e, 0x02, 0x72, 0x4a, 0xfe, 0x04, 0x27, 0x08, 0x0c, 0x5f, 0x02, 0x38, 0xb7, 0x40,
	0xbe, 0x05, 0x30, 0x90, 0x53, 0xce, 0x41, 0x7f, 0xcc, 0x70, 0x86, 0x1f, 0xbb, 0x24, 0x41, 0x01,
	0x39, 0xe4, 0x22, 0xb1, 0x7b, 0xaa, 0x7e, 0x55, 0x5d, 0x55, 0x5d, 0x5d, 0xd5, 0x33, 0x0b, 0xd7,
	0xda, 0x98, 0xf8, 0xad, 0x9a, 0xab, 0xaf, 0x1b, 0x8e, 0x8b, 0xd7, 0x0d, 0xa7, 0xd5, 0x76, 0x08,
	0x26, 0x74, 0xbd, 0xe1, 0x74, 0xb0, 0x4b, 0x74, 0x62, 0xe0, 0xf5, 0x4e, 0x31, 0x32, 0x2a, 0xb4,
	0x5d, 0x87, 0x3a, 0xe8, 0x42, 0xc0, 0x57, 0x60, 0x7c, 0x85, 0x90, 0xaf, 0x10, 0xa1, 0xec, 0x14,
	0xf3, 0x2f, 0x34, 0x1c, 0xa7, 0x61, 0xe3, 0x75, 0xce, 0x54, 0xf3, 0xeb, 0xeb, 0x3a, 0xe9, 0x0a,
	0x84, 0xbc, 0x1a, 0x97, 0xac, 0x7b, 0x1e, 0xa6, 0x4c, 0x14, 0xff, 0x21, 0x69, 0xde, 0x1b, 0xa5,
	0x9d, 0xe1, 0xb4, 0x5a, 0x3e, 0xb1, 0x68, 0xb7, 0xda, 0x76, 0x1c, 0x9b, 0xb1, 0xc5, 0x67, 0x24,
	0xff, 0xc5, 0x51, 0xfc, 0x26, 0x7e, 0xc2, 0x98, 0x4c, 0xfc, 0x44, 0x52, 0xbe, 0x33, 0x92, 0xd2,
	0xf2, 0xa8, 0x6b, 0xd5, 0x7c, 0x6a, 0x39, 0xc4, 0xe3, 0x3c, 0xd1, 0x89, 0xe3, 0xe4, 0xd4, 0x31,
	0x37, 0x5f, 0x1d, 0x4b, 0xbb, 0xe5, 0x2f, 0x8f, 0xa4, 0xf4, 0x89, 0x69, 0x91, 0x06, 0xa7, 0x16,
	0x3f, 0x8f, 0xc3, 0xb6, 0x6a, 0x06, 0xa3, 0xb6, 0x6a, 0xc6, 0x71, 0x94, 0x9e, 0xc1, 0x2d, 0xeb,
	0x19, 0xf4, 0xb8, 0xd5, 0x7a, 0x4d, 0x0b, 0xdb, 0x26, 0x36, 0x43, 0xb3, 0xc6, 0x26, 0x24, 0xf7,
	0xa5, 0x91, 0xdc, 0x54, 0x7f, 0xc4, 0xd7, 0xcb, 0x7f, 0x48, 0xea, 0xf3, 0x71, 0xea, 0x47, 0xb8,
	0xcb, 0xcd, 0xc8, 0xfe, 0x97, 0x14, 0x6b, 0x71, 0x0a, 0xe2, 0xb7, 0x18, 0x01, 0xf1, 0x5b, 0xf2,
	0xf9, 0xd5, 0xde, 0x73, 0xb7, 0xdb, 0xa6, 0xce, 0xba, 0x89, 0x0d, 0xbd, 0xfe, 0xe6, 0xdb, 0x6f,
	0x57, 0x5d, 0xd3, 0xd3, 0x85, 0x1f, 0x23, 0x13, 0x82, 0x4b, 0xbd, 0x04, 0xb9, 0x8f, 0x6e, 0xdf,
	0xc2, 0x36, 0x6e, 0xe8, 0xd4, 0x71, 0x0f, 0x1c, 0x8a, 0xcb, 0xae, 0xe3, 0xd4, 0x51, 0x0e, 0x16,
	0x2d, 0x42, 0xb0, 0xbb, 0xaa, 0x9c, 0x57, 0x2e, 0xae, 0x68, 0x62, 0xa0, 0x7e, 0xa9, 0x40, 0xa6,
	0xec, 0x3a, 0x6d, 0xc7, 0xd3, 0xed, 0x8a, 0x5f, 0x6b, 0x59, 0x14, 0xdd, 0x86, 0x54, 0x5b, 0xce,
	0x70, 0xda, 0xe5, 0x2b, 0xeb, 0x85, 0xb1, 0xa2, 0xbe, 0x10, 0x00, 0x69, 0x21, 0x00, 0x2a, 0x41,
	0xc6, 0xc4, 0x6d, 0xc7, 0xb3, 0x68, 0x55, 0x6f, 0x39, 0x3e, 0xa1, 0xab, 0xf3, 0x1c, 0xf2, 0xc5,
	0x3e, 0x48, 0xb6, 0xea, 0x4e, 0xb1, 0xb0, 0xc9, 0x69, 0xb4, 0x13, 0x92, 0x47, 0x0c, 0xd5, 0x1d,
	0xc8, 0x06, 0xd0, 0x1f, 0x58, 0xb4, 0x69, 0xba, 0xfa, 0x63, 0x94, 0xef, 0xd3, 0x72, 0x21, 0x22,
	0xf4, 0x2c, 0x2c, 0xb9, 0x58, 0xf7, 0x1c, 0xb2, 0x9a, 0x38, 0xaf, 0x5c, 0x4c, 0x6b, 0x72, 0xa4,
	0xfe, 0x51, 0x81, 0x5c, 0x00, 0x74, 0x4b, 0x48, 0x28, 0xd9, 0xba, 0xd5, 0x3a, 0x12, 0x6c, 0x70,
	0x05, 0x89, 0x89, 0x57, 0x80, 0xca, 0x90, 0x74, 0x7c, 0x6a, 0x38, 0x2d, 0x2c, 0xd7, 0x7f, 0x6d,
	0x42, 0x93, 0xde, 0x13, 0xdc, 0x5a, 0x00, 0xa3, 0x3e, 0x55, 0xe0, 0xc4, 0x81, 0x6e, 0x5b, 0x66,
	0xe0, 0x65, 0xf4, 0x3e, 0x2c, 0xd4, 0x1c, 0xb3, 0x2b, 0x7d, 0x76, 0x7d, 0x4c, 0x01, 0x31, 0x8c,
	0x2d, 0xc7, 0xec, 0x6a, 0x1c, 0x05, 0xdd, 0x83, 0x94, 0xee, 0xd3, 0x66, 0xd5, 0xb3, 0x1a, 0x72,
	0xc1, 0x57, 0x23, 0x88, 0x3c, 0x1e, 0x0b, 0xf1, 0xf0, 0xeb, 0x14, 0x0b, 0x95, 0x36, 0x26, 0xe6,
	0xa6, 0x4f, 0x9b, 0x15, 0xab, 0x41, 0x74, 0xea, 0xbb, 0x58, 0x4b, 0xea, 0x62, 0xa8, 0xbe, 0x01,
	0xa7, 0x63, 0xb2, 0x34, 0xee, 0x93, 0x88, 0xaf, 0x94, 0x98, 0xaf, 0xbe, 0x4d, 0xc0, 0xa9, 0x01,
	0xdd, 0x8e, 0x74, 0xd4, 0x4d, 0x58, 0xe8, 0x38, 0x14, 0x4b, 0x6d, 0x5f, 0x1f, 0x77, 0xfd, 0x4c,
	0x15, 0xce, 0x88, 0xb6, 0x61, 0xc5, 0x32, 0x31, 0xa1, 0x2c, 0x99, 0x3e, 0xc2, 0x5d, 0xe9, 0x29,
	0xb5, 0x0f, 0x88, 0x6f, 0xe0, 0x4e, 0xb1, 0xb0, 0x2f, 0x49, 0x6f, 0xe3, 0xae, 0xb6, 0x6c, 0xf5,
	0x06, 0xe8, 0x36, 0x64, 0x7a, 0x22, 0x38, 0xd0, 0x02, 0x07, 0xfa, 0x9f, 0x11, 0x40, 0xbb, 0x21,
	0x31, 0x83, 0x3a, 0xd1, 0x88, 0x0e, 0x91, 0x16, 0x9a, 0x67, 0x91, 0x83, 0x6c, 0x4c, 0xe3, 0x56,
	0x61, 0xea, 0xd0, 0xb4, 0x3f, 0x4a, 0xc0, 0x89, 0x58, 0x82, 0x98, 0x32, 0x74, 0x62, 0x18, 0xcf,
	0x31, 0x74, 0xd0, 0x7d, 0x58, 0x6c, 0xb3, 0x1c, 0x26, 0x3d, 0x72, 0x63, 0x4c, 0xfd, 0x86, 0xa5,
	0x41, 0x4d, 0x20, 0xa9, 0xbf, 0x99, 0x87, 0x53, 0x03, 0xfa, 0x1f, 0x19, 0x5e, 0x17, 0x20, 0xe3,
	0x51, 0xdd, 0xa5, 0x55, 0xbe, 0xaf, 0x2d, 0x99, 0x5c, 0x16, 0xb4, 0x13, 0x7c, 0xb6, 0x2c, 0x27,
	0xc3, 0x28, 0x9c, 0x9f, 0x36, 0x0a, 0xdf, 0x84, 0xc5, 0x8e, 0x6e, 0xfb, 0x58, 0x46, 0xcd, 0x4b,
	0x7d, 0x08, 0xa2, 0x4c, 0x10, 0x1e, 0xf6, 0xb1, 0x26, 0x68, 0xd1, 0x36, 0x9c, 0xf4, 0x49, 0xcd,
	0x21, 0xec, 0xc4, 0x92, 0x59, 0x6a, 0x71, 0x8c, 0x2c, 0x95, 0x09, 0x98, 0x64, 0x9a, 0xda, 0x85,
	0x34, 0xf1, 0x6d, 0xdb, 0xaa, 0x5b, 0xd8, 0x5d, 0x5d, 0xe2, 0x00, 0xaf, 0x8e, 0x5c, 0x01, 0x3b,
	0x56, 0x3b, 0xc5, 0xc2, 0xdd, 0x80, 0x41, 0xeb, 0xf1, 0xa2, 0x1d, 0x48, 0xb8, 0x8f, 0x56, 0x93,
	0x03, 0xa9, 0xee, 0x28, 0xe7, 0x1f, 0x60, 0xd7, 0xaa, 0x5b, 0x86, 0xce, 0xcc, 0xc8, 0x76, 0x42,
	0xc2, 0x7d, 0xa4, 0xfe, 0xb3, 0xdf, 0x4d, 0x07, 0x16, 0x7e, 0x8c, 0x0e, 0x21, 0xd9, 0xb1, 0x3c,
	0xab, 0x66, 0x63, 0x19, 0xb1, 0xff, 0x37, 0x4d, 0xc4, 0x32, 0xa8, 0xc2, 0x81, 0xc0, 0xd9, 0x9b,
	0xd3, 0x02, 0x48, 0xf4, 0x21, 0x2c, 0x39, 0x6d, 0xfd, 0x33, 0x3f, 0xc8, 0x24, 0x37, 0xa7, 0x06,
	0xbf, 0xc7, 0x61, 0xf6, 0xe6, 0x34, 0x09, 0x98, 0x7f, 0xaa, 0x40, 0x52, 0x4a, 0x44, 0x1f, 0xb3,
	0x73, 0x45, 0x72, 0x54, 0x79, 0xc8, 0x28, 0x03, 0x7b, 0x65, 0x6c, 0x71, 0xec, 0xbc, 0x89, 0x6e,
	0xe8, 0x1d, 0x58, 0x20, 0xbd, 0x5c, 0x78, 0x65, 0xb4, 0x0f, 0x63, 0x65, 0x0e, 0xf3, 0xa6, 0xd4,
	0x5d, 0xe3, 0xfc, 0x79, 0x0c, 0x4b, 0x62, 0x11, 0xcf, 0x55, 0xdd, 0xad, 0x6c, 0x3f, 0xb8, 0xfa,
	0x97, 0x7e, 0xc7, 0x97, 0x6d, 0x9d, 0xfc, 0x5b, 0xec, 0xcf, 0x7b, 0xb0, 0xcc, 0xcb, 0x3c, 0xb3,
	0xca, 0x2d, 0x2c, 0x76, 0x69, 0x61, 0x32, 0x0b, 0x6b, 0x20, 0x20, 0xd8, 0x6f, 0x74, 0x19, 0x72,
	0x11, 0xc0, 0x9e, 0xfa, 0x8b, 0x5c, 0x7d, 0xd4, 0xa3, 0x0c, 0xd7, 0x30, 0x64, 0xb7, 0x2f, 0x4d,
	0xb1, 0xdb, 0xd7, 0x00, 0x5c, 0x9d, 0x98, 0x4e, 0xcb, 0xfa, 0x1c, 0xbb, 0x7c, 0xb3, 0xae, 0x68,
	0x91, 0x19, 0x74, 0x11, 0xb2, 0x3c, 0x59, 0x56, 0x6b, 0xb6, 0xc5, 0x2b, 0xf3, 0xaa, 0xbb, 0x9a,
	0xe2, 0x54, 0x19, 0x3e, 0xbf, 0x25, 0xa7, 0xb5, 0x21, 0x94, 0xde, 0x6a, 0x7a, 0x08, 0x65, 0x45,
	0xbd, 0x0d, 0xb9, 0x52, 0xd0, 0xb1, 0x94, 0x1d, 0x27, 0x28, 0xc3, 0x7a, 0x59, 0x4f, 0x19, 0x3f,
	0xeb, 0xa9, 0xfb, 0x80, 0x62, 0x60, 0x3c, 0x8d, 0x4c, 0x07, 0xf5, 0x85, 0x02, 0xa7, 0x63, 0x58,
	0xf7, 0x7c, 0xda, 0xf6, 0xa7, 0xd3, 0x0b, 0x5d, 0x87, 0xa4, 0x6e, 0x9a, 0x2e, 0xf6, 0x3c, 0xb9,
	0x01, 0xd7, 0x46, 0x1c, 0xfd, 0x9b, 0x82, 0x4a, 0x0b, 0xc8, 0xd5, 0x5f, 0x29, 0xb0, 0xc0, 0x37,
	0xf0, 0x2d, 0x19, 0xa6, 0x4c, 0x6c, 0xe6, 0xca, 0xe5, 0x09, 0xc2, 0x34, 0x12, 0xab, 0xea, 0xbe,
	0x44, 0xcb, 0x41, 0xf6, 0xe0, 0xde, 0x83, 0xed, 0xea, 0xc3, 0xbb, 0x95, 0xf2, 0x76, 0x69, 0x7f,
	0x67, 0x7f, 0xfb, 0x56, 0x76, 0x0e, 0x65, 0x61, 0x85, 0xcf, 0x6e, 0x6e, 0x55, 0x1e, 0x6c, 0xee,
	0xdf, 0xcd, 0x2a, 0x68, 0x05, 0x52, 0x7c, 0xe6, 0xc3, 0xed, 0x4a, 0x36, 0x81, 0x96, 0x21, 0xc9,
	0x47, 0x77, 0xef, 0x65, 0xe7, 0xd5, 0x7f, 0x2c, 0xc0, 0x89, 0xb0, 0x51, 0xa0, 0x3a, 0xc5, 0xe8,
	0x21, 0x2c, 0x75, 0x1c, 0x6a, 0x91, 0xe0, 0x90, 0xbf, 0x31, 0x61, 0x49, 0xcb, 0x51, 0x98, 0xb6,
	0x16, 0x69, 0xb0, 0x1c, 0x29, 0xc0, 0xd0, 0x27, 0x90, 0x7e, 0x2c, 0x8b, 0x7c, 0x22, 0x77, 0xe9,
	0x7b, 0x53, 0x21, 0x07, 0xad, 0x02, 0xd9, 0x9b, 0xd3, 0x7a, 0x90, 0xe8, 0x63, 0x48, 0xd5, 0x2d,
	0x62, 0x79, 0x4d, 0x6c, 0xca, 0xcd, 0xfb, 0xee, 0x54, 0xf0, 0x3b, 0x12, 0x64, 0x6f, 0x4e, 0x0b,
	0x01, 0xd1, 0x0f, 0x20, 0x69, 0xb0, 0x8e, 0x02, 0x9b, 0xf2, 0xfc, 0x7d, 0x67, 0x2a, 0xec, 0x92,
	0xc0, 0x60, 0xa7, 0x92, 0x84, 0xcb, 0xa7, 0x60, 0x49, 0x98, 0x2a, 0xff, 0x0a, 0xa4, 0xc3, 0xa5,
	0x8d, 0x2a, 0x9f, 0xf3, 0x87, 0x90, 0x0a, 0x14, 0x8c, 0x36, 0x1f, 0xca, 0x4c, 0x9a, 0x8f, 0xfc,
	0xc7, 0x90, 0x94, 0x2a, 0xce, 0x1e, 0x7c, 0x2b, 0x09, 0x8b, 0x1e, 0xb3, 0x82, 0xfa, 0x74, 0x01,
	0x4e, 0xf6, 0x51, 0xa1, 0x0f, 0x60, 0xa9, 0xcd, 0x36, 0x9d, 0x29, 0xa5, 0xbd, 0x3b, 0x9d, 0xb4,
	0x42, 0x99, 0x83, 0xb0, 0xb0, 0x13, 0x70, 0x0c, 0xb8, 0xae, 0x5b, 0x36, 0x36, 0x65, 0x34, 0x4f,
	0x0b, 0xbc, 0xc3, 0x41, 0x18, 0xb0, 0x80, 0x43, 0x1f, 0x41, 0xd2, 0xb3, 0x75, 0x1e, 0x6e, 0xd3,
	0x45, 0x73, 0x80, 0x5c, 0x11, 0x28, 0x2c, 0x28, 0x24, 0xe0, 0x78, 0xa1, 0x90, 0x82, 0x25, 0xb1,
	0xda, 0x7c, 0x13, 0x96, 0x84, 0x7a, 0xf1, 0x4d, 0x36, 0x59, 0x0d, 0xd5, 0xaf, 0x56, 0xa8, 0x40,
	0x64, 0x93, 0xe5, 0x2d, 0x48, 0x4a, 0x75, 0x9f, 0xb7, 0xa8, 0xad, 0x74, 0x18, 0x80, 0x6a, 0x09,
	0x16, 0x1f, 0xe8, 0xb6, 0xdd, 0x45, 0x59, 0x98, 0xef, 0x62, 0x4f, 0x96, 0x08, 0xec, 0x27, 0xca,
	0x40, 0x82, 0x38, 0xb2, 0x22, 0x48, 0x10, 0x07, 0xad, 0x42, 0x52, 0xaf, 0x79, 0x54, 0xb7, 0x44,
	0x8e, 0x59, 0xd0, 0x82, 0xa1, 0xfa, 0x67, 0x80, 0x54, 0x20, 0x98, 0xb1, 0x59, 0x22, 0x4d, 0x2c,
	0x68, 0x09, 0xcb, 0x44, 0x39, 0x58, 0xa4, 0x16, 0x95, 0x75, 0x67, 0x5a, 0x13, 0x03, 0x74, 0x1e,
	0x96, 0x4d, 0xec, 0x19, 0xae, 0xd5, 0x0e, 0xeb, 0x8e, 0xb4, 0x16, 0x9d, 0x42, 0x1f, 0x42, 0xda,
	0x63, 0x7d, 0x8d, 0xcd, 0xd2, 0xa5, 0xc8, 0x0c, 0xff, 0x3b, 0xa1, 0x11, 0x0a, 0x95, 0x00, 0x80,
	0xe5, 0xb3, 0x10, 0x8d, 0x41, 0xe3, 0x16, 0x76, 0x1b, 0x98, 0x18, 0x5d, 0x59, 0x06, 0x4c, 0x0c,
	0xbd, 0x1d, 0x00, 0x30, 0xe8, 0x10, 0x0d, 0xd9, 0x90, 0x6d, 0xeb, 0xae, 0xde, 0xc2, 0x14, 0xbb,
	0x55, 0xa3, 0xa9, 0x93, 0x06, 0x96, 0x35, 0xfd, 0xcd, 0x49, 0x25, 0x94, 0x03, 0x9c, 0x12, 0x87,
	0xd9, 0x9b, 0xd3, 0x4e, 0xb6, 0xe3, 0x53, 0xa8, 0x03, 0xb9, 0xf8, 0x65, 0x66, 0xd5, 0x63, 0xe7,
	0x39, 0x2f, 0x39, 0x96, 0xaf, 0x6c, 0x4d, 0x2a, 0x71, 0xb0, 0x32, 0xd8, 0x9b, 0xd3, 0x90, 0x31,
	0x58, 0x2f, 0x7c, 0x0a, 0x2b, 0x7e, 0xbb, 0xe1, 0xea, 0x26, 0xae, 0xb6, 0x6d, 0x9d, 0xf0, 0xc2,
	0x65, 0xf2, 0xd3, 0xac, 0xf0, 0x50, 0x60, 0xb0, 0x3a, 0x75, 0x6f, 0x4e, 0x5b, 0xf6, 0x7b, 0x43,
	0xd4, 0x82, 0x53, 0x75, 0x17, 0xe3, 0xcf, 0x71, 0xd5, 0xaa, 0x19, 0x55, 0xc3, 0xb6, 0x30, 0xa1,
	0xab, 0x30, 0x9d, 0x21, 0x77, 0x38, 0xd0, 0x7e, 0xcd, 0x28, 0x71, 0x18, 0x66, 0xc8, 0x7a, 0x7c,
	0x0a, 0x79, 0x70, 0xda, 0x27, 0x83, 0x02, 0x97, 0xb9, 0xc0, 0xcd, 0x89, 0xd7, 0x45, 0xea, 0x03,
	0x22, 0x4f, 0xf9, 0xfd, 0x93, 0x2c, 0x15, 0x85, 0x01, 0xca, 0x52, 0x11, 0x33, 0xb4, 0x45, 0x83,
	0x54, 0x24, 0x46, 0xf9, 0xd7, 0x20, 0x1d, 0x86, 0x1a, 0x7a, 0x09, 0xa0, 0xa9, 0xdb, 0x94, 0x05,
	0x96, 0x25, 0x32, 0x43, 0x4a, 0x4b, 0xb3, 0x99, 0x12, 0x9b, 0xc8, 0xff, 0x55, 0x81, 0x93, 0x7d,
	0x51, 0x83, 0x6a, 0x90, 0x71, 0x6c, 0xb3, 0x1a, 0x46, 0x8e, 0x27, 0x13, 0xca, 0xb8, 0xce, 0x12,
	0x30, 0xe6, 0x66, 0xbb, 0x1d, 0x22, 0x7b, 0xda, 0x09, 0xc7, 0x36, 0x7b, 0x43, 0x26, 0x83, 0xe0,
	0xc7, 0x51, 0x19, 0x89, 0x19, 0xc8, 0x20, 0xf8, 0x71, 0x6f, 0x98, 0x7f, 0x38, 0xb4, 0x70, 0xbd,
	0x09, 0x59, 0xea, 0xea, 0xc4, 0xd3, 0x0d, 0x96, 0x33, 0x44, 0x30, 0x0a, 0xd9, 0xb9, 0x82, 0x78,
	0x9f, 0x50, 0x08, 0xde, 0x27, 0x14, 0x36, 0x49, 0x57, 0x3b, 0x19, 0xa1, 0x66, 0x71, 0x96, 0xbf,
	0x00, 0xcb, 0x91, 0x28, 0x64, 0x5e, 0x68, 0x62, 0xab, 0xd1, 0xa4, 0x32, 0x11, 0xca, 0x51, 0xbe,
	0x00, 0x27, 0xfb, 0xa2, 0x08, 0xfd, 0x17, 0xa4, 0x45, 0x94, 0x54, 0x2d, 0x53, 0xfa, 0x2c, 0x25,
	0x26, 0xf6, 0xcd, 0xfc, 0x65, 0x38, 0x35, 0x10, 0x04, 0x47, 0x72, 0xb0, 0x9c, 0xdc, 0xd6, 0xbb,
	0xb6, 0xa3, 0x9b, 0xea, 0x35, 0x38, 0x1d, 0x84, 0xd2, 0x3e, 0xa9, 0x3b, 0x1a, 0xfe, 0xcc, 0xc7,
	0x1e, 0x45, 0xff, 0x0d, 0xcb, 0x41, 0xe7, 0xc6, 0x00, 0x44, 0x62, 0x86, 0x60, 0x6a, 0xdf, 0x54,
	0x1f, 0xf5, 0xae, 0x6a, 0x05, 0x9f, 0xd7, 0x76, 0x88, 0x87, 0xd1, 0x25, 0x40, 0xa2, 0xcd, 0xab,
	0xd9, 0x8e, 0xf1, 0xa8, 0x1a, 0x5b, 0x60, 0x96, 0x3f, 0xd9, 0x62, 0x0f, 0xf6, 0xf8, 0xfc, 0x98,
	0x4d, 0x61, 0x54, 0xc9, 0x5b, 0x3a, 0xd5, 0xc7, 0x56, 0xf2, 0x8b, 0xf9, 0xc8, 0x85, 0x32, 0x67,
	0x94, 0x5a, 0xce, 0xf4, 0x0e, 0x7d, 0xf8, 0x92, 0x13, 0x23, 0x96, 0x7c, 0x11, 0xb2, 0x98, 0x98,
	0x71, 0x5a, 0x71, 0xc4, 0x65, 0x30, 0x31, 0x8f, 0x36, 0xce, 0xc2, 0xb0, 0x8e, 0xf9, 0xff, 0x65,
	0x3d, 0x26, 0xcf, 0xad, 0xab, 0xd3, 0x54, 0xb4, 0x9a, 0x80, 0x40, 0x0f, 0xe0, 0x5c, 0x68, 0xd1,
	0xbe, 0x5b, 0xf5, 0x71, 0x3a, 0xd8, 0x33, 0xed, 0xf8, 0xed, 0xbd, 0x7c, 0x3f, 0xb0, 0x01, 0xe7,
	0x42, 0xb3, 0xe9, 0x14, 0x4f, 0xe4, 0x42, 0x03, 0x56, 0x07, 0x79, 0xa5, 0x17, 0x77, 0x21, 0xed,
	0xea, 0x14, 0x57, 0x4d, 0x9d, 0xea, 0xd2, 0x8d, 0xaf, 0x8d, 0x6e, 0xf4, 0xf9, 0xbb, 0x9f, 0x4e,
	0xb1, 0x10, 0xc2, 0xa4, 0x5c, 0xf9, 0x4b, 0x2d, 0xf6, 0xe2, 0xeb, 0x7d, 0xcb, 0xa3, 0x81, 0x72,
	0x79, 0x48, 0x59, 0x84, 0xed, 0xdf, 0x8e, 0xb8, 0xa9, 0x49, 0x69, 0xe1, 0x58, 0x7d, 0x9a, 0xe8,
	0x85, 0x96, 0xe0, 0xf9, 0x4f, 0x68, 0x1d, 0x15, 0x5a, 0xea, 0x75, 0x38, 0x13, 0xbb, 0xf4, 0xf6,
	0xc6, 0x0e, 0x81, 0x5f, 0x2b, 0x70, 0xb6, 0x9f, 0x55, 0x1a, 0xfb, 0x66, 0xa4, 0x0d, 0x9f, 0xc9,
	0x3b, 0x85, 0xc4, 0x54, 0xef, 0x14, 0xd4, 0xaf, 0x12, 0x90, 0xeb, 0xbd, 0x27, 0x88, 0x9c, 0x56,
	0x57, 0xe1, 0x6c, 0xb8, 0x38, 0xd1, 0x40, 0x0b, 0xf7, 0x04, 0xc5, 0x6f, 0x2e, 0x78, 0x2a, 0x9a,
	0x47, 0xee, 0x23, 0xef, 0xa8, 0x6d, 0x98, 0x98, 0x7a, 0x1b, 0xa2, 0x2b, 0x70, 0xa6, 0xa7, 0x0b,
	0xb3, 0x67, 0xf5, 0x33, 0xdf, 0x71, 0xfd, 0x16, 0x8f, 0x91, 0xb4, 0x76, 0x3a, 0x54, 0x85, 0x3d,
	0xbb, 0xcf, 0x1f, 0xa1, 0x6b, 0x11, 0x4d, 0x58, 0x27, 0x56, 0xa5, 0x4d, 0x17, 0x7b, 0x4d, 0xc7,
	0x16, 0x55, 0x77, 0xba, 0x27, 0x8b, 0xf5, 0x30, 0x0f, 0x82, 0x87, 0xe8, 0x3a, 0xac, 0x86, 0x7c,
	0xbc, 0x1b, 0x8a, 0x30, 0x2e, 0x72, 0xc6, 0xd0, 0x2e, 0xbc, 0x11, 0x09, 0x39, 0xd5, 0xcf, 0x21,
	0xb3, 0x8b, 0x09, 0xf6, 0x2c, 0xaf, 0xe4, 0x10, 0xca, 0x8e, 0xb2, 0x26, 0x9c, 0x8a, 0xbc, 0xb0,
	0xe1, 0x07, 0xff, 0xa4, 0x85, 0xc5, 0x30, 0xdf, 0x68, 0xd9, 0x46, 0x7c, 0xd6, 0x53, 0xbf, 0x4e,
	0x42, 0x6e, 0x58, 0x7d, 0x80, 0xde, 0x07, 0xf0, 0x0c, 0x1a, 0x97, 0xfd, 0xc6, 0x71, 0x37, 0xef,
	0x15, 0x83, 0x46, 0xa4, 0xa5, 0x3d, 0x39, 0xf4, 0x50, 0x07, 0xce, 0xf4, 0x55, 0xd2, 0x12, 0x38,
	0x71, 0x4c, 0x29, 0xdd, 0xf7, 0x31, 0x01, 0xab, 0x66, 0xa2, 0x65, 0x4a, 0x44, 0xda, 0x69, 0x63,
	0xe0, 0x81, 0x37, 0xdc, 0x90, 0xf3, 0xcf, 0xc1, 0x90, 0xcc, 0x5e, 0xac, 0xb2, 0x95, 0x22, 0x16,
	0x8e, 0xb1, 0x97, 0x55, 0x33, 0xf8, 0xee, 0xaa, 0x19, 0x51, 0x7b, 0x59, 0x72, 0xc8, 0xb6, 0xc3,
	0x0a, 0xcf, 0xde, 0x01, 0x9e, 0xc8, 0x46, 0xc5, 0xe3, 0x53, 0x7d, 0x85, 0xfd, 0x88, 0x60, 0x8a,
	0x9b, 0xe1, 0x9e, 0x8e, 0x75, 0x1c, 0x62, 0x2e, 0x1d, 0xa3, 0x63, 0x1d, 0x73, 0xc4, 0x1d, 0x1c,
	0xc5, 0x4b, 0xd7, 0x71, 0x80, 0x46, 0x21, 0x17, 0xfb, 0x02, 0x23, 0xc0, 0x4d, 0x1e, 0x53, 0xd5,
	0xc7, 0x3f, 0xdb, 0xe8, 0x14, 0x0b, 0xb7, 0xa2, 0x13, 0x51, 0x8f, 0x9a, 0x03, 0x0f, 0x3c, 0x74,
	0x08, 0x19, 0xf9, 0x55, 0x46, 0x20, 0x4f, 0x74, 0x63, 0x6f, 0x8d, 0x5e, 0x87, 0xfc, 0x88, 0x83,
	0xad, 0x45, 0xfc, 0x8c, 0x96, 0xc1, 0xf5, 0xc8, 0x94, 0x87, 0x5c, 0xc8, 0xc5, 0xae, 0xc7, 0x03,
	0x19, 0xe9, 0x63, 0x6e, 0x09, 0x06, 0xee, 0xd4, 0x2b, 0x72, 0xa2, 0x2f, 0x48, 0x91, 0xd7, 0x3f,
	0xcf, 0xbd, 0x62, 0xe2, 0x27, 0x81, 0x24, 0x38, 0xc6, 0x2b, 0x26, 0x7e, 0x22, 0x5e, 0x5e, 0x3c,
	0x89, 0x7a, 0xc5, 0x94, 0x43, 0x4f, 0xfd, 0xbd, 0x02, 0xe7, 0x86, 0x6d, 0xe8, 0x0a, 0xa6, 0xe8,
	0x0e, 0xcc, 0xb3, 0x6c, 0x34, 0x83, 0x0e, 0x85, 0xe1, 0x30, 0x38, 0x82, 0x1f, 0xcf, 0xa2, 0x19,
	0x61, 0x38, 0xea, 0x4f, 0x15, 0x78, 0x59, 0x9c, 0x09, 0x65, 0xe7, 0x31, 0x76, 0x37, 0x69, 0xe4,
	0x50, 0x75, 0xe9, 0xb8, 0x67, 0xe7, 0x8c, 0xde, 0x99, 0xab, 0xbb, 0xa0, 0x1e, 0xa5, 0x8c, 0x3c,
	0x8d, 0x5f, 0x86, 0x15, 0x79, 0xc6, 0xb5, 0x19, 0x99, 0x3c, 0xe2, 0x96, 0x3b, 0x3d, 0x4e, 0xf5,
	0x0e, 0xbc, 0xb6, 0x69, 0xdb, 0x0f, 0x74, 0xdb, 0xb6, 0xb0, 0x19, 0x7b, 0x81, 0xe4, 0xed, 0x38,
	0x6e, 0x58, 0x01, 0x8d, 0x5b, 0x1a, 0xfc, 0x41, 0x81, 0xd7, 0xc7, 0xc2, 0x93, 0x1a, 0x6e, 0xc1,
	0x22, 0xd5, 0x6d, 0x3b, 0x78, 0x93, 0x7e, 0x69, 0x4c, 0x37, 0xf1, 0x5b, 0x2b, 0x4d, 0xb0, 0xce,
	0xaa, 0x64, 0x38, 0x07, 0x67, 0xee, 0xe2, 0x27, 0xa1, 0x25, 0xf7, 0x4d, 0xb9, 0x68, 0x75, 0x0b,
	0xce, 0xf6, 0x3f, 0x90, 0xda, 0x5f, 0x84, 0x2c, 0xc1, 0x4f, 0x68, 0x35, 0x6a, 0x13, 0x61, 0xe3,
	0x0c, 0x89, 0x71, 0xa8, 0xbb, 0xb0, 0xa8, 0xe9, 0xd4, 0x72, 0xd0, 0x8b, 0x90, 0x26, 0x7e, 0x0b,
	0xbb, 0xcc, 0x2a, 0x92, 0xb6, 0x37, 0x21, 0x2e, 0xc6, 0x88, 0xd3, 0xb2, 0x08, 0x7f, 0x2e, 0xec,
	0x1b, 0x9d, 0x52, 0x3f, 0x01, 0xb4, 0xdd, 0xc1, 0x84, 0xc6, 0xbf, 0x47, 0xd8, 0x8b, 0x95, 0x5d,
	0xd3, 0xbd, 0x62, 0x14, 0x6f, 0x40, 0x7e, 0x08, 0x2f, 0x70, 0xfc, 0xa1, 0x9f, 0xfd, 0x7c, 0x0a,
	0xc1, 0x67, 0x3a, 0x55, 0x7e, 0xcd, 0x3e, 0xe1, 0x5e, 0x1d, 0x86, 0xa9, 0xad, 0x98, 0x91, 0x51,
	0xb8, 0xbc, 0xf8, 0x97, 0x3a, 0xd3, 0x2d, 0x2f, 0xfe, 0x49, 0x87, 0x58, 0x9e, 0x0d, 0x67, 0x62,
	0xcb, 0x0b, 0x3f, 0x8f, 0xaa, 0x40, 0x2a, 0xb8, 0x22, 0x95, 0x62, 0xde, 0x9e, 0x70, 0x55, 0x01,
	0x94, 0x16, 0x02, 0xa9, 0x26, 0x9c, 0x8e, 0x49, 0x93, 0x1f, 0x8c, 0xdd, 0x81, 0x25, 0x8f, 0xff,
	0x92, 0x92, 0xde, 0x9a, 0xb4, 0x8c, 0xe7, 0xcc, 0x9a, 0x04, 0x51, 0x75, 0x69, 0xb3, 0x6d, 0xd6,
	0x0a, 0x85, 0x37, 0xb1, 0xb3, 0x6c, 0x7b, 0xd4, 0x5a, 0xdf, 0x42, 0xe4, 0xad, 0xf8, 0x4c, 0x65,
	0x18, 0x90, 0x8b, 0x1b, 0x4b, 0xde, 0x87, 0xcf, 0x52, 0xc8, 0x95, 0xef, 0xd3, 0xb0, 0x72, 0xdf,
	0xc7, 0x6e, 0xb7, 0x82, 0xdd, 0x8e, 0x65, 0x60, 0xf4, 0x63, 0x05, 0x56, 0xa2, 0xf7, 0x26, 0x68,
	0x63, 0x42, 0xf0, 0xc8, 0x25, 0x4d, 0xfe, 0xc6, 0x54, 0xbc, 0x32, 0x99, 0xfc, 0x24, 0xa2, 0x09,
	0x6b, 0x60, 0x27, 0xd6, 0x24, 0xd2, 0x29, 0x4f, 0xac, 0x49, 0xb4, 0x63, 0xbe, 0xac, 0xc4, 0xac,
	0xc2, 0x1a, 0xf2, 0x89, 0x75, 0x89, 0x5c, 0x29, 0x4c, 0xac, 0x4b, 0xec, 0x4a, 0xe1, 0x67, 0x0a,
	0x64, 0xe2, 0xd9, 0x17, 0x8d, 0xfb, 0x8a, 0x70, 0x68, 0x36, 0xcf, 0xbf, 0x3b, 0x25, 0xb7, 0xd4,
	0xe7, 0xe7, 0x0a, 0x64, 0xe2, 0xbd, 0xef, 0xd8, 0xfa, 0x0c, 0xed, 0xb6, 0xc7, 0xd6, 0x67, 0x78,
	0xc3, 0x7d, 0x59, 0x41, 0xbf, 0x53, 0x20, 0x3f, 0xba, 0x16, 0x40, 0x7b, 0xe3, 0xf7, 0xe0, 0x47,
	0xd7, 0x36, 0xf9, 0xfd, 0x19, 0x20, 0x49, 0x2b, 0x7e, 0xad, 0xc0, 0x2b, 0x63, 0x94, 0x09, 0xe8,
	0xfe, 0x98, 0x22, 0xc7, 0x2f, 0x61, 0xf2, 0xda, 0x2c, 0x21, 0x43, 0x27, 0xfc, 0x52, 0xe9, 0x7d,
	0x72, 0x1b, 0xdc, 0x67, 0xa1, 0x49, 0x5f, 0x5c, 0xf6, 0xdd, 0xc5, 0xe5, 0x6f, 0x4e, 0xcd, 0x1f,
	0xe8, 0xb5, 0xf5, 0x7d, 0xe2, 0xab, 0x67, 0x6b, 0xca, 0x37, 0xcf, 0xd6, 0x94, 0xbf, 0x3d, 0x5b,
	0x53, 0x7e, 0xf1, 0xdd, 0xda, 0xdc, 0x37, 0xdf, 0xad, 0xcd, 0x7d, 0xfb, 0xdd, 0xda, 0x1c, 0xbc,
	0x6a, 0x38, 0xad, 0xf1, 0x04, 0x6c, 0x9d, 0x8c, 0x74, 0x99, 0xae, 0x43, 0x9d, 0xb2, 0xf2, 0xd1,
	0x27, 0x0d, 0x8b, 0x36, 0xfd, 0x1a, 0x63, 0x59, 0x37, 0x1c, 0xaf, 0xe5, 0x78, 0xeb, 0x2e, 0xb6,
	0xf5, 0x2e, 0x76, 0xd7, 0x3b, 0x57, 0xc2, 0x9f, 0xfc, 0x55, 0x85, 0xb7, 0x3e, 0xd6, 0xdf, 0x0e,
	0xdc, 0xe8, 0x8d, 0x3a, 0xc5, 0x2f, 0x13, 0x0b, 0xe5, 0x52, 0x69, 0xf7, 0xb7, 0x89, 0x0b, 0xe5,
	0x40, 0xc3, 0x12, 0xd3, 0xb0, 0x14, 0x6a, 0xd8, 0x53, 0xa9, 0x70, 0x50, 0xfc, 0x53, 0x8f, 0xee,
	0x90, 0xd1, 0x1d, 0x86, 0x74, 0x87, 0x3d, 0xba, 0xc3, 0x83, 0xe2, 0xb3, 0x44, 0x71, 0x2c, 0xba,
	0xc3, 0xdd, 0xf2, 0xd6, 0x1d, 0x4c, 0x75, 0x53, 0xa7, 0xfa, 0xdf, 0x13, 0xaf, 0x06, 0x3c, 0x1b,
	0x1b, 0x8c, 0x89, 0xfd, 0x2b, 0xb9, 0x36, 0x36, 0x7a, 0x6c, 0x1b, 0x1b, 0x07, 0xc5, 0xda, 0x12,
	0x7f, 0xe1, 0xf0, 0xe6, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xcc, 0x34, 0x1d, 0x2f, 0x31,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	ProposalInfo(ctx context.Context, in *ProposalInfoRequest, opts ...grpc.CallOption) (*ProposalInfoResponse, error)
	ProposalList(ctx context.Context, in *ProposalListRequest, opts ...grpc.CallOption) (QueryService_ProposalListClient, error)
	ProposalData(ctx context.Context, in *ProposalDataRequest, opts ...grpc.CallOption) (*ProposalDataResponse, error)
	NextProposalId(ctx context.Context, in *NextProposalIdRequest, opts ...grpc.CallOption) (*NextProposalIdResponse, error)
	ValidatorVotes(ctx context.Context, in *ValidatorVotesRequest, opts ...grpc.CallOption) (QueryService_ValidatorVotesClient, error)
	VotingPowerAtProposalStart(ctx context.Context, in *VotingPowerAtProposalStartRequest, opts ...grpc.CallOption) (*VotingPowerAtProposalStartResponse, error)
	AllTalliedDelegatorVotesForProposal(ctx context.Context, in *AllTalliedDelegatorVotesForProposalRequest, opts ...grpc.CallOption) (QueryService_AllTalliedDelegatorVotesForProposalClient, error)
	// Used for computing voting power ?
	ProposalRateData(ctx context.Context, in *ProposalRateDataRequest, opts ...grpc.CallOption) (QueryService_ProposalRateDataClient, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) ProposalInfo(ctx context.Context, in *ProposalInfoRequest, opts ...grpc.CallOption) (*ProposalInfoResponse, error) {
	out := new(ProposalInfoResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.governance.v1.QueryService/ProposalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ProposalList(ctx context.Context, in *ProposalListRequest, opts ...grpc.CallOption) (QueryService_ProposalListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[0], "/penumbra.core.component.governance.v1.QueryService/ProposalList", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceProposalListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_ProposalListClient interface {
	Recv() (*ProposalListResponse, error)
	grpc.ClientStream
}

type queryServiceProposalListClient struct {
	grpc.ClientStream
}

func (x *queryServiceProposalListClient) Recv() (*ProposalListResponse, error) {
	m := new(ProposalListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) ProposalData(ctx context.Context, in *ProposalDataRequest, opts ...grpc.CallOption) (*ProposalDataResponse, error) {
	out := new(ProposalDataResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.governance.v1.QueryService/ProposalData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) NextProposalId(ctx context.Context, in *NextProposalIdRequest, opts ...grpc.CallOption) (*NextProposalIdResponse, error) {
	out := new(NextProposalIdResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.governance.v1.QueryService/NextProposalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ValidatorVotes(ctx context.Context, in *ValidatorVotesRequest, opts ...grpc.CallOption) (QueryService_ValidatorVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[1], "/penumbra.core.component.governance.v1.QueryService/ValidatorVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceValidatorVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_ValidatorVotesClient interface {
	Recv() (*ValidatorVotesResponse, error)
	grpc.ClientStream
}

type queryServiceValidatorVotesClient struct {
	grpc.ClientStream
}

func (x *queryServiceValidatorVotesClient) Recv() (*ValidatorVotesResponse, error) {
	m := new(ValidatorVotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) VotingPowerAtProposalStart(ctx context.Context, in *VotingPowerAtProposalStartRequest, opts ...grpc.CallOption) (*VotingPowerAtProposalStartResponse, error) {
	out := new(VotingPowerAtProposalStartResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.component.governance.v1.QueryService/VotingPowerAtProposalStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) AllTalliedDelegatorVotesForProposal(ctx context.Context, in *AllTalliedDelegatorVotesForProposalRequest, opts ...grpc.CallOption) (QueryService_AllTalliedDelegatorVotesForProposalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[2], "/penumbra.core.component.governance.v1.QueryService/AllTalliedDelegatorVotesForProposal", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceAllTalliedDelegatorVotesForProposalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_AllTalliedDelegatorVotesForProposalClient interface {
	Recv() (*AllTalliedDelegatorVotesForProposalResponse, error)
	grpc.ClientStream
}

type queryServiceAllTalliedDelegatorVotesForProposalClient struct {
	grpc.ClientStream
}

func (x *queryServiceAllTalliedDelegatorVotesForProposalClient) Recv() (*AllTalliedDelegatorVotesForProposalResponse, error) {
	m := new(AllTalliedDelegatorVotesForProposalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) ProposalRateData(ctx context.Context, in *ProposalRateDataRequest, opts ...grpc.CallOption) (QueryService_ProposalRateDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[3], "/penumbra.core.component.governance.v1.QueryService/ProposalRateData", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceProposalRateDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_ProposalRateDataClient interface {
	Recv() (*ProposalRateDataResponse, error)
	grpc.ClientStream
}

type queryServiceProposalRateDataClient struct {
	grpc.ClientStream
}

func (x *queryServiceProposalRateDataClient) Recv() (*ProposalRateDataResponse, error) {
	m := new(ProposalRateDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	ProposalInfo(context.Context, *ProposalInfoRequest) (*ProposalInfoResponse, error)
	ProposalList(*ProposalListRequest, QueryService_ProposalListServer) error
	ProposalData(context.Context, *ProposalDataRequest) (*ProposalDataResponse, error)
	NextProposalId(context.Context, *NextProposalIdRequest) (*NextProposalIdResponse, error)
	ValidatorVotes(*ValidatorVotesRequest, QueryService_ValidatorVotesServer) error
	VotingPowerAtProposalStart(context.Context, *VotingPowerAtProposalStartRequest) (*VotingPowerAtProposalStartResponse, error)
	AllTalliedDelegatorVotesForProposal(*AllTalliedDelegatorVotesForProposalRequest, QueryService_AllTalliedDelegatorVotesForProposalServer) error
	// Used for computing voting power ?
	ProposalRateData(*ProposalRateDataRequest, QueryService_ProposalRateDataServer) error
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) ProposalInfo(ctx context.Context, req *ProposalInfoRequest) (*ProposalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalInfo not implemented")
}
func (*UnimplementedQueryServiceServer) ProposalList(req *ProposalListRequest, srv QueryService_ProposalListServer) error {
	return status.Errorf(codes.Unimplemented, "method ProposalList not implemented")
}
func (*UnimplementedQueryServiceServer) ProposalData(ctx context.Context, req *ProposalDataRequest) (*ProposalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalData not implemented")
}
func (*UnimplementedQueryServiceServer) NextProposalId(ctx context.Context, req *NextProposalIdRequest) (*NextProposalIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextProposalId not implemented")
}
func (*UnimplementedQueryServiceServer) ValidatorVotes(req *ValidatorVotesRequest, srv QueryService_ValidatorVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ValidatorVotes not implemented")
}
func (*UnimplementedQueryServiceServer) VotingPowerAtProposalStart(ctx context.Context, req *VotingPowerAtProposalStartRequest) (*VotingPowerAtProposalStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotingPowerAtProposalStart not implemented")
}
func (*UnimplementedQueryServiceServer) AllTalliedDelegatorVotesForProposal(req *AllTalliedDelegatorVotesForProposalRequest, srv QueryService_AllTalliedDelegatorVotesForProposalServer) error {
	return status.Errorf(codes.Unimplemented, "method AllTalliedDelegatorVotesForProposal not implemented")
}
func (*UnimplementedQueryServiceServer) ProposalRateData(req *ProposalRateDataRequest, srv QueryService_ProposalRateDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ProposalRateData not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_ProposalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ProposalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.governance.v1.QueryService/ProposalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ProposalInfo(ctx, req.(*ProposalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ProposalList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProposalListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).ProposalList(m, &queryServiceProposalListServer{stream})
}

type QueryService_ProposalListServer interface {
	Send(*ProposalListResponse) error
	grpc.ServerStream
}

type queryServiceProposalListServer struct {
	grpc.ServerStream
}

func (x *queryServiceProposalListServer) Send(m *ProposalListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryService_ProposalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ProposalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.governance.v1.QueryService/ProposalData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ProposalData(ctx, req.(*ProposalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_NextProposalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextProposalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).NextProposalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.governance.v1.QueryService/NextProposalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).NextProposalId(ctx, req.(*NextProposalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ValidatorVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ValidatorVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).ValidatorVotes(m, &queryServiceValidatorVotesServer{stream})
}

type QueryService_ValidatorVotesServer interface {
	Send(*ValidatorVotesResponse) error
	grpc.ServerStream
}

type queryServiceValidatorVotesServer struct {
	grpc.ServerStream
}

func (x *queryServiceValidatorVotesServer) Send(m *ValidatorVotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryService_VotingPowerAtProposalStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotingPowerAtProposalStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).VotingPowerAtProposalStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.component.governance.v1.QueryService/VotingPowerAtProposalStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).VotingPowerAtProposalStart(ctx, req.(*VotingPowerAtProposalStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_AllTalliedDelegatorVotesForProposal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllTalliedDelegatorVotesForProposalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).AllTalliedDelegatorVotesForProposal(m, &queryServiceAllTalliedDelegatorVotesForProposalServer{stream})
}

type QueryService_AllTalliedDelegatorVotesForProposalServer interface {
	Send(*AllTalliedDelegatorVotesForProposalResponse) error
	grpc.ServerStream
}

type queryServiceAllTalliedDelegatorVotesForProposalServer struct {
	grpc.ServerStream
}

func (x *queryServiceAllTalliedDelegatorVotesForProposalServer) Send(m *AllTalliedDelegatorVotesForProposalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryService_ProposalRateData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProposalRateDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).ProposalRateData(m, &queryServiceProposalRateDataServer{stream})
}

type QueryService_ProposalRateDataServer interface {
	Send(*ProposalRateDataResponse) error
	grpc.ServerStream
}

type queryServiceProposalRateDataServer struct {
	grpc.ServerStream
}

func (x *queryServiceProposalRateDataServer) Send(m *ProposalRateDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.core.component.governance.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposalInfo",
			Handler:    _QueryService_ProposalInfo_Handler,
		},
		{
			MethodName: "ProposalData",
			Handler:    _QueryService_ProposalData_Handler,
		},
		{
			MethodName: "NextProposalId",
			Handler:    _QueryService_NextProposalId_Handler,
		},
		{
			MethodName: "VotingPowerAtProposalStart",
			Handler:    _QueryService_VotingPowerAtProposalStart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProposalList",
			Handler:       _QueryService_ProposalList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ValidatorVotes",
			Handler:       _QueryService_ValidatorVotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AllTalliedDelegatorVotesForProposal",
			Handler:       _QueryService_AllTalliedDelegatorVotesForProposal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProposalRateData",
			Handler:       _QueryService_ProposalRateData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "penumbra/core/component/governance/v1/governance.proto",
}

func (m *ZKDelegatorVoteProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKDelegatorVoteProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKDelegatorVoteProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inner) > 0 {
		i -= len(m.Inner)
		copy(dAtA[i:], m.Inner)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Inner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalSubmit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalSubmit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalSubmit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepositAmount != nil {
		{
			size, err := m.DepositAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Proposal != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Proposal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalDepositClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalDepositClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalDepositClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Outcome != nil {
		{
			size, err := m.Outcome.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DepositAmount != nil {
		{
			size, err := m.DepositAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Proposal != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Proposal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthSig != nil {
		{
			size, err := m.AuthSig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorVoteReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorVoteReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorVoteReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorVoteBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorVoteBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorVoteBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GovernanceKey != nil {
		{
			size, err := m.GovernanceKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Proposal != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Proposal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AuthSig != nil {
		{
			size, err := m.AuthSig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorVoteBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorVoteBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorVoteBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rk != nil {
		{
			size, err := m.Rk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Nullifier != nil {
		{
			size, err := m.Nullifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UnbondedAmount != nil {
		{
			size, err := m.UnbondedAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartPosition != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartPosition))
		i--
		dAtA[i] = 0x10
	}
	if m.Proposal != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Proposal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorVoteView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorVoteView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorVoteView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegatorVote != nil {
		{
			size := m.DelegatorVote.Size()
			i -= size
			if _, err := m.DelegatorVote.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorVoteView_Visible_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorVoteView_Visible_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Visible != nil {
		{
			size, err := m.Visible.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DelegatorVoteView_Opaque_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorVoteView_Opaque_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opaque != nil {
		{
			size, err := m.Opaque.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DelegatorVoteView_Visible) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorVoteView_Visible) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorVoteView_Visible) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Note != nil {
		{
			size, err := m.Note.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DelegatorVote != nil {
		{
			size, err := m.DelegatorVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorVoteView_Opaque) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorVoteView_Opaque) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorVoteView_Opaque) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegatorVote != nil {
		{
			size, err := m.DelegatorVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorVotePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorVotePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorVotePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofBlindingS) > 0 {
		i -= len(m.ProofBlindingS)
		copy(dAtA[i:], m.ProofBlindingS)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ProofBlindingS)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ProofBlindingR) > 0 {
		i -= len(m.ProofBlindingR)
		copy(dAtA[i:], m.ProofBlindingR)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ProofBlindingR)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Randomizer) > 0 {
		i -= len(m.Randomizer)
		copy(dAtA[i:], m.Randomizer)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Randomizer)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UnbondedAmount != nil {
		{
			size, err := m.UnbondedAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.StakedNotePosition != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StakedNotePosition))
		i--
		dAtA[i] = 0x28
	}
	if m.StakedNote != nil {
		{
			size, err := m.StakedNote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartPosition != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartPosition))
		i--
		dAtA[i] = 0x10
	}
	if m.Proposal != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Proposal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommunityPoolDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityPoolDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityPoolDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommunityPoolSpend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityPoolSpend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityPoolSpend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommunityPoolOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityPoolOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityPoolOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size := m.State.Size()
			i -= size
			if _, err := m.State.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProposalState_Voting_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState_Voting_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Voting != nil {
		{
			size, err := m.Voting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ProposalState_Withdrawn_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState_Withdrawn_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Withdrawn != nil {
		{
			size, err := m.Withdrawn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProposalState_Finished_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState_Finished_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Finished != nil {
		{
			size, err := m.Finished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ProposalState_Claimed_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState_Claimed_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Claimed != nil {
		{
			size, err := m.Claimed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProposalState_Voting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalState_Voting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState_Voting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ProposalState_Withdrawn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalState_Withdrawn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState_Withdrawn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalState_Finished) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalState_Finished) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState_Finished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Outcome != nil {
		{
			size, err := m.Outcome.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalState_Claimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalState_Claimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalState_Claimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Outcome != nil {
		{
			size, err := m.Outcome.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalOutcome) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalOutcome) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalOutcome) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Outcome != nil {
		{
			size := m.Outcome.Size()
			i -= size
			if _, err := m.Outcome.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProposalOutcome_Passed_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalOutcome_Passed_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Passed != nil {
		{
			size, err := m.Passed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ProposalOutcome_Failed_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalOutcome_Failed_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Failed != nil {
		{
			size, err := m.Failed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ProposalOutcome_Slashed_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalOutcome_Slashed_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Slashed != nil {
		{
			size, err := m.Slashed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProposalOutcome_Withdrawn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalOutcome_Withdrawn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalOutcome_Withdrawn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalOutcome_Passed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalOutcome_Passed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalOutcome_Passed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ProposalOutcome_Failed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalOutcome_Failed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalOutcome_Failed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Withdrawn != nil {
		{
			size, err := m.Withdrawn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalOutcome_Slashed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalOutcome_Slashed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalOutcome_Slashed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Withdrawn != nil {
		{
			size, err := m.Withdrawn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tally) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tally) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tally) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Abstain != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Abstain))
		i--
		dAtA[i] = 0x18
	}
	if m.No != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.No))
		i--
		dAtA[i] = 0x10
	}
	if m.Yes != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Yes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Id != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposal_Signaling_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_Signaling_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Signaling != nil {
		{
			size, err := m.Signaling.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_Emergency_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_Emergency_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Emergency != nil {
		{
			size, err := m.Emergency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_ParameterChange_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_ParameterChange_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ParameterChange != nil {
		{
			size, err := m.ParameterChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_CommunityPoolSpend_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_CommunityPoolSpend_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommunityPoolSpend != nil {
		{
			size, err := m.CommunityPoolSpend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_UpgradePlan_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_UpgradePlan_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpgradePlan != nil {
		{
			size, err := m.UpgradePlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_FreezeIbcClient_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_FreezeIbcClient_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FreezeIbcClient != nil {
		{
			size, err := m.FreezeIbcClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_UnfreezeIbcClient_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_UnfreezeIbcClient_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnfreezeIbcClient != nil {
		{
			size, err := m.UnfreezeIbcClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_Signaling) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal_Signaling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_Signaling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposal_Emergency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal_Emergency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_Emergency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HaltChain {
		i--
		if m.HaltChain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proposal_ParameterChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal_ParameterChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_ParameterChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewParameters != nil {
		{
			size, err := m.NewParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OldParameters != nil {
		{
			size, err := m.OldParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposal_CommunityPoolSpend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal_CommunityPoolSpend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_CommunityPoolSpend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransactionPlan != nil {
		{
			size, err := m.TransactionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Proposal_UpgradePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal_UpgradePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_UpgradePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proposal_FreezeIbcClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal_FreezeIbcClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_FreezeIbcClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposal_UnfreezeIbcClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal_UnfreezeIbcClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_UnfreezeIbcClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ProposalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartPosition != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartPosition))
		i--
		dAtA[i] = 0x10
	}
	if m.StartBlockHeight != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ProposalDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalDepositAmount != nil {
		{
			size, err := m.ProposalDepositAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StartPosition != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartPosition))
		i--
		dAtA[i] = 0x20
	}
	if m.EndBlockHeight != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.EndBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlockHeight != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalRateDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalRateDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalRateDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ProposalRateDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalRateDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalRateDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateData != nil {
		{
			size, err := m.RateData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inactive {
		i--
		if m.Inactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ProposalListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StartPosition != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartPosition))
		i--
		dAtA[i] = 0x20
	}
	if m.EndBlockHeight != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.EndBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlockHeight != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorVotesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorVotesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorVotesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorVotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorVotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorVotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovernanceParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovernanceParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovernanceParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposalSlashThreshold) > 0 {
		i -= len(m.ProposalSlashThreshold)
		copy(dAtA[i:], m.ProposalSlashThreshold)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ProposalSlashThreshold)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProposalPassThreshold) > 0 {
		i -= len(m.ProposalPassThreshold)
		copy(dAtA[i:], m.ProposalPassThreshold)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ProposalPassThreshold)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProposalValidQuorum) > 0 {
		i -= len(m.ProposalValidQuorum)
		copy(dAtA[i:], m.ProposalValidQuorum)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ProposalValidQuorum)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProposalDepositAmount != nil {
		{
			size, err := m.ProposalDepositAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalVotingBlocks != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.ProposalVotingBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GovernanceParams != nil {
		{
			size, err := m.GovernanceParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangedAppParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangedAppParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangedAppParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DexParams != nil {
		{
			size, err := m.DexParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ShieldedPoolParams != nil {
		{
			size, err := m.ShieldedPoolParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.FundingParams != nil {
		{
			size, err := m.FundingParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DistributionsParams != nil {
		{
			size, err := m.DistributionsParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.FeeParams != nil {
		{
			size, err := m.FeeParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.StakeParams != nil {
		{
			size, err := m.StakeParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IbcParams != nil {
		{
			size, err := m.IbcParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GovernanceParams != nil {
		{
			size, err := m.GovernanceParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CommunityPoolParams != nil {
		{
			size, err := m.CommunityPoolParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SctParams != nil {
		{
			size, err := m.SctParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangedAppParametersSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangedAppParametersSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangedAppParametersSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.New != nil {
		{
			size, err := m.New.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Old != nil {
		{
			size, err := m.Old.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VotingPowerAtProposalStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotingPowerAtProposalStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotingPowerAtProposalStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ProposalId != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *VotingPowerAtProposalStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotingPowerAtProposalStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotingPowerAtProposalStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllTalliedDelegatorVotesForProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllTalliedDelegatorVotesForProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllTalliedDelegatorVotesForProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *AllTalliedDelegatorVotesForProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllTalliedDelegatorVotesForProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllTalliedDelegatorVotesForProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdentityKey != nil {
		{
			size, err := m.IdentityKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tally != nil {
		{
			size, err := m.Tally.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NextProposalIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextProposalIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextProposalIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NextProposalIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextProposalIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextProposalIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextProposalId != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.NextProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ratio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ratio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ratio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denominator != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Denominator))
		i--
		dAtA[i] = 0x10
	}
	if m.Numerator != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Numerator))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDelegatorVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDelegatorVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDelegatorVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProposalDepositClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProposalDepositClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProposalDepositClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DepositClaim != nil {
		{
			size, err := m.DepositClaim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventValidatorVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValidatorVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValidatorVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProposalWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProposalWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProposalWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Withdraw != nil {
		{
			size, err := m.Withdraw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProposalSubmit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProposalSubmit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProposalSubmit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Submit != nil {
		{
			size, err := m.Submit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventEnactProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventEnactProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventEnactProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProposalFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProposalFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProposalFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProposalSlashed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProposalSlashed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProposalSlashed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGovernance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGovernance(dAtA []byte, offset int, v uint64) int {
	offset -= sovGovernance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZKDelegatorVoteProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inner)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalSubmit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.DepositAmount != nil {
		l = m.DepositAmount.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != 0 {
		n += 1 + sovGovernance(uint64(m.Proposal))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalDepositClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != 0 {
		n += 1 + sovGovernance(uint64(m.Proposal))
	}
	if m.DepositAmount != nil {
		l = m.DepositAmount.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Outcome != nil {
		l = m.Outcome.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ValidatorVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.AuthSig != nil {
		l = m.AuthSig.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ValidatorVoteReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ValidatorVoteBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != 0 {
		n += 1 + sovGovernance(uint64(m.Proposal))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.GovernanceKey != nil {
		l = m.GovernanceKey.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *DelegatorVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.AuthSig != nil {
		l = m.AuthSig.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *DelegatorVoteBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != 0 {
		n += 1 + sovGovernance(uint64(m.Proposal))
	}
	if m.StartPosition != 0 {
		n += 1 + sovGovernance(uint64(m.StartPosition))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.UnbondedAmount != nil {
		l = m.UnbondedAmount.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Nullifier != nil {
		l = m.Nullifier.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Rk != nil {
		l = m.Rk.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *DelegatorVoteView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegatorVote != nil {
		n += m.DelegatorVote.Size()
	}
	return n
}

func (m *DelegatorVoteView_Visible_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Visible != nil {
		l = m.Visible.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *DelegatorVoteView_Opaque_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opaque != nil {
		l = m.Opaque.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *DelegatorVoteView_Visible) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegatorVote != nil {
		l = m.DelegatorVote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Note != nil {
		l = m.Note.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *DelegatorVoteView_Opaque) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegatorVote != nil {
		l = m.DelegatorVote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *DelegatorVotePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != 0 {
		n += 1 + sovGovernance(uint64(m.Proposal))
	}
	if m.StartPosition != 0 {
		n += 1 + sovGovernance(uint64(m.StartPosition))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.StakedNote != nil {
		l = m.StakedNote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.StakedNotePosition != 0 {
		n += 1 + sovGovernance(uint64(m.StakedNotePosition))
	}
	if m.UnbondedAmount != nil {
		l = m.UnbondedAmount.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.Randomizer)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ProofBlindingR)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ProofBlindingS)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *CommunityPoolDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *CommunityPoolSpend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *CommunityPoolOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != 0 {
		n += 1 + sovGovernance(uint64(m.Vote))
	}
	return n
}

func (m *ProposalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		n += m.State.Size()
	}
	return n
}

func (m *ProposalState_Voting_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voting != nil {
		l = m.Voting.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *ProposalState_Withdrawn_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdrawn != nil {
		l = m.Withdrawn.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *ProposalState_Finished_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Finished != nil {
		l = m.Finished.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *ProposalState_Claimed_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claimed != nil {
		l = m.Claimed.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *ProposalState_Voting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ProposalState_Withdrawn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalState_Finished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Outcome != nil {
		l = m.Outcome.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalState_Claimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Outcome != nil {
		l = m.Outcome.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalOutcome) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Outcome != nil {
		n += m.Outcome.Size()
	}
	return n
}

func (m *ProposalOutcome_Passed_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Passed != nil {
		l = m.Passed.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *ProposalOutcome_Failed_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *ProposalOutcome_Slashed_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slashed != nil {
		l = m.Slashed.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *ProposalOutcome_Withdrawn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalOutcome_Passed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ProposalOutcome_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdrawn != nil {
		l = m.Withdrawn.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalOutcome_Slashed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdrawn != nil {
		l = m.Withdrawn.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *Tally) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Yes != 0 {
		n += 1 + sovGovernance(uint64(m.Yes))
	}
	if m.No != 0 {
		n += 1 + sovGovernance(uint64(m.No))
	}
	if m.Abstain != 0 {
		n += 1 + sovGovernance(uint64(m.Abstain))
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGovernance(uint64(m.Id))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Proposal_Signaling_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Signaling != nil {
		l = m.Signaling.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *Proposal_Emergency_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Emergency != nil {
		l = m.Emergency.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *Proposal_ParameterChange_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParameterChange != nil {
		l = m.ParameterChange.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *Proposal_CommunityPoolSpend_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommunityPoolSpend != nil {
		l = m.CommunityPoolSpend.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *Proposal_UpgradePlan_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpgradePlan != nil {
		l = m.UpgradePlan.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *Proposal_FreezeIbcClient_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FreezeIbcClient != nil {
		l = m.FreezeIbcClient.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *Proposal_UnfreezeIbcClient_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnfreezeIbcClient != nil {
		l = m.UnfreezeIbcClient.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}
func (m *Proposal_Signaling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *Proposal_Emergency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HaltChain {
		n += 2
	}
	return n
}

func (m *Proposal_ParameterChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldParameters != nil {
		l = m.OldParameters.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.NewParameters != nil {
		l = m.NewParameters.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *Proposal_CommunityPoolSpend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionPlan != nil {
		l = m.TransactionPlan.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *Proposal_UpgradePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGovernance(uint64(m.Height))
	}
	return n
}

func (m *Proposal_FreezeIbcClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *Proposal_UnfreezeIbcClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGovernance(uint64(m.ProposalId))
	}
	return n
}

func (m *ProposalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartBlockHeight != 0 {
		n += 1 + sovGovernance(uint64(m.StartBlockHeight))
	}
	if m.StartPosition != 0 {
		n += 1 + sovGovernance(uint64(m.StartPosition))
	}
	return n
}

func (m *ProposalDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGovernance(uint64(m.ProposalId))
	}
	return n
}

func (m *ProposalDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.StartBlockHeight != 0 {
		n += 1 + sovGovernance(uint64(m.StartBlockHeight))
	}
	if m.EndBlockHeight != 0 {
		n += 1 + sovGovernance(uint64(m.EndBlockHeight))
	}
	if m.StartPosition != 0 {
		n += 1 + sovGovernance(uint64(m.StartPosition))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.ProposalDepositAmount != nil {
		l = m.ProposalDepositAmount.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalRateDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGovernance(uint64(m.ProposalId))
	}
	return n
}

func (m *ProposalRateDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateData != nil {
		l = m.RateData.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ProposalListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inactive {
		n += 2
	}
	return n
}

func (m *ProposalListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.StartBlockHeight != 0 {
		n += 1 + sovGovernance(uint64(m.StartBlockHeight))
	}
	if m.EndBlockHeight != 0 {
		n += 1 + sovGovernance(uint64(m.EndBlockHeight))
	}
	if m.StartPosition != 0 {
		n += 1 + sovGovernance(uint64(m.StartPosition))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ValidatorVotesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGovernance(uint64(m.ProposalId))
	}
	return n
}

func (m *ValidatorVotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *GovernanceParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalVotingBlocks != 0 {
		n += 1 + sovGovernance(uint64(m.ProposalVotingBlocks))
	}
	if m.ProposalDepositAmount != nil {
		l = m.ProposalDepositAmount.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ProposalValidQuorum)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ProposalPassThreshold)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ProposalSlashThreshold)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GovernanceParams != nil {
		l = m.GovernanceParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ChangedAppParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SctParams != nil {
		l = m.SctParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.CommunityPoolParams != nil {
		l = m.CommunityPoolParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.GovernanceParams != nil {
		l = m.GovernanceParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.IbcParams != nil {
		l = m.IbcParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.StakeParams != nil {
		l = m.StakeParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.FeeParams != nil {
		l = m.FeeParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.DistributionsParams != nil {
		l = m.DistributionsParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.FundingParams != nil {
		l = m.FundingParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.ShieldedPoolParams != nil {
		l = m.ShieldedPoolParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.DexParams != nil {
		l = m.DexParams.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *ChangedAppParametersSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Old != nil {
		l = m.Old.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.New != nil {
		l = m.New.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *VotingPowerAtProposalStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGovernance(uint64(m.ProposalId))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *VotingPowerAtProposalStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingPower != 0 {
		n += 1 + sovGovernance(uint64(m.VotingPower))
	}
	return n
}

func (m *AllTalliedDelegatorVotesForProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGovernance(uint64(m.ProposalId))
	}
	return n
}

func (m *AllTalliedDelegatorVotesForProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tally != nil {
		l = m.Tally.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.IdentityKey != nil {
		l = m.IdentityKey.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *NextProposalIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NextProposalIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextProposalId != 0 {
		n += 1 + sovGovernance(uint64(m.NextProposalId))
	}
	return n
}

func (m *Ratio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Numerator != 0 {
		n += 1 + sovGovernance(uint64(m.Numerator))
	}
	if m.Denominator != 0 {
		n += 1 + sovGovernance(uint64(m.Denominator))
	}
	return n
}

func (m *EventDelegatorVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *EventProposalDepositClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositClaim != nil {
		l = m.DepositClaim.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *EventValidatorVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *EventProposalWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdraw != nil {
		l = m.Withdraw.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *EventProposalSubmit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Submit != nil {
		l = m.Submit.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *EventEnactProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *EventProposalFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *EventProposalSlashed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func sovGovernance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGovernance(x uint64) (n int) {
	return sovGovernance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZKDelegatorVoteProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKDelegatorVoteProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKDelegatorVoteProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inner = append(m.Inner[:0], dAtA[iNdEx:postIndex]...)
			if m.Inner == nil {
				m.Inner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalSubmit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalSubmit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalSubmit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositAmount == nil {
				m.DepositAmount = &v1.Amount{}
			}
			if err := m.DepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			m.Proposal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proposal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalDepositClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalDepositClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalDepositClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			m.Proposal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proposal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositAmount == nil {
				m.DepositAmount = &v1.Amount{}
			}
			if err := m.DepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outcome == nil {
				m.Outcome = &ProposalOutcome{}
			}
			if err := m.Outcome.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &ValidatorVoteBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthSig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthSig == nil {
				m.AuthSig = &v11.SpendAuthSignature{}
			}
			if err := m.AuthSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorVoteReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorVoteReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorVoteReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorVoteBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorVoteBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorVoteBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			m.Proposal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proposal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GovernanceKey == nil {
				m.GovernanceKey = &v12.GovernanceKey{}
			}
			if err := m.GovernanceKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &ValidatorVoteReason{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &DelegatorVoteBody{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthSig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthSig == nil {
				m.AuthSig = &v11.SpendAuthSignature{}
			}
			if err := m.AuthSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &ZKDelegatorVoteProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorVoteBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorVoteBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorVoteBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			m.Proposal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proposal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v13.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnbondedAmount == nil {
				m.UnbondedAmount = &v1.Amount{}
			}
			if err := m.UnbondedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nullifier == nil {
				m.Nullifier = &v14.Nullifier{}
			}
			if err := m.Nullifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rk == nil {
				m.Rk = &v11.SpendVerificationKey{}
			}
			if err := m.Rk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorVoteView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorVoteView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorVoteView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DelegatorVoteView_Visible{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DelegatorVote = &DelegatorVoteView_Visible_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opaque", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DelegatorVoteView_Opaque{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DelegatorVote = &DelegatorVoteView_Opaque_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorVoteView_Visible) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visible: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visible: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegatorVote == nil {
				m.DelegatorVote = &DelegatorVote{}
			}
			if err := m.DelegatorVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Note == nil {
				m.Note = &v15.NoteView{}
			}
			if err := m.Note.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorVoteView_Opaque) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Opaque: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Opaque: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegatorVote == nil {
				m.DelegatorVote = &DelegatorVote{}
			}
			if err := m.DelegatorVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorVotePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorVotePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorVotePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			m.Proposal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proposal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedNote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakedNote == nil {
				m.StakedNote = &v15.Note{}
			}
			if err := m.StakedNote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedNotePosition", wireType)
			}
			m.StakedNotePosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedNotePosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnbondedAmount == nil {
				m.UnbondedAmount = &v1.Amount{}
			}
			if err := m.UnbondedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomizer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Randomizer = append(m.Randomizer[:0], dAtA[iNdEx:postIndex]...)
			if m.Randomizer == nil {
				m.Randomizer = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofBlindingR", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofBlindingR = append(m.ProofBlindingR[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofBlindingR == nil {
				m.ProofBlindingR = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofBlindingS", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofBlindingS = append(m.ProofBlindingS[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofBlindingS == nil {
				m.ProofBlindingS = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityPoolDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityPoolDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityPoolDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v13.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityPoolSpend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityPoolSpend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityPoolSpend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v13.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityPoolOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityPoolOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityPoolOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v13.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &v12.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= Vote_Vote(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalState_Voting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &ProposalState_Voting_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalState_Withdrawn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &ProposalState_Withdrawn_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalState_Finished{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &ProposalState_Finished_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalState_Claimed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &ProposalState_Claimed_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalState_Voting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Voting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Voting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalState_Withdrawn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdrawn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdrawn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalState_Finished) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Finished: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Finished: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outcome == nil {
				m.Outcome = &ProposalOutcome{}
			}
			if err := m.Outcome.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalState_Claimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outcome == nil {
				m.Outcome = &ProposalOutcome{}
			}
			if err := m.Outcome.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalOutcome) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalOutcome: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalOutcome: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalOutcome_Passed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Outcome = &ProposalOutcome_Passed_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalOutcome_Failed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Outcome = &ProposalOutcome_Failed_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposalOutcome_Slashed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Outcome = &ProposalOutcome_Slashed_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalOutcome_Withdrawn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdrawn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdrawn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalOutcome_Passed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Passed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Passed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalOutcome_Failed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Withdrawn == nil {
				m.Withdrawn = &ProposalOutcome_Withdrawn{}
			}
			if err := m.Withdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalOutcome_Slashed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slashed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slashed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Withdrawn == nil {
				m.Withdrawn = &ProposalOutcome_Withdrawn{}
			}
			if err := m.Withdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tally) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tally: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tally: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			m.Yes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			m.No = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.No |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abstain", wireType)
			}
			m.Abstain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Abstain |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signaling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Proposal_Signaling{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_Signaling_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emergency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Proposal_Emergency{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_Emergency_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Proposal_ParameterChange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_ParameterChange_{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolSpend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Proposal_CommunityPoolSpend{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_CommunityPoolSpend_{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Proposal_UpgradePlan{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_UpgradePlan_{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeIbcClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Proposal_FreezeIbcClient{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_FreezeIbcClient_{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnfreezeIbcClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Proposal_UnfreezeIbcClient{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Proposal_UnfreezeIbcClient_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal_Signaling) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signaling: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signaling: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal_Emergency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Emergency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Emergency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaltChain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaltChain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal_ParameterChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParameterChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParameterChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldParameters == nil {
				m.OldParameters = &ChangedAppParameters{}
			}
			if err := m.OldParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewParameters == nil {
				m.NewParameters = &ChangedAppParameters{}
			}
			if err := m.NewParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal_CommunityPoolSpend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityPoolSpend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityPoolSpend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionPlan == nil {
				m.TransactionPlan = &types.Any{}
			}
			if err := m.TransactionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal_UpgradePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal_FreezeIbcClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreezeIbcClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreezeIbcClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal_UnfreezeIbcClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnfreezeIbcClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnfreezeIbcClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
			}
			m.StartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
			}
			m.StartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockHeight", wireType)
			}
			m.EndBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ProposalState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalDepositAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalDepositAmount == nil {
				m.ProposalDepositAmount = &v1.Amount{}
			}
			if err := m.ProposalDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalRateDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalRateDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalRateDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalRateDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalRateDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalRateDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateData == nil {
				m.RateData = &v16.RateData{}
			}
			if err := m.RateData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inactive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
			}
			m.StartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockHeight", wireType)
			}
			m.EndBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ProposalState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorVotesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorVotesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorVotesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorVotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorVotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorVotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovernanceParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovernanceParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovernanceParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalVotingBlocks", wireType)
			}
			m.ProposalVotingBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalVotingBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalDepositAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalDepositAmount == nil {
				m.ProposalDepositAmount = &v1.Amount{}
			}
			if err := m.ProposalDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalValidQuorum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalValidQuorum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPassThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalPassThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalSlashThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalSlashThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GovernanceParams == nil {
				m.GovernanceParams = &GovernanceParameters{}
			}
			if err := m.GovernanceParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangedAppParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangedAppParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangedAppParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SctParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SctParams == nil {
				m.SctParams = &v14.SctParameters{}
			}
			if err := m.SctParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommunityPoolParams == nil {
				m.CommunityPoolParams = &v17.CommunityPoolParameters{}
			}
			if err := m.CommunityPoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GovernanceParams == nil {
				m.GovernanceParams = &GovernanceParameters{}
			}
			if err := m.GovernanceParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcParams == nil {
				m.IbcParams = &v18.IbcParameters{}
			}
			if err := m.IbcParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeParams == nil {
				m.StakeParams = &v16.StakeParameters{}
			}
			if err := m.StakeParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeParams == nil {
				m.FeeParams = &v19.FeeParameters{}
			}
			if err := m.FeeParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DistributionsParams == nil {
				m.DistributionsParams = &v110.DistributionsParameters{}
			}
			if err := m.DistributionsParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FundingParams == nil {
				m.FundingParams = &v111.FundingParameters{}
			}
			if err := m.FundingParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldedPoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShieldedPoolParams == nil {
				m.ShieldedPoolParams = &v15.ShieldedPoolParameters{}
			}
			if err := m.ShieldedPoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DexParams == nil {
				m.DexParams = &v112.DexParameters{}
			}
			if err := m.DexParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangedAppParametersSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangedAppParametersSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangedAppParametersSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Old == nil {
				m.Old = &ChangedAppParameters{}
			}
			if err := m.Old.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.New == nil {
				m.New = &ChangedAppParameters{}
			}
			if err := m.New.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotingPowerAtProposalStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotingPowerAtProposalStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotingPowerAtProposalStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotingPowerAtProposalStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotingPowerAtProposalStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotingPowerAtProposalStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllTalliedDelegatorVotesForProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllTalliedDelegatorVotesForProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllTalliedDelegatorVotesForProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllTalliedDelegatorVotesForProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllTalliedDelegatorVotesForProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllTalliedDelegatorVotesForProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tally", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tally == nil {
				m.Tally = &Tally{}
			}
			if err := m.Tally.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityKey == nil {
				m.IdentityKey = &v12.IdentityKey{}
			}
			if err := m.IdentityKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextProposalIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextProposalIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextProposalIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextProposalIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextProposalIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextProposalIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProposalId", wireType)
			}
			m.NextProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ratio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ratio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ratio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			m.Numerator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numerator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			m.Denominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Denominator |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDelegatorVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDelegatorVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDelegatorVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &DelegatorVote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProposalDepositClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProposalDepositClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProposalDepositClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositClaim == nil {
				m.DepositClaim = &ProposalDepositClaim{}
			}
			if err := m.DepositClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValidatorVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValidatorVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValidatorVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &ValidatorVote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProposalWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProposalWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProposalWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Withdraw == nil {
				m.Withdraw = &ProposalWithdraw{}
			}
			if err := m.Withdraw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProposalSubmit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProposalSubmit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProposalSubmit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Submit == nil {
				m.Submit = &ProposalSubmit{}
			}
			if err := m.Submit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventEnactProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventEnactProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventEnactProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProposalFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProposalFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProposalFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProposalSlashed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProposalSlashed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProposalSlashed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGovernance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGovernance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGovernance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGovernance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGovernance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGovernance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGovernance = fmt.Errorf("proto: unexpected end of group")
)

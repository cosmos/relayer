// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/component/fee/v1alpha1/fee.proto

package feev1alpha1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	v1alpha11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/asset/v1alpha1"
	v1alpha1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/num/v1alpha1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Specifies fees paid by a transaction.
type Fee struct {
	// The amount of the token used to pay fees.
	Amount *v1alpha1.Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// If present, the asset ID of the token used to pay fees.
	// If absent, specifies the staking token implicitly.
	AssetId *v1alpha11.AssetId `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *Fee) Reset()         { *m = Fee{} }
func (m *Fee) String() string { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()    {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_03007f6a7f31c8af, []int{0}
}
func (m *Fee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return m.Size()
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

func (m *Fee) GetAmount() *v1alpha1.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Fee) GetAssetId() *v1alpha11.AssetId {
	if m != nil {
		return m.AssetId
	}
	return nil
}

type GasPrices struct {
	// The price per unit block space in terms of the staking token, with an implicit 1,000 denominator.
	BlockSpacePrice uint64 `protobuf:"varint,1,opt,name=block_space_price,json=blockSpacePrice,proto3" json:"block_space_price,omitempty"`
	// The price per unit compact block space in terms of the staking token, with an implicit 1,000 denominator.
	CompactBlockSpacePrice uint64 `protobuf:"varint,2,opt,name=compact_block_space_price,json=compactBlockSpacePrice,proto3" json:"compact_block_space_price,omitempty"`
	// The price per unit verification cost in terms of the staking token, with an implicit 1,000 denominator.
	VerificationPrice uint64 `protobuf:"varint,3,opt,name=verification_price,json=verificationPrice,proto3" json:"verification_price,omitempty"`
	// The price per unit execution cost in terms of the staking token, with an implicit 1,000 denominator.
	ExecutionPrice uint64 `protobuf:"varint,4,opt,name=execution_price,json=executionPrice,proto3" json:"execution_price,omitempty"`
}

func (m *GasPrices) Reset()         { *m = GasPrices{} }
func (m *GasPrices) String() string { return proto.CompactTextString(m) }
func (*GasPrices) ProtoMessage()    {}
func (*GasPrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_03007f6a7f31c8af, []int{1}
}
func (m *GasPrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasPrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasPrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasPrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasPrices.Merge(m, src)
}
func (m *GasPrices) XXX_Size() int {
	return m.Size()
}
func (m *GasPrices) XXX_DiscardUnknown() {
	xxx_messageInfo_GasPrices.DiscardUnknown(m)
}

var xxx_messageInfo_GasPrices proto.InternalMessageInfo

func (m *GasPrices) GetBlockSpacePrice() uint64 {
	if m != nil {
		return m.BlockSpacePrice
	}
	return 0
}

func (m *GasPrices) GetCompactBlockSpacePrice() uint64 {
	if m != nil {
		return m.CompactBlockSpacePrice
	}
	return 0
}

func (m *GasPrices) GetVerificationPrice() uint64 {
	if m != nil {
		return m.VerificationPrice
	}
	return 0
}

func (m *GasPrices) GetExecutionPrice() uint64 {
	if m != nil {
		return m.ExecutionPrice
	}
	return 0
}

// Fee component configuration data.
type FeeParameters struct {
}

func (m *FeeParameters) Reset()         { *m = FeeParameters{} }
func (m *FeeParameters) String() string { return proto.CompactTextString(m) }
func (*FeeParameters) ProtoMessage()    {}
func (*FeeParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_03007f6a7f31c8af, []int{2}
}
func (m *FeeParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeParameters.Merge(m, src)
}
func (m *FeeParameters) XXX_Size() int {
	return m.Size()
}
func (m *FeeParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeParameters.DiscardUnknown(m)
}

var xxx_messageInfo_FeeParameters proto.InternalMessageInfo

// Fee-specific genesis content.
type GenesisContent struct {
	// The FeeParameters present at genesis.
	FeeParams *FeeParameters `protobuf:"bytes,1,opt,name=fee_params,json=feeParams,proto3" json:"fee_params,omitempty"`
	// The initial gas prices.
	GasPrices *GasPrices `protobuf:"bytes,2,opt,name=gas_prices,json=gasPrices,proto3" json:"gas_prices,omitempty"`
}

func (m *GenesisContent) Reset()         { *m = GenesisContent{} }
func (m *GenesisContent) String() string { return proto.CompactTextString(m) }
func (*GenesisContent) ProtoMessage()    {}
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_03007f6a7f31c8af, []int{3}
}
func (m *GenesisContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContent.Merge(m, src)
}
func (m *GenesisContent) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContent) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContent.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContent proto.InternalMessageInfo

func (m *GenesisContent) GetFeeParams() *FeeParameters {
	if m != nil {
		return m.FeeParams
	}
	return nil
}

func (m *GenesisContent) GetGasPrices() *GasPrices {
	if m != nil {
		return m.GasPrices
	}
	return nil
}

func init() {
	proto.RegisterType((*Fee)(nil), "penumbra.core.component.fee.v1alpha1.Fee")
	proto.RegisterType((*GasPrices)(nil), "penumbra.core.component.fee.v1alpha1.GasPrices")
	proto.RegisterType((*FeeParameters)(nil), "penumbra.core.component.fee.v1alpha1.FeeParameters")
	proto.RegisterType((*GenesisContent)(nil), "penumbra.core.component.fee.v1alpha1.GenesisContent")
}

func init() {
	proto.RegisterFile("penumbra/core/component/fee/v1alpha1/fee.proto", fileDescriptor_03007f6a7f31c8af)
}

var fileDescriptor_03007f6a7f31c8af = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0x87, 0x9b, 0x6c, 0x59, 0xb7, 0x23, 0x6e, 0xd9, 0x1c, 0x64, 0xdd, 0x43, 0x90, 0x52, 0xb1,
	0x08, 0x4e, 0xdc, 0xdd, 0x93, 0xf1, 0xa2, 0x2d, 0xa4, 0x78, 0x50, 0x42, 0x04, 0x0f, 0x12, 0x08,
	0xd3, 0xe9, 0x9b, 0x36, 0xd8, 0xcc, 0x84, 0xcc, 0xa4, 0xe8, 0xd9, 0x2f, 0xe0, 0x67, 0xf0, 0xe8,
	0xd9, 0x0f, 0x21, 0x7b, 0xda, 0xa3, 0x37, 0xa5, 0xbd, 0xf9, 0x29, 0x64, 0x26, 0x7f, 0xba, 0x5d,
	0x2f, 0xb9, 0x94, 0xf7, 0x9d, 0x79, 0x9e, 0xb7, 0x3f, 0x26, 0x33, 0x08, 0x67, 0xc0, 0x8a, 0x74,
	0x96, 0x13, 0x87, 0xf2, 0x1c, 0x1c, 0xca, 0xd3, 0x8c, 0x33, 0x60, 0xd2, 0x89, 0x01, 0x9c, 0xf5,
	0x39, 0x59, 0x65, 0x4b, 0x72, 0xae, 0x1a, 0x9c, 0xe5, 0x5c, 0x72, 0x6b, 0x58, 0xf3, 0x58, 0xf1,
	0xb8, 0xe1, 0xb1, 0x42, 0x6a, 0xfe, 0x6c, 0xb4, 0x3f, 0x95, 0x08, 0x01, 0x72, 0x37, 0x4d, 0xb7,
	0xe5, 0xbc, 0xb3, 0xe1, 0x3e, 0xc9, 0x8a, 0x74, 0xc7, 0xb1, 0x22, 0x2d, 0xa9, 0xc1, 0x17, 0x03,
	0x1d, 0x78, 0x00, 0x96, 0x8b, 0x0e, 0x49, 0xca, 0x0b, 0x26, 0x4f, 0x8d, 0x87, 0xc6, 0xe8, 0xee,
	0xc5, 0x00, 0xef, 0xc7, 0x51, 0x46, 0xad, 0xe3, 0x57, 0x9a, 0x0c, 0x2a, 0xc3, 0x7a, 0x89, 0x8e,
	0xf4, 0x1f, 0x47, 0xc9, 0xfc, 0xd4, 0xd4, 0xf6, 0xa3, 0x5b, 0x76, 0x99, 0x6b, 0xe7, 0xab, 0xf6,
	0xf5, 0x3c, 0xb8, 0x43, 0xca, 0x62, 0x70, 0x65, 0xa0, 0xde, 0x94, 0x08, 0x3f, 0x4f, 0x28, 0x08,
	0xeb, 0x09, 0x3a, 0x99, 0xad, 0x38, 0xfd, 0x18, 0x89, 0x8c, 0x50, 0x88, 0x32, 0xb5, 0xaa, 0x63,
	0x75, 0x83, 0xbe, 0xde, 0x78, 0xa7, 0xd6, 0x35, 0x6c, 0x3d, 0x47, 0x0f, 0xd4, 0x49, 0x11, 0x2a,
	0xa3, 0xff, 0x1d, 0x53, 0x3b, 0xf7, 0x2b, 0x60, 0x7c, 0x4b, 0x7d, 0x8a, 0xac, 0x35, 0xe4, 0x49,
	0x9c, 0x50, 0x22, 0x13, 0xce, 0x2a, 0xe7, 0x40, 0x3b, 0x27, 0x37, 0x77, 0x4a, 0xfc, 0x31, 0xea,
	0xc3, 0x27, 0xa0, 0xc5, 0x0d, 0xb6, 0xab, 0xd9, 0xe3, 0x66, 0x59, 0x83, 0x83, 0x3e, 0xba, 0xe7,
	0x01, 0xf8, 0x24, 0x27, 0x29, 0x48, 0xc8, 0xc5, 0xe0, 0x87, 0x81, 0x8e, 0xa7, 0xc0, 0x40, 0x24,
	0x62, 0xc2, 0x99, 0x04, 0x26, 0xad, 0x00, 0xa1, 0x18, 0x20, 0xca, 0x14, 0x24, 0xaa, 0x23, 0xbf,
	0xc4, 0x6d, 0x6e, 0x00, 0xde, 0x9b, 0x1d, 0xf4, 0xe2, 0xaa, 0x15, 0xd6, 0x5b, 0x84, 0x16, 0x44,
	0x94, 0xd1, 0x44, 0xf5, 0x21, 0x9c, 0x76, 0x33, 0x9b, 0xb3, 0x0f, 0x7a, 0x8b, 0xba, 0x1c, 0xff,
	0x36, 0x7f, 0x6e, 0x6c, 0xe3, 0x7a, 0x63, 0x1b, 0x7f, 0x36, 0xb6, 0xf1, 0x75, 0x6b, 0x77, 0xae,
	0xb7, 0x76, 0xe7, 0xd7, 0xd6, 0xee, 0xa0, 0x11, 0xe5, 0x69, 0xab, 0xc9, 0xe3, 0x23, 0x15, 0x57,
	0xdd, 0x34, 0xdf, 0xf8, 0x10, 0x2e, 0x12, 0xb9, 0x2c, 0x66, 0x0a, 0x75, 0x28, 0x17, 0x29, 0x17,
	0x4e, 0x0e, 0x2b, 0xf2, 0x19, 0x72, 0x67, 0x7d, 0xd1, 0x94, 0x74, 0x49, 0x12, 0x26, 0x9c, 0x36,
	0xaf, 0xe7, 0x45, 0x0c, 0x50, 0xd7, 0xdf, 0xcc, 0xae, 0x3f, 0x99, 0x78, 0xdf, 0xcd, 0xa1, 0x5f,
	0xe7, 0x9a, 0xa8, 0x5c, 0x93, 0x26, 0x97, 0x07, 0x80, 0xdf, 0x57, 0xf4, 0xd5, 0x0e, 0x0b, 0x15,
	0x16, 0x36, 0x58, 0xe8, 0x01, 0x84, 0x35, 0xb6, 0x31, 0x9f, 0xb5, 0xc1, 0xc2, 0xa9, 0x3f, 0x7e,
	0x03, 0x92, 0xcc, 0x89, 0x24, 0x7f, 0xcd, 0x51, 0xad, 0xb8, 0xae, 0x72, 0xd4, 0x6f, 0x25, 0xb9,
	0xae, 0x07, 0xe0, 0xba, 0xb5, 0x36, 0x3b, 0xd4, 0x6f, 0xf0, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x97, 0x08, 0x0b, 0xac, 0x2b, 0x04, 0x00, 0x00,
}

func (m *Fee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != nil {
		{
			size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasPrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasPrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasPrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionPrice != 0 {
		i = encodeVarintFee(dAtA, i, uint64(m.ExecutionPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.VerificationPrice != 0 {
		i = encodeVarintFee(dAtA, i, uint64(m.VerificationPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.CompactBlockSpacePrice != 0 {
		i = encodeVarintFee(dAtA, i, uint64(m.CompactBlockSpacePrice))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockSpacePrice != 0 {
		i = encodeVarintFee(dAtA, i, uint64(m.BlockSpacePrice))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeeParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenesisContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasPrices != nil {
		{
			size, err := m.GasPrices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FeeParams != nil {
		{
			size, err := m.FeeParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Fee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovFee(uint64(l))
	}
	if m.AssetId != nil {
		l = m.AssetId.Size()
		n += 1 + l + sovFee(uint64(l))
	}
	return n
}

func (m *GasPrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockSpacePrice != 0 {
		n += 1 + sovFee(uint64(m.BlockSpacePrice))
	}
	if m.CompactBlockSpacePrice != 0 {
		n += 1 + sovFee(uint64(m.CompactBlockSpacePrice))
	}
	if m.VerificationPrice != 0 {
		n += 1 + sovFee(uint64(m.VerificationPrice))
	}
	if m.ExecutionPrice != 0 {
		n += 1 + sovFee(uint64(m.ExecutionPrice))
	}
	return n
}

func (m *FeeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeParams != nil {
		l = m.FeeParams.Size()
		n += 1 + l + sovFee(uint64(l))
	}
	if m.GasPrices != nil {
		l = m.GasPrices.Size()
		n += 1 + l + sovFee(uint64(l))
	}
	return n
}

func sovFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFee(x uint64) (n int) {
	return sovFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &v1alpha1.Amount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetId == nil {
				m.AssetId = &v1alpha11.AssetId{}
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasPrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasPrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasPrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSpacePrice", wireType)
			}
			m.BlockSpacePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSpacePrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactBlockSpacePrice", wireType)
			}
			m.CompactBlockSpacePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompactBlockSpacePrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationPrice", wireType)
			}
			m.VerificationPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPrice", wireType)
			}
			m.ExecutionPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeParams == nil {
				m.FeeParams = &FeeParameters{}
			}
			if err := m.FeeParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPrices == nil {
				m.GasPrices = &GasPrices{}
			}
			if err := m.GasPrices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFee = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/app/v1alpha1/app.proto

package appv1alpha1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v8/modules/core/23-commitment/types"
	v1alpha1 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/chain/v1alpha1"
	v1alpha11 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/dao/v1alpha1"
	v1alpha15 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/fee/v1alpha1"
	v1alpha12 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/governance/v1alpha1"
	v1alpha13 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/ibc/v1alpha1"
	v1alpha16 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/shielded_pool/v1alpha1"
	v1alpha14 "github.com/cosmos/relayer/v2/relayer/chains/penumbra/core/component/stake/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Performs a key-value query, either by key or by key hash.
//
// Proofs are only supported by key.
type KeyValueRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If set, the key to fetch from storage.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// whether to return a proof
	Proof bool `protobuf:"varint,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *KeyValueRequest) Reset()         { *m = KeyValueRequest{} }
func (m *KeyValueRequest) String() string { return proto.CompactTextString(m) }
func (*KeyValueRequest) ProtoMessage()    {}
func (*KeyValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{0}
}
func (m *KeyValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueRequest.Merge(m, src)
}
func (m *KeyValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueRequest proto.InternalMessageInfo

func (m *KeyValueRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *KeyValueRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueRequest) GetProof() bool {
	if m != nil {
		return m.Proof
	}
	return false
}

type KeyValueResponse struct {
	// The value corresponding to the specified key, if it was found.
	Value *KeyValueResponse_Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// A proof of existence or non-existence.
	Proof *types.MerkleProof `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *KeyValueResponse) Reset()         { *m = KeyValueResponse{} }
func (m *KeyValueResponse) String() string { return proto.CompactTextString(m) }
func (*KeyValueResponse) ProtoMessage()    {}
func (*KeyValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{1}
}
func (m *KeyValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueResponse.Merge(m, src)
}
func (m *KeyValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueResponse proto.InternalMessageInfo

func (m *KeyValueResponse) GetValue() *KeyValueResponse_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KeyValueResponse) GetProof() *types.MerkleProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type KeyValueResponse_Value struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValueResponse_Value) Reset()         { *m = KeyValueResponse_Value{} }
func (m *KeyValueResponse_Value) String() string { return proto.CompactTextString(m) }
func (*KeyValueResponse_Value) ProtoMessage()    {}
func (*KeyValueResponse_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{1, 0}
}
func (m *KeyValueResponse_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValueResponse_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValueResponse_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValueResponse_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueResponse_Value.Merge(m, src)
}
func (m *KeyValueResponse_Value) XXX_Size() int {
	return m.Size()
}
func (m *KeyValueResponse_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueResponse_Value.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueResponse_Value proto.InternalMessageInfo

func (m *KeyValueResponse_Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Performs a prefixed key-value query, by string prefix.
type PrefixValueRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The prefix to fetch subkeys from storage.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *PrefixValueRequest) Reset()         { *m = PrefixValueRequest{} }
func (m *PrefixValueRequest) String() string { return proto.CompactTextString(m) }
func (*PrefixValueRequest) ProtoMessage()    {}
func (*PrefixValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{2}
}
func (m *PrefixValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrefixValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixValueRequest.Merge(m, src)
}
func (m *PrefixValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrefixValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixValueRequest proto.InternalMessageInfo

func (m *PrefixValueRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *PrefixValueRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type PrefixValueResponse struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PrefixValueResponse) Reset()         { *m = PrefixValueResponse{} }
func (m *PrefixValueResponse) String() string { return proto.CompactTextString(m) }
func (*PrefixValueResponse) ProtoMessage()    {}
func (*PrefixValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{3}
}
func (m *PrefixValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrefixValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixValueResponse.Merge(m, src)
}
func (m *PrefixValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrefixValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixValueResponse proto.InternalMessageInfo

func (m *PrefixValueResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PrefixValueResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type AppParameters struct {
	// Chain module parameters.
	ChainParams *v1alpha1.ChainParameters `protobuf:"bytes,1,opt,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
	// DAO module parameters.
	DaoParams *v1alpha11.DaoParameters `protobuf:"bytes,2,opt,name=dao_params,json=daoParams,proto3" json:"dao_params,omitempty"`
	// Governance module parameters.
	GovernanceParams *v1alpha12.GovernanceParameters `protobuf:"bytes,3,opt,name=governance_params,json=governanceParams,proto3" json:"governance_params,omitempty"`
	// IBC module parameters.
	IbcParams *v1alpha13.IbcParameters `protobuf:"bytes,4,opt,name=ibc_params,json=ibcParams,proto3" json:"ibc_params,omitempty"`
	// Stake module parameters.
	StakeParams *v1alpha14.StakeParameters `protobuf:"bytes,5,opt,name=stake_params,json=stakeParams,proto3" json:"stake_params,omitempty"`
	// Fee module parameters.
	FeeParams *v1alpha15.FeeParameters `protobuf:"bytes,6,opt,name=fee_params,json=feeParams,proto3" json:"fee_params,omitempty"`
}

func (m *AppParameters) Reset()         { *m = AppParameters{} }
func (m *AppParameters) String() string { return proto.CompactTextString(m) }
func (*AppParameters) ProtoMessage()    {}
func (*AppParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{4}
}
func (m *AppParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParameters.Merge(m, src)
}
func (m *AppParameters) XXX_Size() int {
	return m.Size()
}
func (m *AppParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParameters.DiscardUnknown(m)
}

var xxx_messageInfo_AppParameters proto.InternalMessageInfo

func (m *AppParameters) GetChainParams() *v1alpha1.ChainParameters {
	if m != nil {
		return m.ChainParams
	}
	return nil
}

func (m *AppParameters) GetDaoParams() *v1alpha11.DaoParameters {
	if m != nil {
		return m.DaoParams
	}
	return nil
}

func (m *AppParameters) GetGovernanceParams() *v1alpha12.GovernanceParameters {
	if m != nil {
		return m.GovernanceParams
	}
	return nil
}

func (m *AppParameters) GetIbcParams() *v1alpha13.IbcParameters {
	if m != nil {
		return m.IbcParams
	}
	return nil
}

func (m *AppParameters) GetStakeParams() *v1alpha14.StakeParameters {
	if m != nil {
		return m.StakeParams
	}
	return nil
}

func (m *AppParameters) GetFeeParams() *v1alpha15.FeeParameters {
	if m != nil {
		return m.FeeParams
	}
	return nil
}

// Requests the global configuration data for the app.
type AppParametersRequest struct {
	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *AppParametersRequest) Reset()         { *m = AppParametersRequest{} }
func (m *AppParametersRequest) String() string { return proto.CompactTextString(m) }
func (*AppParametersRequest) ProtoMessage()    {}
func (*AppParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{5}
}
func (m *AppParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParametersRequest.Merge(m, src)
}
func (m *AppParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppParametersRequest proto.InternalMessageInfo

func (m *AppParametersRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type AppParametersResponse struct {
	AppParameters *AppParameters `protobuf:"bytes,1,opt,name=app_parameters,json=appParameters,proto3" json:"app_parameters,omitempty"`
}

func (m *AppParametersResponse) Reset()         { *m = AppParametersResponse{} }
func (m *AppParametersResponse) String() string { return proto.CompactTextString(m) }
func (*AppParametersResponse) ProtoMessage()    {}
func (*AppParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{6}
}
func (m *AppParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppParametersResponse.Merge(m, src)
}
func (m *AppParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *AppParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppParametersResponse proto.InternalMessageInfo

func (m *AppParametersResponse) GetAppParameters() *AppParameters {
	if m != nil {
		return m.AppParameters
	}
	return nil
}

type GenesisAppState struct {
	// Types that are valid to be assigned to GenesisAppState:
	//	*GenesisAppState_GenesisContent
	//	*GenesisAppState_GenesisCheckpoint
	GenesisAppState isGenesisAppState_GenesisAppState `protobuf_oneof:"genesis_app_state"`
}

func (m *GenesisAppState) Reset()         { *m = GenesisAppState{} }
func (m *GenesisAppState) String() string { return proto.CompactTextString(m) }
func (*GenesisAppState) ProtoMessage()    {}
func (*GenesisAppState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{7}
}
func (m *GenesisAppState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAppState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAppState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAppState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAppState.Merge(m, src)
}
func (m *GenesisAppState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAppState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAppState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAppState proto.InternalMessageInfo

type isGenesisAppState_GenesisAppState interface {
	isGenesisAppState_GenesisAppState()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GenesisAppState_GenesisContent struct {
	GenesisContent *GenesisContent `protobuf:"bytes,1,opt,name=genesis_content,json=genesisContent,proto3,oneof" json:"genesis_content,omitempty"`
}
type GenesisAppState_GenesisCheckpoint struct {
	GenesisCheckpoint []byte `protobuf:"bytes,2,opt,name=genesis_checkpoint,json=genesisCheckpoint,proto3,oneof" json:"genesis_checkpoint,omitempty"`
}

func (*GenesisAppState_GenesisContent) isGenesisAppState_GenesisAppState()    {}
func (*GenesisAppState_GenesisCheckpoint) isGenesisAppState_GenesisAppState() {}

func (m *GenesisAppState) GetGenesisAppState() isGenesisAppState_GenesisAppState {
	if m != nil {
		return m.GenesisAppState
	}
	return nil
}

func (m *GenesisAppState) GetGenesisContent() *GenesisContent {
	if x, ok := m.GetGenesisAppState().(*GenesisAppState_GenesisContent); ok {
		return x.GenesisContent
	}
	return nil
}

func (m *GenesisAppState) GetGenesisCheckpoint() []byte {
	if x, ok := m.GetGenesisAppState().(*GenesisAppState_GenesisCheckpoint); ok {
		return x.GenesisCheckpoint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GenesisAppState) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GenesisAppState_GenesisContent)(nil),
		(*GenesisAppState_GenesisCheckpoint)(nil),
	}
}

type GenesisContent struct {
	// Stake module genesis state.
	StakeContent *v1alpha14.GenesisContent `protobuf:"bytes,1,opt,name=stake_content,json=stakeContent,proto3" json:"stake_content,omitempty"`
	// Shielded pool module genesis state.
	ShieldedPoolContent *v1alpha16.GenesisContent `protobuf:"bytes,2,opt,name=shielded_pool_content,json=shieldedPoolContent,proto3" json:"shielded_pool_content,omitempty"`
	// Governance module genesis state.
	GovernanceContent *v1alpha12.GenesisContent `protobuf:"bytes,3,opt,name=governance_content,json=governanceContent,proto3" json:"governance_content,omitempty"`
	// IBC module genesis state.
	IbcContent *v1alpha13.GenesisContent `protobuf:"bytes,4,opt,name=ibc_content,json=ibcContent,proto3" json:"ibc_content,omitempty"`
	// Chain module genesis state.
	ChainContent *v1alpha1.GenesisContent `protobuf:"bytes,5,opt,name=chain_content,json=chainContent,proto3" json:"chain_content,omitempty"`
	// DAO module genesis state.
	DaoContent *v1alpha11.GenesisContent `protobuf:"bytes,6,opt,name=dao_content,json=daoContent,proto3" json:"dao_content,omitempty"`
	// Fee module genesis state.
	FeeContent *v1alpha15.GenesisContent `protobuf:"bytes,7,opt,name=fee_content,json=feeContent,proto3" json:"fee_content,omitempty"`
}

func (m *GenesisContent) Reset()         { *m = GenesisContent{} }
func (m *GenesisContent) String() string { return proto.CompactTextString(m) }
func (*GenesisContent) ProtoMessage()    {}
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3359d6f6803c6c6, []int{8}
}
func (m *GenesisContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisContent.Merge(m, src)
}
func (m *GenesisContent) XXX_Size() int {
	return m.Size()
}
func (m *GenesisContent) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisContent.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisContent proto.InternalMessageInfo

func (m *GenesisContent) GetStakeContent() *v1alpha14.GenesisContent {
	if m != nil {
		return m.StakeContent
	}
	return nil
}

func (m *GenesisContent) GetShieldedPoolContent() *v1alpha16.GenesisContent {
	if m != nil {
		return m.ShieldedPoolContent
	}
	return nil
}

func (m *GenesisContent) GetGovernanceContent() *v1alpha12.GenesisContent {
	if m != nil {
		return m.GovernanceContent
	}
	return nil
}

func (m *GenesisContent) GetIbcContent() *v1alpha13.GenesisContent {
	if m != nil {
		return m.IbcContent
	}
	return nil
}

func (m *GenesisContent) GetChainContent() *v1alpha1.GenesisContent {
	if m != nil {
		return m.ChainContent
	}
	return nil
}

func (m *GenesisContent) GetDaoContent() *v1alpha11.GenesisContent {
	if m != nil {
		return m.DaoContent
	}
	return nil
}

func (m *GenesisContent) GetFeeContent() *v1alpha15.GenesisContent {
	if m != nil {
		return m.FeeContent
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyValueRequest)(nil), "penumbra.core.app.v1alpha1.KeyValueRequest")
	proto.RegisterType((*KeyValueResponse)(nil), "penumbra.core.app.v1alpha1.KeyValueResponse")
	proto.RegisterType((*KeyValueResponse_Value)(nil), "penumbra.core.app.v1alpha1.KeyValueResponse.Value")
	proto.RegisterType((*PrefixValueRequest)(nil), "penumbra.core.app.v1alpha1.PrefixValueRequest")
	proto.RegisterType((*PrefixValueResponse)(nil), "penumbra.core.app.v1alpha1.PrefixValueResponse")
	proto.RegisterType((*AppParameters)(nil), "penumbra.core.app.v1alpha1.AppParameters")
	proto.RegisterType((*AppParametersRequest)(nil), "penumbra.core.app.v1alpha1.AppParametersRequest")
	proto.RegisterType((*AppParametersResponse)(nil), "penumbra.core.app.v1alpha1.AppParametersResponse")
	proto.RegisterType((*GenesisAppState)(nil), "penumbra.core.app.v1alpha1.GenesisAppState")
	proto.RegisterType((*GenesisContent)(nil), "penumbra.core.app.v1alpha1.GenesisContent")
}

func init() {
	proto.RegisterFile("penumbra/core/app/v1alpha1/app.proto", fileDescriptor_e3359d6f6803c6c6)
}

var fileDescriptor_e3359d6f6803c6c6 = []byte{
	// 1011 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xc0, 0xeb, 0xf4, 0xd2, 0x6b, 0xb7, 0x7f, 0x6f, 0x7b, 0x87, 0x4a, 0xa4, 0x8b, 0x4e, 0x01,
	0xc1, 0xf1, 0x47, 0xf6, 0x25, 0x87, 0x40, 0xe4, 0x00, 0x29, 0x29, 0xa2, 0x3d, 0xa1, 0x93, 0x82,
	0xcb, 0xdd, 0xc3, 0x51, 0xa9, 0xda, 0xd8, 0x93, 0xc4, 0x34, 0xf1, 0x2e, 0xb6, 0x13, 0xd1, 0x6f,
	0xc1, 0x57, 0x80, 0x47, 0x1e, 0xe0, 0x01, 0x89, 0xcf, 0x80, 0x78, 0xba, 0x47, 0x5e, 0x90, 0x50,
	0xfb, 0xc6, 0xa7, 0x40, 0xfb, 0xcf, 0x5e, 0x1b, 0xb9, 0x4e, 0xdf, 0x3c, 0xb3, 0x33, 0xbf, 0x99,
	0x9d, 0x9d, 0xd9, 0x35, 0x7a, 0x93, 0x41, 0x38, 0x9f, 0x0d, 0x23, 0xe2, 0x78, 0x34, 0x02, 0x87,
	0x30, 0xe6, 0x2c, 0xda, 0x64, 0xca, 0x26, 0xa4, 0xcd, 0x05, 0x9b, 0x45, 0x34, 0xa1, 0xb8, 0xa1,
	0xad, 0x6c, 0x6e, 0x65, 0xf3, 0x05, 0x6d, 0xd5, 0xe8, 0xe4, 0x09, 0x1e, 0x9d, 0x31, 0x1a, 0x42,
	0x98, 0x38, 0xde, 0x84, 0x04, 0x61, 0x46, 0x13, 0xa2, 0xe4, 0x95, 0xfb, 0xc4, 0x09, 0x39, 0x87,
	0xcc, 0x47, 0x88, 0xca, 0xa7, 0x5f, 0xea, 0x33, 0x09, 0x60, 0xea, 0x83, 0x7f, 0xc6, 0x28, 0x9d,
	0x1a, 0xbe, 0xa6, 0x5a, 0x31, 0x3e, 0x29, 0x63, 0x8c, 0xe9, 0x02, 0xa2, 0x90, 0x84, 0x9e, 0x11,
	0x3c, 0xd3, 0x29, 0x6f, 0xbb, 0xcc, 0x3b, 0x18, 0x7a, 0x99, 0x5b, 0x30, 0xf4, 0xaa, 0xec, 0x47,
	0x60, 0x84, 0x19, 0x41, 0x25, 0xdf, 0x27, 0x34, 0xb3, 0xf7, 0x09, 0x55, 0xf6, 0x6f, 0xf3, 0xb8,
	0xda, 0x74, 0x16, 0x24, 0x33, 0x6e, 0xbb, 0x68, 0x1b, 0x92, 0x34, 0x6c, 0x7d, 0x8d, 0x76, 0xbf,
	0x84, 0x8b, 0x17, 0x64, 0x3a, 0x07, 0x17, 0xbe, 0x9b, 0x43, 0x9c, 0xe0, 0xd7, 0xd1, 0xba, 0x38,
	0x90, 0xb3, 0xc0, 0x3f, 0xb0, 0x1e, 0x58, 0x0f, 0x37, 0xdc, 0xdb, 0x42, 0x7e, 0xea, 0xe3, 0x3d,
	0xb4, 0x7a, 0x0e, 0x17, 0x07, 0x35, 0xa1, 0xe5, 0x9f, 0xf8, 0x2e, 0xaa, 0xb3, 0x88, 0xd2, 0xd1,
	0xc1, 0xea, 0x03, 0xeb, 0xe1, 0xba, 0x2b, 0x85, 0xd6, 0xef, 0x16, 0xda, 0xcb, 0xb0, 0x31, 0xa3,
	0x61, 0x0c, 0xf8, 0x18, 0xd5, 0x17, 0x5c, 0x21, 0xa0, 0x9b, 0x9d, 0x8e, 0x5d, 0xde, 0x39, 0x76,
	0xd1, 0xd9, 0x96, 0x92, 0x04, 0xe0, 0x8f, 0x75, 0xd0, 0x9a, 0x20, 0xbd, 0x61, 0xf3, 0xc2, 0x0a,
	0x88, 0xb1, 0xbf, 0x45, 0xdb, 0x7e, 0x06, 0xd1, 0xf9, 0x14, 0x06, 0xdc, 0x54, 0x65, 0xd6, 0xb8,
	0x8f, 0xea, 0x02, 0xc5, 0x13, 0xcf, 0xb2, 0xd9, 0x52, 0xe4, 0xd6, 0x11, 0xc2, 0x83, 0x08, 0x46,
	0xc1, 0xf7, 0xcb, 0x56, 0xe4, 0x35, 0xb4, 0xc6, 0x84, 0x83, 0x2a, 0x8a, 0x92, 0x5a, 0x9f, 0xa2,
	0xfd, 0x1c, 0x48, 0xd5, 0x40, 0x15, 0xd0, 0xca, 0x15, 0x50, 0xe6, 0x51, 0x33, 0xf3, 0xf8, 0xed,
	0x16, 0xda, 0xee, 0x31, 0x36, 0x20, 0x11, 0x99, 0x41, 0x02, 0x51, 0x8c, 0x5f, 0xa2, 0x2d, 0x99,
	0x03, 0xe3, 0xba, 0x58, 0x15, 0xf1, 0xa3, 0x42, 0x11, 0xd3, 0xc6, 0xb0, 0xe5, 0x4c, 0xa5, 0x05,
	0x3d, 0xe4, 0x62, 0x86, 0x73, 0x37, 0xbd, 0x54, 0x11, 0x63, 0x17, 0x21, 0x9f, 0x50, 0x4d, 0x96,
	0x45, 0x7d, 0x5c, 0x4a, 0xe6, 0x5d, 0x96, 0x72, 0x3f, 0x27, 0xd4, 0xa0, 0x6e, 0xf8, 0x4a, 0x8c,
	0x71, 0x88, 0xee, 0x64, 0x53, 0xa2, 0xd1, 0xab, 0x02, 0xdd, 0x2b, 0x45, 0x1b, 0x73, 0x95, 0x46,
	0x38, 0x4a, 0x75, 0x46, 0xa0, 0xbd, 0x71, 0x5e, 0x2b, 0xf6, 0x10, 0x0c, 0x3d, 0x1d, 0xe8, 0x56,
	0xc5, 0x1e, 0x78, 0xc3, 0xa4, 0x11, 0x9e, 0x0e, 0x3d, 0x73, 0x0f, 0x81, 0x12, 0x45, 0xcd, 0xc5,
	0x35, 0xa3, 0xa9, 0xf5, 0x8a, 0x9a, 0xcb, 0x3b, 0x29, 0xe5, 0x9e, 0x70, 0xd1, 0xac, 0x79, 0x9c,
	0x2a, 0x44, 0xbe, 0x23, 0x48, 0xc9, 0x6b, 0x15, 0xf9, 0xf2, 0x9b, 0x20, 0xe5, 0x7e, 0x01, 0x26,
	0x75, 0x63, 0xa4, 0xc4, 0xb8, 0xd5, 0x46, 0x77, 0x73, 0x4d, 0x53, 0xdd, 0xbf, 0xad, 0x00, 0xdd,
	0x2b, 0xb8, 0xa8, 0x4e, 0x1d, 0xa0, 0x1d, 0xc2, 0x98, 0xcc, 0x4f, 0xac, 0xa8, 0x8e, 0x7b, 0xe7,
	0xba, 0xb1, 0xcd, 0xa3, 0xb6, 0x89, 0x29, 0xb6, 0x7e, 0xb1, 0xd0, 0xee, 0x11, 0x84, 0x10, 0x07,
	0x71, 0x8f, 0xb1, 0x93, 0x84, 0x24, 0x80, 0x9f, 0xa3, 0xdd, 0xb1, 0x54, 0x9d, 0x79, 0x34, 0x4c,
	0x20, 0x4c, 0x54, 0x98, 0x77, 0xaf, 0x0b, 0xa3, 0x28, 0x87, 0xd2, 0xe3, 0x78, 0xc5, 0xdd, 0x19,
	0xe7, 0x34, 0xd8, 0x41, 0x38, 0xc5, 0x4e, 0xc0, 0x3b, 0x67, 0x34, 0x08, 0x13, 0x39, 0x61, 0xc7,
	0x2b, 0xee, 0x1d, 0x6d, 0x9d, 0x2e, 0xf5, 0xf7, 0x91, 0x56, 0x9e, 0xf1, 0x5d, 0xc7, 0x3c, 0xb9,
	0xd6, 0xaf, 0x75, 0xb4, 0x93, 0x0f, 0x85, 0xbf, 0x41, 0xdb, 0xb2, 0x23, 0xf2, 0xd9, 0x7e, 0xb8,
	0x6c, 0x4b, 0xe4, 0x71, 0xae, 0x6c, 0x2f, 0x0d, 0x8f, 0xd0, 0xbd, 0xdc, 0xcb, 0x94, 0x06, 0x91,
	0x13, 0xf9, 0x59, 0x79, 0x90, 0xdc, 0x7b, 0x56, 0x16, 0x6c, 0x5f, 0x9b, 0x0d, 0x28, 0x9d, 0xea,
	0x98, 0xdf, 0x22, 0x6c, 0x8c, 0xa9, 0x0e, 0x28, 0xe7, 0xf4, 0xc9, 0xcd, 0xe6, 0x34, 0x1f, 0xcd,
	0x98, 0x7e, 0x1d, 0xeb, 0x39, 0xda, 0xe4, 0x23, 0xaa, 0x83, 0xc8, 0x19, 0xfd, 0x60, 0xb9, 0x19,
	0x2d, 0xd0, 0xf9, 0xac, 0x1b, 0x67, 0x22, 0xbb, 0x5b, 0x83, 0xeb, 0x15, 0x67, 0x52, 0xb8, 0x1a,
	0x8b, 0x67, 0x22, 0x96, 0x8d, 0x9c, 0xf9, 0xd5, 0xa8, 0xd1, 0x6b, 0x15, 0x39, 0xe7, 0xee, 0xc6,
	0x62, 0xce, 0x3e, 0xa1, 0x06, 0x96, 0x4f, 0xbf, 0xc6, 0xde, 0xae, 0xc0, 0xe6, 0xc6, 0xbf, 0x88,
	0x1d, 0x81, 0xae, 0x70, 0xe7, 0xef, 0x1a, 0xda, 0xfa, 0x6a, 0x0e, 0xd1, 0xc5, 0x09, 0x44, 0x8b,
	0xc0, 0x03, 0x9c, 0x14, 0x9f, 0x91, 0x47, 0xcb, 0x8f, 0xaf, 0xbc, 0x3c, 0x1a, 0xed, 0x1b, 0x78,
	0xa8, 0xbb, 0x03, 0xd0, 0xba, 0x7e, 0xc0, 0xf1, 0x7b, 0xcb, 0x3d, 0xf3, 0x32, 0xd6, 0xfb, 0x37,
	0xf9, 0x27, 0xc0, 0x0c, 0x6d, 0x1a, 0x6f, 0x2c, 0xb6, 0xaf, 0x73, 0xfe, 0xff, 0xab, 0xde, 0x70,
	0x96, 0xb6, 0x97, 0xf1, 0x1e, 0x59, 0xfd, 0x1f, 0x6b, 0x7f, 0x5c, 0x36, 0xad, 0x57, 0x97, 0x4d,
	0xeb, 0x9f, 0xcb, 0xa6, 0xf5, 0xc3, 0x55, 0x73, 0xe5, 0xd5, 0x55, 0x73, 0xe5, 0xaf, 0xab, 0xe6,
	0x0a, 0x6a, 0x7a, 0x74, 0x76, 0x0d, 0xb0, 0xbf, 0xce, 0x4b, 0xc5, 0x7f, 0xb9, 0x06, 0xd6, 0x4b,
	0x77, 0x1c, 0x24, 0x93, 0xf9, 0x90, 0x1f, 0xb0, 0xe3, 0xd1, 0x78, 0x46, 0x63, 0x27, 0x82, 0x29,
	0xb9, 0x80, 0xc8, 0x59, 0x74, 0xd2, 0x4f, 0xd1, 0x87, 0xb1, 0x53, 0xfe, 0x17, 0xfe, 0x84, 0x30,
	0xa6, 0xbf, 0x7f, 0xaa, 0xad, 0x0e, 0x0e, 0x7b, 0x3f, 0xd7, 0x1a, 0x03, 0x9d, 0xc2, 0x21, 0x4f,
	0xa1, 0xc7, 0x98, 0xfd, 0x42, 0x99, 0xfc, 0x99, 0x2d, 0x9e, 0xf2, 0xc5, 0xd3, 0x1e, 0x63, 0xa7,
	0x7a, 0xf1, 0xb2, 0xf6, 0x56, 0xf9, 0xe2, 0xe9, 0xd1, 0xa0, 0xff, 0x0c, 0x12, 0xe2, 0x93, 0x84,
	0xfc, 0x5b, 0xbb, 0xaf, 0x0d, 0xbb, 0x5d, 0x6e, 0xd9, 0xed, 0xf6, 0x18, 0xeb, 0x76, 0xb5, 0xed,
	0x70, 0x4d, 0xfc, 0x58, 0x3e, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xce, 0x05, 0x90, 0x3f,
	0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Gets the app parameters.
	AppParameters(ctx context.Context, in *AppParametersRequest, opts ...grpc.CallOption) (*AppParametersResponse, error)
	// General-purpose key-value state query API, that can be used to query
	// arbitrary keys in the JMT storage.
	KeyValue(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*KeyValueResponse, error)
	// General-purpose prefixed key-value state query API, that can be used to query
	// arbitrary prefixes in the JMT storage.
	// Returns a stream of `PrefixValueResponse`s.
	PrefixValue(ctx context.Context, in *PrefixValueRequest, opts ...grpc.CallOption) (QueryService_PrefixValueClient, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) AppParameters(ctx context.Context, in *AppParametersRequest, opts ...grpc.CallOption) (*AppParametersResponse, error) {
	out := new(AppParametersResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.app.v1alpha1.QueryService/AppParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) KeyValue(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*KeyValueResponse, error) {
	out := new(KeyValueResponse)
	err := c.cc.Invoke(ctx, "/penumbra.core.app.v1alpha1.QueryService/KeyValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PrefixValue(ctx context.Context, in *PrefixValueRequest, opts ...grpc.CallOption) (QueryService_PrefixValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[0], "/penumbra.core.app.v1alpha1.QueryService/PrefixValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServicePrefixValueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_PrefixValueClient interface {
	Recv() (*PrefixValueResponse, error)
	grpc.ClientStream
}

type queryServicePrefixValueClient struct {
	grpc.ClientStream
}

func (x *queryServicePrefixValueClient) Recv() (*PrefixValueResponse, error) {
	m := new(PrefixValueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// Gets the app parameters.
	AppParameters(context.Context, *AppParametersRequest) (*AppParametersResponse, error)
	// General-purpose key-value state query API, that can be used to query
	// arbitrary keys in the JMT storage.
	KeyValue(context.Context, *KeyValueRequest) (*KeyValueResponse, error)
	// General-purpose prefixed key-value state query API, that can be used to query
	// arbitrary prefixes in the JMT storage.
	// Returns a stream of `PrefixValueResponse`s.
	PrefixValue(*PrefixValueRequest, QueryService_PrefixValueServer) error
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) AppParameters(ctx context.Context, req *AppParametersRequest) (*AppParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppParameters not implemented")
}
func (*UnimplementedQueryServiceServer) KeyValue(ctx context.Context, req *KeyValueRequest) (*KeyValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyValue not implemented")
}
func (*UnimplementedQueryServiceServer) PrefixValue(req *PrefixValueRequest, srv QueryService_PrefixValueServer) error {
	return status.Errorf(codes.Unimplemented, "method PrefixValue not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_AppParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).AppParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.app.v1alpha1.QueryService/AppParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).AppParameters(ctx, req.(*AppParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_KeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).KeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/penumbra.core.app.v1alpha1.QueryService/KeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).KeyValue(ctx, req.(*KeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PrefixValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrefixValueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).PrefixValue(m, &queryServicePrefixValueServer{stream})
}

type QueryService_PrefixValueServer interface {
	Send(*PrefixValueResponse) error
	grpc.ServerStream
}

type queryServicePrefixValueServer struct {
	grpc.ServerStream
}

func (x *queryServicePrefixValueServer) Send(m *PrefixValueResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "penumbra.core.app.v1alpha1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppParameters",
			Handler:    _QueryService_AppParameters_Handler,
		},
		{
			MethodName: "KeyValue",
			Handler:    _QueryService_KeyValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrefixValue",
			Handler:       _QueryService_PrefixValue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "penumbra/core/app/v1alpha1/app.proto",
}

func (m *KeyValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof {
		i--
		if m.Proof {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyValueResponse_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValueResponse_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValueResponse_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrefixValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrefixValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeParams != nil {
		{
			size, err := m.FeeParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.StakeParams != nil {
		{
			size, err := m.StakeParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IbcParams != nil {
		{
			size, err := m.IbcParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GovernanceParams != nil {
		{
			size, err := m.GovernanceParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DaoParams != nil {
		{
			size, err := m.DaoParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChainParams != nil {
		{
			size, err := m.ChainParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppParameters != nil {
		{
			size, err := m.AppParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAppState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAppState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAppState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenesisAppState != nil {
		{
			size := m.GenesisAppState.Size()
			i -= size
			if _, err := m.GenesisAppState.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAppState_GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAppState_GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GenesisContent != nil {
		{
			size, err := m.GenesisContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GenesisAppState_GenesisCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAppState_GenesisCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GenesisCheckpoint != nil {
		i -= len(m.GenesisCheckpoint)
		copy(dAtA[i:], m.GenesisCheckpoint)
		i = encodeVarintApp(dAtA, i, uint64(len(m.GenesisCheckpoint)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GenesisContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeContent != nil {
		{
			size, err := m.FeeContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DaoContent != nil {
		{
			size, err := m.DaoContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ChainContent != nil {
		{
			size, err := m.ChainContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IbcContent != nil {
		{
			size, err := m.IbcContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GovernanceContent != nil {
		{
			size, err := m.GovernanceContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ShieldedPoolContent != nil {
		{
			size, err := m.ShieldedPoolContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StakeContent != nil {
		{
			size, err := m.StakeContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	offset -= sovApp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Proof {
		n += 2
	}
	return n
}

func (m *KeyValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *KeyValueResponse_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *PrefixValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *PrefixValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainParams != nil {
		l = m.ChainParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.DaoParams != nil {
		l = m.DaoParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.GovernanceParams != nil {
		l = m.GovernanceParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.IbcParams != nil {
		l = m.IbcParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.StakeParams != nil {
		l = m.StakeParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.FeeParams != nil {
		l = m.FeeParams.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppParameters != nil {
		l = m.AppParameters.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *GenesisAppState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisAppState != nil {
		n += m.GenesisAppState.Size()
	}
	return n
}

func (m *GenesisAppState_GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisContent != nil {
		l = m.GenesisContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}
func (m *GenesisAppState_GenesisCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisCheckpoint != nil {
		l = len(m.GenesisCheckpoint)
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}
func (m *GenesisContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeContent != nil {
		l = m.StakeContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ShieldedPoolContent != nil {
		l = m.ShieldedPoolContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.GovernanceContent != nil {
		l = m.GovernanceContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.IbcContent != nil {
		l = m.IbcContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ChainContent != nil {
		l = m.ChainContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.DaoContent != nil {
		l = m.DaoContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.FeeContent != nil {
		l = m.FeeContent.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func sovApp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Proof = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &KeyValueResponse_Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &types.MerkleProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValueResponse_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainParams == nil {
				m.ChainParams = &v1alpha1.ChainParameters{}
			}
			if err := m.ChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DaoParams == nil {
				m.DaoParams = &v1alpha11.DaoParameters{}
			}
			if err := m.DaoParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GovernanceParams == nil {
				m.GovernanceParams = &v1alpha12.GovernanceParameters{}
			}
			if err := m.GovernanceParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcParams == nil {
				m.IbcParams = &v1alpha13.IbcParameters{}
			}
			if err := m.IbcParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeParams == nil {
				m.StakeParams = &v1alpha14.StakeParameters{}
			}
			if err := m.StakeParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeParams == nil {
				m.FeeParams = &v1alpha15.FeeParameters{}
			}
			if err := m.FeeParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppParameters == nil {
				m.AppParameters = &AppParameters{}
			}
			if err := m.AppParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisAppState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisAppState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisAppState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenesisContent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GenesisAppState = &GenesisAppState_GenesisContent{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.GenesisAppState = &GenesisAppState_GenesisCheckpoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeContent == nil {
				m.StakeContent = &v1alpha14.GenesisContent{}
			}
			if err := m.StakeContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldedPoolContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShieldedPoolContent == nil {
				m.ShieldedPoolContent = &v1alpha16.GenesisContent{}
			}
			if err := m.ShieldedPoolContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GovernanceContent == nil {
				m.GovernanceContent = &v1alpha12.GenesisContent{}
			}
			if err := m.GovernanceContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcContent == nil {
				m.IbcContent = &v1alpha13.GenesisContent{}
			}
			if err := m.IbcContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainContent == nil {
				m.ChainContent = &v1alpha1.GenesisContent{}
			}
			if err := m.ChainContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DaoContent == nil {
				m.DaoContent = &v1alpha11.GenesisContent{}
			}
			if err := m.DaoContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeContent == nil {
				m.FeeContent = &v1alpha15.GenesisContent{}
			}
			if err := m.FeeContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApp = fmt.Errorf("proto: unexpected end of group")
)

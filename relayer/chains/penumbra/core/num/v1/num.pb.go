// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: penumbra/core/num/v1/num.proto

package numv1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The quantity of a particular Asset. Represented as a 128-bit unsigned integer,
// split over two fields, `lo` and `hi`, representing the low- and high-order bytes
// of the 128-bit value, respectively. Clients must assemble these bits in their
// implementation into a `uint128` or comparable data structure, in order to model
// the Amount accurately.
type Amount struct {
	Lo uint64 `protobuf:"varint,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi uint64 `protobuf:"varint,2,opt,name=hi,proto3" json:"hi,omitempty"`
}

func (m *Amount) Reset()         { *m = Amount{} }
func (m *Amount) String() string { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()    {}
func (*Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_660cebd44e5047eb, []int{0}
}
func (m *Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amount.Merge(m, src)
}
func (m *Amount) XXX_Size() int {
	return m.Size()
}
func (m *Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Amount proto.InternalMessageInfo

func (m *Amount) GetLo() uint64 {
	if m != nil {
		return m.Lo
	}
	return 0
}

func (m *Amount) GetHi() uint64 {
	if m != nil {
		return m.Hi
	}
	return 0
}

func init() {
	proto.RegisterType((*Amount)(nil), "penumbra.core.num.v1.Amount")
}

func init() { proto.RegisterFile("penumbra/core/num/v1/num.proto", fileDescriptor_660cebd44e5047eb) }

var fileDescriptor_660cebd44e5047eb = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x48, 0xcd, 0x2b,
	0xcd, 0x4d, 0x2a, 0x4a, 0xd4, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0xcf, 0x2b, 0xcd, 0xd5, 0x2f, 0x33,
	0x04, 0x51, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x22, 0x30, 0x79, 0x3d, 0x90, 0xbc, 0x1e,
	0x48, 0xa2, 0xcc, 0x50, 0x49, 0x83, 0x8b, 0xcd, 0x31, 0x37, 0xbf, 0x34, 0xaf, 0x44, 0x88, 0x8f,
	0x8b, 0x29, 0x27, 0x5f, 0x82, 0x51, 0x81, 0x51, 0x83, 0x25, 0x88, 0x29, 0x27, 0x1f, 0xc4, 0xcf,
	0xc8, 0x94, 0x60, 0x82, 0xf0, 0x33, 0x32, 0x9d, 0xbe, 0x33, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1,
	0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70,
	0xe3, 0xb1, 0x1c, 0x03, 0x97, 0x44, 0x72, 0x7e, 0xae, 0x1e, 0x36, 0xe3, 0x9d, 0x38, 0xfc, 0x4a,
	0x73, 0x03, 0x40, 0xd6, 0x07, 0x30, 0x46, 0xb9, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25,
	0xe7, 0xe7, 0xea, 0x27, 0xe7, 0x17, 0xe7, 0xe6, 0x17, 0xeb, 0x17, 0xa5, 0xe6, 0x24, 0x56, 0xa6,
	0x16, 0xe9, 0x97, 0x19, 0xc1, 0x99, 0xc9, 0x19, 0x89, 0x99, 0x79, 0xc5, 0xfa, 0xd8, 0x3c, 0x63,
	0x9d, 0x57, 0x9a, 0x5b, 0x66, 0xb8, 0x88, 0x89, 0x39, 0xc0, 0xd9, 0x6f, 0x15, 0x93, 0x48, 0x00,
	0xcc, 0x42, 0x67, 0x90, 0x85, 0x7e, 0xa5, 0xb9, 0x7a, 0x61, 0x86, 0xa7, 0x10, 0xc2, 0x31, 0x20,
	0xe1, 0x18, 0xbf, 0xd2, 0xdc, 0x98, 0x30, 0xc3, 0x47, 0x4c, 0x0a, 0xd8, 0x84, 0x63, 0xdc, 0x03,
	0x9c, 0x7c, 0x53, 0x4b, 0x12, 0x53, 0x12, 0x4b, 0x12, 0x5f, 0x31, 0x89, 0xc3, 0x94, 0x58, 0x59,
	0x81, 0xd4, 0x58, 0x59, 0xf9, 0x95, 0xe6, 0x5a, 0x59, 0x85, 0x19, 0x26, 0xb1, 0x81, 0x03, 0xd0,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x3e, 0x53, 0x90, 0x62, 0x01, 0x00, 0x00,
}

func (m *Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Amount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hi != 0 {
		i = encodeVarintNum(dAtA, i, uint64(m.Hi))
		i--
		dAtA[i] = 0x10
	}
	if m.Lo != 0 {
		i = encodeVarintNum(dAtA, i, uint64(m.Lo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNum(dAtA []byte, offset int, v uint64) int {
	offset -= sovNum(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lo != 0 {
		n += 1 + sovNum(uint64(m.Lo))
	}
	if m.Hi != 0 {
		n += 1 + sovNum(uint64(m.Hi))
	}
	return n
}

func sovNum(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNum(x uint64) (n int) {
	return sovNum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lo", wireType)
			}
			m.Lo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hi", wireType)
			}
			m.Hi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hi |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNum
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNum
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNum
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNum        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNum          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNum = fmt.Errorf("proto: unexpected end of group")
)
